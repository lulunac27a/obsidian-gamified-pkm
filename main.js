/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => gamification
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var defaultSettings = {
  enableInitCommand: true,
  bindEnter: true,
  bindTab: true,
  avatarPageName: "Avatar - Gamification",
  tagsExclude: "",
  folderExclude: "Excalidraw",
  progressiveSumLayer2: "==",
  progressiveSumLayer3: "**",
  numAllFiles: 1,
  numAllFilesCount: 0,
  chartReduzierungMonate: 0,
  statusPoints: 0,
  statusLevel: 1,
  xpForNextLevel: 1e3,
  gamificationStartDate: "12.08.2023",
  badgeBoosterState: false,
  badgeBoosterFactor: 1,
  debug: false,
  dailyNoteCreationTask: 0,
  dailyNoteCreationDate: "12.08.2023",
  weeklyNoteCreationTask: 0,
  weeklyNoteCreationDate: "12.08.2023",
  boosterIncredients: "Whimsical Wisdom Crystals,Curiosity Coins,Eureka Energy Orbs,Serendipity Stars,Creativity Crystals,Discovery Dice,Metaphorical Medals,Curious Cat Companion,Another One",
  nexusNode: 0,
  connectionCrystal: 0,
  masteryScroll: 0,
  insightPrism: 0,
  reflectiveEssence: 0,
  amplificationCrystal: 0,
  creativeCatalyst: 0,
  precisionLens: 0
};
var GamificationPluginSettings = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.addClass("excalidraw-settings");
    this.containerEl.empty();
    const coffeeDiv = containerEl.createDiv("coffee");
    coffeeDiv.addClass("ex-coffee-div");
    const coffeeLink = coffeeDiv.createEl("a", {
      href: "https://ko-fi.com/andreastrebing"
    });
    const coffeeImg = coffeeLink.createEl("img", {
      attr: {
        src: "https://cdn.ko-fi.com/cdn/kofi3.png?v=3"
      }
    });
    coffeeImg.height = 45;
    containerEl.createEl("h2", { text: "Gamify your PKM - Settings" });
    console.log("settings called");
    new import_obsidian.Setting(containerEl).setName("#tags to ignore").setDesc('enter tags without # and separate with ", ".\nInclude nested tags.').addText((text) => text.setPlaceholder("Enter your tag1, tag2/subtag, \u2026").setValue(this.plugin.settings.tagsExclude).onChange(async (value) => {
      this.plugin.settings.tagsExclude = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("folder to ignore").setDesc('enter folder whichs content shall be ignored. Separate with ", ".').addText((text) => text.setPlaceholder("Enter your folder1, folder2, \u2026").setValue(this.plugin.settings.folderExclude).onChange(async (value) => {
      this.plugin.settings.folderExclude = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Profile Page Name").setDesc("you can change here the name of your profile page if you like.").addText((text) => text.setPlaceholder("name").setValue(this.plugin.settings.avatarPageName).onChange(async (value) => {
      this.plugin.settings.avatarPageName = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h2", { text: "Other Settings" });
    new import_obsidian.Setting(containerEl).setName("Disable Init Command").setDesc("you can remove the init command from command prompt by switching off.\nrestart needed.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableInitCommand).onChange((value) => {
        this.plugin.settings.enableInitCommand = value;
        this.plugin.saveData(this.plugin.settings);
      })
    );
    new import_obsidian.Setting(containerEl).setName("limit the visible month in the chart on your avatar page: " + this.plugin.settings.avatarPageName).setDesc("if 0, all month will be shown. Enter a number how many month shall be shown.").addText((text) => text.setPlaceholder("Number of Month to show").setValue(this.plugin.settings.chartReduzierungMonate.toString()).onChange(async (value) => {
      this.plugin.settings.chartReduzierungMonate = parseInt(value);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Progressive Summarization").setDesc("you can change which formatting you use for Layer 2 and 3.").addText((text) => text.setPlaceholder("Layer 2 is usually **").setValue(this.plugin.settings.progressiveSumLayer2).onChange(async (value) => {
      this.plugin.settings.progressiveSumLayer2 = value;
      await this.plugin.saveSettings();
    })).addText((text) => text.setPlaceholder("Layer 3 is usually ==").setValue(this.plugin.settings.progressiveSumLayer3).onChange(async (value) => {
      this.plugin.settings.progressiveSumLayer3 = value;
      await this.plugin.saveSettings();
    }));
  }
};

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/isDate/index.js
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

// node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/defaultOptions/index.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters = {
  // Year
  y: function y(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var lightFormatters_default = formatters;

// node_modules/date-fns/esm/_lib/format/formatters/index.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters2 = {
  // Era
  G: function G(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y2(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters_default.y(date, token);
  },
  // Local week-numbering year
  Y: function Y(date, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function Q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M2(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters_default.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w(date, token, localize2, options) {
    var week = getUTCWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function I(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function d2(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters_default.d(date, token);
  },
  // Day of year
  D: function D(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function E(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a2(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h2(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters_default.h(date, token);
  },
  // Hour [0-23]
  H: function H2(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters_default.H(date, token);
  },
  // Hour [0-11]
  K: function K(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function k(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function m2(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters_default.m(date, token);
  },
  // Second
  s: function s2(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters_default.s(date, token);
  },
  // Fraction of second
  S: function S2(date, token) {
    return lightFormatters_default.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
var formatters_default = formatters2;

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters_default = longFormatters;

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
var formatDistance_default = formatDistance;

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
var formatLong_default = formatLong;

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
var formatRelative_default = formatRelative;

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
var localize_default = localize;

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
var match_default = match;

// node_modules/date-fns/esm/locale/en-US/index.js
var locale = {
  code: "en-US",
  formatDistance: formatDistance_default,
  formatLong: formatLong_default,
  formatRelative: formatRelative_default,
  localize: localize_default,
  match: match_default,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
var en_US_default = locale;

// node_modules/date-fns/esm/_lib/defaultLocale/index.js
var defaultLocale_default = en_US_default;

// node_modules/date-fns/esm/format/index.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale_default;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  var matched = input.match(escapedStringRegExp);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}

// src/constants.ts
var pointsNoteMajurity = 100;
var pointsMajurity = 10;
var pointsForDailyChallenge = 500;
var pointsForWeeklyChallenge = 2e3;
var avatarInitContent = `# Avatar

|        |     |
| ------ | --- |
| Level  | 0    |
| Points | 0    |
^levelAndPoints	
\`\`\`chart
type: bar
labels: [Expririence]
series:
  - title: points reached
    data: [0]
  - title: points to earn to level up
    data: [1000]
xMin: 0
xMax: 1000
tension: 0.2
width: 40%
labelColors: false
fill: false
beginAtZero: false
bestFit: false
bestFitTitle: undefined
bestFitNumber: 0
stacked: true
indexAxis: y
xTitle: "progress"
legend: false
\`\`\`

|             |     |       |
| ----------- | --- | ----- |
| **daily Notes** | *500EP* | **0/2** |
^dailyNotesChallenge
|  |     ||
| ---- | --- | --- |
| **weekly Notes** | *2000EP*     |  **0/7**   |
^weeklyNotesChallenge
\`\`\`chart
type: bar
labels: [Notes]
series:
  - title: days done in a row
    data: [0]
  - title: days to do in a row
    data: [7]
xMin: 0
xMax: 7
tension: 0.2
width: 40%
labelColors: false
fill: false
beginAtZero: false
bestFit: false
bestFitTitle: undefined
bestFitNumber: 0
stacked: true
indexAxis: y
xTitle: "days"
legend: false
\`\`\`

| Level | Count |
| :---: | :---: |
| Majurity 5 |\`$=dv.pages().where(p => [5, '5', '5\u27A1\uFE0F', '5\u2B07\uFE0F', '5\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 4 |\`$=dv.pages().where(p => [4, '4', '4\u27A1\uFE0F', '4\u2B07\uFE0F', '4\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 3 |\`$=dv.pages().where(p => [3, '3', '3\u27A1\uFE0F', '3\u2B07\uFE0F', '3\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 2 |\`$=dv.pages().where(p => [2, '2', '2\u27A1\uFE0F', '2\u2B07\uFE0F', '2\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 1 |\`$=dv.pages().where(p => [1, '1', '1\u27A1\uFE0F', '1\u2B07\uFE0F', '1\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 0 |\`$=dv.pages().where(p => [0, '0', '0\u27A1\uFE0F', '0\u2B07\uFE0F', '0\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|


\`\`\`chart
type: bar
labels: [0, 0, 0]
series:
  - title: modified
    data: [0, 0, 0]
tension: 0.2
width: 80 %
labelColors: false
fill: false
beginAtZero: false
bestFit: false
bestFitTitle: undefined
bestFitNumber: 0
stacked: true
yTitle: "Number of Notes"
xTitle: "Months"
xMin: 0
\`\`\`
^ChartMonth


### Badges
#### achieved


#### outstanding
level 5: *Enlightened Novice*
level 10: *Curious Connoisseur*
level 20: *Brainiac Trailblazer*
level 27: *Scholarly Trailblazer*
level 35: *Info Ninja Master*
level 42: *Wise Owl Guru*
level 50: *Einstein Incarnate*
level 60: *Mastermind Sage*
level 75: *Cerebral Maestro*
level 82: *Zen Knowledge Keeper*
level 90: *Grand Archivist Overlord*
level 100: *Omniscient Sage of Everything*



### **note-maturity = 5**
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 5 or note-maturity = "5" or note-maturity = "5\u27A1\uFE0F" or note-maturity = "5\u2B06\uFE0F" or note-maturity = "5\u2B07\uFE0F"
\`\`\`

### **note-maturity = 4**
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 4 or note-maturity = "4" or note-maturity = "4\u27A1\uFE0F" or note-maturity = "4\u2B06\uFE0F" or note-maturity = "4\u2B07\uFE0F"
\`\`\`

### note-maturity = 3
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 3 or note-maturity = "3" or note-maturity = "3\u27A1\uFE0F" or note-maturity = "3\u2B06\uFE0F" or note-maturity = "3\u2B07\uFE0F"
\`\`\`

### note-maturity = 2
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 2 or note-maturity = "2" or note-maturity = "2\u27A1\uFE0F" or note-maturity = "2\u2B06\uFE0F" or note-maturity = "2\u2B07\uFE0F"
\`\`\`

### note-maturity = 1
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 1 or note-maturity = "1" or note-maturity = "1\u27A1\uFE0F" or note-maturity = "1\u2B06\uFE0F" or note-maturity = "1\u2B07\uFE0F"
\`\`\`

### note-maturity = 0
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 0 or note-maturity = "0" or note-maturity = "0\u27A1\uFE0F" or note-maturity = "0\u2B06\uFE0F" or note-maturity = "0\u2B07\uFE0F"
\`\`\`
`;

// src/majuritycalculation.ts
var fs = __toESM(require("fs"));
var path = __toESM(require("path"));
function rateProgressiveSummarization(charCountTotal, layer2count, layer3count) {
  const percentLayer2 = layer2count * 100 / charCountTotal;
  const percentLayer3 = layer3count * 100 / layer2count;
  var layer2majurity = 0;
  var layer3majurity = 0;
  var majurity = 0;
  if (charCountTotal < 3e3) {
    majurity = 0;
  } else {
    if (percentLayer2 == 0) {
      layer2majurity = 0;
    } else if (percentLayer2 <= 10) {
      layer2majurity = 5;
    } else if (percentLayer2 <= 20) {
      layer2majurity = 4;
    } else if (percentLayer2 <= 30) {
      layer2majurity = 3;
    } else if (percentLayer2 <= 40) {
      layer2majurity = 2;
    } else if (percentLayer2 <= 40) {
      layer2majurity = 1;
    } else {
      layer2majurity = 0;
    }
    if (layer3count == 0) {
      layer3majurity = 0;
    } else if (percentLayer3 <= 10) {
      layer3majurity = 5;
    } else if (percentLayer3 <= 20) {
      layer3majurity = 4;
    } else {
      layer3majurity = 0;
    }
    if (layer2majurity == 1 && layer3majurity == 0) {
      majurity = 1;
    } else if (layer2majurity == 2 && layer3majurity == 0) {
      majurity = 2;
    } else if (layer2majurity >= 3 && layer3majurity == 0) {
      majurity = 3;
    } else if ((layer2majurity == 3 || layer2majurity == 4) && (layer3majurity == 4 || layer3majurity == 5)) {
      majurity = 4;
    } else if (layer2majurity == 5 && layer3majurity == 5) {
      majurity = 5;
    } else {
      majurity = 0;
    }
  }
  return majurity;
}
function countLayer2AndLayer3Characters(content, filename, layer2, layer3) {
  const filenameWithoutExtension = filename;
  const strippedContent = content.replace(/[*_~`]/g, "");
  const headingRegex = /^(#+)\s(.*)$/gm;
  const contentWithoutHeadings = strippedContent.replace(headingRegex, (match2, p1, p2) => {
    if (p2 === filenameWithoutExtension) {
      return "";
    }
    return match2;
  });
  const metadataRegex = /^---[\s\S]*?---/gm;
  const contentWithoutMetadata = contentWithoutHeadings.replace(metadataRegex, "");
  const tagRegex = /#[^\s]+/g;
  const contentWithoutTags = contentWithoutMetadata.replace(tagRegex, "");
  const linkRegex = /\[.*?\]\(.*?\)|\[\[.*?\]\]/g;
  const contentWithoutLinks = contentWithoutTags.replace(linkRegex, "");
  const filteredContent = contentWithoutLinks.split("\n").filter((line) => line.trim() !== "").filter((line) => line.trim() !== "---").join("\n");
  const charCount = filteredContent.length;
  let highlightedCount = 0;
  let boldCount = 0;
  var layer2exclude = "=";
  var layer3exclude = "\\*";
  if (layer3 == "**") {
    layer3 = "\\*\\*";
    layer3exclude = "\\*";
    layer2exclude = "=";
  }
  if (layer2 == "**") {
    layer2 = "\\*\\*";
    layer3exclude = "=";
    layer2exclude = "\\*";
  }
  const highlightRegex = new RegExp(`${layer2}[^${layer2exclude}]+${layer2}`, "g");
  const boldRegex = new RegExp(`${layer3}[^${layer3exclude}]+${layer3}`, "g");
  const highlightedMatches = content.match(highlightRegex);
  if (highlightedMatches) {
    highlightedCount = highlightedMatches.join("").length - highlightedMatches.length * 4;
    const layer2String = highlightedMatches.join("");
    const boldMatches = layer2String.match(boldRegex);
    if (boldMatches) {
      boldCount = boldMatches.join("").length - boldMatches.length * 4;
    }
  }
  return { charCount, highlightedCount, boldCount };
}
function rateLevelOfMaturity(noteLength, lengthOfTitle, Inlinks, outgoingLinks, progressiveSumMajurity) {
  var lengthMajurity = 0;
  if (noteLength >= progressiveSumMajurity) {
    lengthMajurity = noteLength;
  } else {
    lengthMajurity = progressiveSumMajurity;
  }
  const totalWeight = lengthMajurity + lengthOfTitle + Inlinks + outgoingLinks;
  const averageWeight = totalWeight / 5;
  if (averageWeight < 0.5) {
    return 0;
  } else if (averageWeight <= 1) {
    return 1;
  } else if (averageWeight <= 2) {
    return 2;
  } else if (averageWeight <= 3) {
    return 3;
  } else if (averageWeight <= 3.5) {
    return 4;
  } else if (averageWeight <= 4) {
    return 5;
  } else {
    return 0;
  }
}
function rateOutlinks(outlinks) {
  if (outlinks < 2) {
    return 0;
  } else if (outlinks < 3) {
    return 1;
  } else if (outlinks < 5) {
    return 4;
  } else if (outlinks < 9) {
    return 5;
  } else if (outlinks < 11) {
    return 3;
  } else if (outlinks < 12) {
    return 1;
  } else {
    return 0;
  }
}
function rateInlinks(numInlinks) {
  if (numInlinks == 0) {
    return 0;
  } else if (numInlinks < 4) {
    return 1;
  } else if (numInlinks < 8) {
    return 2;
  } else if (numInlinks < 11) {
    return 3;
  } else if (numInlinks < 16) {
    return 4;
  } else if (numInlinks >= 16 && numInlinks < 500) {
    return 5;
  } else {
    return 0;
  }
}
function rateDirection(ratingCurrent, ratingNew) {
  let rating = "";
  if (parseInt(ratingCurrent, 10) > ratingNew) {
    rating = ratingNew + "\u2B07\uFE0F";
  } else if (parseInt(ratingCurrent, 10) < ratingNew) {
    rating = ratingNew + "\u2B06\uFE0F";
  } else if (parseInt(ratingCurrent, 10) == ratingNew) {
    rating = ratingNew + "\u27A1\uFE0F";
  } else {
    rating = ratingNew + "";
  }
  return rating;
}
function rateLengthFilename(filename) {
  if (filename.length < 30) {
    return 0;
  } else if (filename.length < 80) {
    return 1;
  } else if (filename.length < 100) {
    return 3;
  } else if (filename.length < 150) {
    return 5;
  } else if (filename.length < 190) {
    return 4;
  } else if (filename.length < 210) {
    return 2;
  } else if (filename.length < 250) {
    return 1;
  } else {
    return 0;
  }
}
function rateNoteLength(contenlength) {
  if (contenlength < 200) {
    return 0;
  } else if (contenlength < 550) {
    return 4;
  } else if (contenlength < 1e3) {
    return 5;
  } else if (contenlength < 1200) {
    return 4;
  } else if (contenlength < 2e3) {
    return 3;
  } else if (contenlength < 2500) {
    return 2;
  } else if (contenlength < 3e3) {
    return 1;
  } else {
    return 0;
  }
}
function getNumberOfOutlinks(activeFile) {
  var _a;
  if (!activeFile) {
    return 0;
  }
  const inlinks = (_a = app.metadataCache.getFileCache(activeFile)) == null ? void 0 : _a.links;
  return inlinks ? Object.keys(inlinks).length : 0;
}
function countCharactersInActiveFile(content, filename) {
  const filenameWithoutExtension = filename;
  const strippedContent = content.replace(/[*_~`]/g, "");
  const headingRegex = /^(#+)\s(.*)$/gm;
  const contentWithoutHeadings = strippedContent.replace(headingRegex, (match2, p1, p2) => {
    if (p2 === filenameWithoutExtension) {
      return "";
    }
    return match2;
  });
  const metadataRegex = /^---[\s\S]*?---/gm;
  const contentWithoutMetadata = contentWithoutHeadings.replace(metadataRegex, "");
  const tagRegex = /#[^\s]+/g;
  const contentWithoutTags = contentWithoutMetadata.replace(tagRegex, "");
  const linkRegex = /\[.*?\]\(.*?\)|\[\[.*?\]\]/g;
  const contentWithoutLinks = contentWithoutTags.replace(linkRegex, "");
  const filteredContent = contentWithoutLinks.split("\n").filter((line) => line.trim() !== "").filter((line) => line.trim() !== "---").join("\n");
  const charCount = filteredContent.length;
  return charCount;
}
function count_inlinks(file) {
  const { app: { metadataCache: { resolvedLinks } } } = this;
  const { path: path2 } = file;
  const sumInlinks = Object.values(resolvedLinks).map((val) => {
    var _a;
    return (_a = val[path2]) != null ? _a : 0;
  }).reduce((left, right) => left + right, 0);
  return sumInlinks;
}
var getFileCountMap = async (app2, excludeTag, excludeFolder) => {
  const { vault } = app2;
  let excludedSubstrings = [];
  if (excludeTag == void 0) {
    excludedSubstrings = [];
  } else {
    excludedSubstrings = excludeTag.split(", ");
  }
  let excludedFolders = [];
  if (excludeFolder == void 0) {
    excludedFolders = [];
  } else {
    excludedFolders = excludeFolder.split(", ");
  }
  excludedFolders.push(".obsidian", ".trash");
  const fileCountMap = /* @__PURE__ */ new Map();
  const files = await vault.getMarkdownFiles();
  for (const file of files) {
    const fileName = file.basename;
    const currentCount = fileCountMap.get(fileName) || 0;
    fileCountMap.set(fileName, currentCount + 1);
    const fileContents = await app2.vault.read(file);
    if (!excludedSubstrings.some((substring) => fileContents.includes(substring)) && !excludedFolders.some((folder) => file.path.includes(folder))) {
      const fileName2 = file.basename;
      const currentCount2 = fileCountMap.get(fileName2) || 0;
      fileCountMap.set(fileName2, currentCount2 + 1);
    }
  }
  return fileCountMap;
};
var getFileMap = async (app2, excludeTag, excludeFolder) => {
  const { vault } = app2;
  let excludedSubstrings = [];
  if (excludeTag == void 0) {
    excludedSubstrings = [];
  } else {
    excludedSubstrings = excludeTag.split(", ");
  }
  let excludedFolders = [];
  if (excludeFolder == void 0) {
    excludedFolders = [];
  } else {
    excludedFolders = excludeFolder.split(", ");
  }
  excludedFolders.push(".obsidian", ".trash");
  let fileArray = [];
  const files = await vault.getMarkdownFiles();
  for (const file of files) {
    const fileContents = await app2.vault.read(file);
    if ((!excludedSubstrings.some((substring) => fileContents.includes(substring)) || excludeTag.length === 0) && !excludedFolders.some((folder) => file.path.includes(folder))) {
      fileArray.push(file);
    }
  }
  return fileArray;
};

// src/creatmodchartcalculation.ts
function findEarliestModifiedFile(files) {
  let earliestModifiedFile = files[0];
  for (const file of files) {
    if (file.stat.mtime < earliestModifiedFile.stat.mtime) {
      earliestModifiedFile = file;
    }
  }
  return earliestModifiedFile;
}
function monthsBetween(startMonth, endMonth) {
  let months = endMonth.getMonth() - startMonth.getMonth() + 1;
  if (endMonth.getFullYear() > startMonth.getFullYear()) {
    months += (endMonth.getFullYear() - startMonth.getFullYear()) * 12;
  }
  return months;
}
function getModificationDates(files) {
  const creationDates = [];
  for (const file of files) {
    creationDates.push(new Date(file.stat.mtime));
  }
  return creationDates;
}
function createChartFormat(y_axis, countsStringMod, chartReduzierungMonate) {
  let monatsbegrenzung = null;
  if (chartReduzierungMonate == 0) {
    monatsbegrenzung = 0;
  } else {
    monatsbegrenzung = countsStringMod.split(",").length - chartReduzierungMonate;
  }
  return "```chart\ntype: bar\nlabels: [" + y_axis + "]\nseries:\n  - title: modified\n    data: [" + countsStringMod + ']\ntension: 0.2\nwidth: 80 %\nlabelColors: false\nfill: false\nbeginAtZero: false\nbestFit: false\nbestFitTitle: undefined\nbestFitNumber: 0\nstacked: true\nyTitle: "Number of Notes"\nxTitle: "Months"\nxMin: ' + monatsbegrenzung + "\n```";
}
async function replaceChartContent(avatarPageName, newContent) {
  const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
  if (existingFile == null) {
    console.log(`File ${avatarPageName}.md does not exist`);
    return;
  }
  const file = existingFile;
  const content = await app.vault.read(file);
  let reference = null;
  let end = null;
  let start = null;
  const lines = content.split("\n");
  for (let i2 = 0; i2 < lines.length; i2++) {
    const line = lines[i2].trim();
    if (line === "^ChartMonth") {
      if (reference === null) {
        reference = i2;
      }
    }
  }
  if (reference != null) {
    end = reference;
    start = reference - 19;
    const newLines = [...lines.slice(0, start), newContent, ...lines.slice(end)];
    await app.vault.modify(file, newLines.join("\n"));
  }
}

// src/badges.ts
function checkIfReceiveABadge(levelOld, levelNew) {
  const badgeLevels = [5, 10, 20, 27, 35, 42, 50, 60, 75, 82, 90, 100];
  let receiveBadge = false;
  for (let i2 = 0; i2 < badgeLevels.length; i2++) {
    if (levelOld < badgeLevels[i2] && levelNew >= badgeLevels[i2]) {
      receiveBadge = true;
    }
  }
  return receiveBadge;
}
function getBadgeForLevel(level, inform) {
  const badgeLevels = [5, 10, 20, 27, 35, 42, 50, 60, 75, 82, 90, 100];
  const badgeNames = [
    { name: "Enlightened Novice", description: "Huzzah! You've embarked on the path of knowledge and earned the title of 'Enlightened Novice.' The journey has just begun, and you're already radiating wisdom like a baby sun!", level: "level 5" },
    { name: "Curious Connoisseur", description: "Fantastic! You've embraced the wonders of learning and become a 'Curious Connoisseur.' Your appetite for knowledge is insatiable, like a bottomless bowl of ice cream!", level: "level 10" },
    { name: "Brainiac Trailblazer", description: "Bravo! As a 'Brainiac Trailblazer,' you've carved your way through a jungle of information and emerged victorious. Your intellect is a beacon shining brightly for others to follow!", level: "level 20" },
    { name: "Scholarly Trailblazer", description: "Impressive! You're now a 'Scholarly Trailblazer,' boldly venturing through a sea of knowledge with a compass of curiosity and a map of intellect!", level: "level 27" },
    { name: "Info Ninja Master", description: "Incredible! You've reached the pinnacle of stealthy knowledge management. As an 'Info Ninja Master,' you can snatch information from the shadows like a digital ninja!", level: "level 35" },
    { name: "Wise Owl Guru", description: "Whoo-hoo! You've achieved 'Wise Owl Guru' status. Your wisdom is legendary, and your hoots of knowledge echo through the forest of ignorance!", level: "level 42" },
    { name: "Einstein Incarnate", description: "Eureka! You've become an 'Einstein Incarnate,' pushing the boundaries of understanding and bending the fabric of knowledge to your will!", level: "level 50" },
    { name: "Mastermind Sage", description: "Magnificent! You've ascended to the rank of 'Mastermind Sage,' guiding the rivers of information and enlightening all who seek wisdom!", level: "level 60" },
    { name: "Cerebral Maestro", description: "Bravissimo! You're now a 'Cerebral Maestro,' conducting the symphony of knowledge with the finesse of a virtuoso conductor!", level: "level 75" },
    { name: "Zen Knowledge Keeper", description: "Serenity achieved! As a 'Zen Knowledge Keeper,' you maintain a tranquil mind while managing vast pools of knowledge with grace and poise.", level: "level 82" },
    { name: "Grand Archivist Overlord", description: "All hail the 'Grand Archivist Overlord!' You wield the knowledge of ages and hold the keys to unlock the gates of wisdom!", level: "level 90" },
    { name: "Omniscient Sage of Everything", description: "Congratulations, oh wise one! You've attained the highest level of enlightenment as the 'Omniscient Sage of Everything.' Your understanding knows no bounds, and your wisdom is as vast as the cosmos itself!", level: "level 100" }
  ];
  let index = 0;
  for (let i2 = 0; i2 < badgeLevels.length; i2++) {
    if (level >= badgeLevels[i2]) {
      index = i2;
    } else {
      break;
    }
  }
  return badgeNames[index];
}
function getBadgeForInitLevel(level) {
  const badgeLevels = [0, 3, 7, 15, 23, 30, 35, 42, 50, 60, 75, 82, 90, 100];
  const badgeNamesInit = [
    { name: "Lore Seeker Initiate", description: "Welcome to the journey of knowledge! As a 'Lore Seeker Initiate,' you've taken your first steps into the world of organized wisdom. Your quest has just begun, and with each note you make, you lay the foundation for a future rich with insights and understanding. Your journey starts here, and the path ahead is filled with potential and discovery.", level: "level 1" },
    { name: "Lore Apprentice", description: "You've hit the ground running with your existing knowledge treasures! You're already an 'Lore Apprentice,' armed with a wealth of wisdom and ready to shape it further.", level: "level 3" },
    { name: "Savvy Scholar", description: "Your existing notes have given you a head start! You're now a 'Savvy Scholar,' confidently diving into the sea of information with a treasure trove of insights.", level: "level 7" },
    { name: "Sage's Foundation", description: "Building upon your pre-existing notes, you're establishing the 'Sage's Foundation' for an even grander edifice of knowledge. Your groundwork is impressive!", level: "level 15" },
    { name: "Wisdom Seedling", description: "Your existing notes have nurtured the growth of a 'Wisdom Seedling.' You're cultivating your garden of knowledge with care and patience.", level: "level 23" },
    { name: "Prodigious Preparer", description: "Thanks to your prior efforts, you're a 'Prodigious Preparer,' standing tall among your notes and ready to conquer new realms of understanding.", level: "level 30" },
    { name: "Epic Epiphany Explorer", description: "Your past notes have led you to the grand 'Epic Epiphany Explorer' status! You've already been down a few rabbit holes and come out with dazzling discoveries.", level: "level 35" },
    { name: "Lore Luminary", description: "With your existing notes illuminating your path, you've become a 'Lore Luminary,' shining light on the mysteries of the universe, one idea at a time.", level: "level 42" },
    { name: "Scribe of the Ancients", description: "Your mastery of personal knowledge management has elevated you to the esteemed rank of the 'Scribe of the Ancients.' Your existing notes have transformed into treasures, bridging the gap between old wisdom and new discoveries.", level: "level 50" },
    { name: "Eureka Maestro", description: "Armed with your existing notes, you're the 'Eureka Maestro,' composing a symphony of insights that harmonize with the melody of discovery.", level: "level 60" },
    { name: "Chronicles Champion", description: "With your existing notes standing as a testament, you've ascended to the illustrious 'Chronicles Champion' level. Your journey through time's tapestry has brought forth a symphony of insights that harmonize past and present.", level: "level 75" },
    { name: "The Curious Cartographer", description: "As 'The Curious Cartographer,' your existing notes have mapped out uncharted territories of understanding. Your curiosity knows no bounds, and your notes are the compass guiding your exploration.", level: "level 82" },
    { name: "Sultan of Synthesis", description: "Your existing notes have made you the 'Sultan of Synthesis.' You're the master weaver, threading together threads of information into a rich tapestry of insight.", level: "level 90" },
    { name: "Eternal Archivist", description: "At the pinnacle of personal knowledge mastery, you're now revered as the 'Eternal Archivist.' Your existing notes, carefully curated and nurtured, stand as immortal beacons, guiding seekers through the labyrinth of knowledge across ages.", level: "level 100" }
  ];
  let index = 0;
  for (let i2 = 0; i2 < badgeLevels.length; i2++) {
    if (level >= badgeLevels[i2]) {
      index = i2;
    } else {
      break;
    }
  }
  return badgeNamesInit[index];
}

// src/levels.ts
var levelData = [
  { points: 0, level: 0, pointsNext: 0 },
  { points: 0, level: 1, pointsNext: 1e3 },
  { points: 1e3, level: 2, pointsNext: 3e3 },
  { points: 3e3, level: 3, pointsNext: 7500 },
  { points: 7500, level: 4, pointsNext: 15e3 },
  { points: 15e3, level: 5, pointsNext: 3e4 },
  { points: 3e4, level: 6, pointsNext: 5e4 },
  { points: 5e4, level: 7, pointsNext: 8e4 },
  { points: 8e4, level: 8, pointsNext: 12e4 },
  { points: 12e4, level: 9, pointsNext: 17e4 },
  { points: 17e4, level: 10, pointsNext: 23e4 },
  { points: 23e4, level: 11, pointsNext: 3e5 },
  { points: 3e5, level: 12, pointsNext: 38e4 },
  { points: 38e4, level: 13, pointsNext: 47e4 },
  { points: 47e4, level: 14, pointsNext: 6e5 },
  { points: 6e5, level: 15, pointsNext: 75e4 },
  { points: 75e4, level: 16, pointsNext: 92e4 },
  { points: 92e4, level: 17, pointsNext: 111e4 },
  { points: 111e4, level: 18, pointsNext: 132e4 },
  { points: 132e4, level: 19, pointsNext: 155e4 },
  { points: 155e4, level: 20, pointsNext: 18e5 },
  { points: 18e5, level: 21, pointsNext: 207e4 },
  { points: 207e4, level: 22, pointsNext: 236e4 },
  { points: 236e4, level: 23, pointsNext: 267e4 },
  { points: 267e4, level: 24, pointsNext: 3e6 },
  { points: 3e6, level: 25, pointsNext: 335e4 },
  { points: 335e4, level: 26, pointsNext: 372e4 },
  { points: 372e4, level: 27, pointsNext: 411e4 },
  { points: 411e4, level: 28, pointsNext: 452e4 },
  { points: 452e4, level: 29, pointsNext: 495e4 },
  { points: 495e4, level: 30, pointsNext: 54e5 },
  { points: 54e5, level: 31, pointsNext: 587e4 },
  { points: 587e4, level: 32, pointsNext: 636e4 },
  { points: 636e4, level: 33, pointsNext: 687e4 },
  { points: 687e4, level: 34, pointsNext: 74e5 },
  { points: 74e5, level: 35, pointsNext: 795e4 },
  { points: 795e4, level: 36, pointsNext: 852e4 },
  { points: 852e4, level: 37, pointsNext: 911e4 },
  { points: 911e4, level: 38, pointsNext: 972e4 },
  { points: 972e4, level: 39, pointsNext: 1035e4 },
  { points: 1035e4, level: 40, pointsNext: 11e6 },
  { points: 11e6, level: 41, pointsNext: 1167e4 },
  { points: 1167e4, level: 42, pointsNext: 1236e4 },
  { points: 1236e4, level: 43, pointsNext: 1307e4 },
  { points: 1307e4, level: 44, pointsNext: 138e5 },
  { points: 138e5, level: 45, pointsNext: 1455e4 },
  { points: 1455e4, level: 46, pointsNext: 1532e4 },
  { points: 1532e4, level: 47, pointsNext: 1611e4 },
  { points: 1611e4, level: 48, pointsNext: 1692e4 },
  { points: 1692e4, level: 49, pointsNext: 1775e4 },
  { points: 1775e4, level: 50, pointsNext: 186e5 },
  { points: 186e5, level: 51, pointsNext: 1947e4 },
  { points: 1947e4, level: 52, pointsNext: 2036e4 },
  { points: 2036e4, level: 53, pointsNext: 2127e4 },
  { points: 2127e4, level: 54, pointsNext: 222e5 },
  { points: 222e5, level: 55, pointsNext: 2315e4 },
  { points: 2315e4, level: 56, pointsNext: 2412e4 },
  { points: 2412e4, level: 57, pointsNext: 2511e4 },
  { points: 2511e4, level: 58, pointsNext: 2612e4 },
  { points: 2612e4, level: 59, pointsNext: 2715e4 },
  { points: 2715e4, level: 60, pointsNext: 282e5 },
  { points: 282e5, level: 61, pointsNext: 2927e4 },
  { points: 2927e4, level: 62, pointsNext: 3036e4 },
  { points: 3036e4, level: 63, pointsNext: 3147e4 },
  { points: 3147e4, level: 64, pointsNext: 326e5 },
  { points: 326e5, level: 65, pointsNext: 3375e4 },
  { points: 3375e4, level: 66, pointsNext: 3492e4 },
  { points: 3492e4, level: 67, pointsNext: 3611e4 },
  { points: 3611e4, level: 68, pointsNext: 3732e4 },
  { points: 3732e4, level: 69, pointsNext: 3855e4 },
  { points: 3855e4, level: 70, pointsNext: 398e5 },
  { points: 398e5, level: 71, pointsNext: 4107e4 },
  { points: 4107e4, level: 72, pointsNext: 4236e4 },
  { points: 4236e4, level: 73, pointsNext: 4367e4 },
  { points: 4367e4, level: 74, pointsNext: 45e6 },
  { points: 45e6, level: 75, pointsNext: 4635e4 },
  { points: 4635e4, level: 76, pointsNext: 4772e4 },
  { points: 4772e4, level: 77, pointsNext: 4911e4 },
  { points: 4911e4, level: 78, pointsNext: 5052e4 },
  { points: 5052e4, level: 79, pointsNext: 5195e4 },
  { points: 5195e4, level: 80, pointsNext: 534e5 },
  { points: 534e5, level: 81, pointsNext: 5487e4 },
  { points: 5487e4, level: 82, pointsNext: 5636e4 },
  { points: 5636e4, level: 83, pointsNext: 5787e4 },
  { points: 5787e4, level: 84, pointsNext: 594e5 },
  { points: 594e5, level: 85, pointsNext: 6095e4 },
  { points: 6095e4, level: 86, pointsNext: 6252e4 },
  { points: 6252e4, level: 87, pointsNext: 6411e4 },
  { points: 6411e4, level: 88, pointsNext: 6572e4 },
  { points: 6572e4, level: 89, pointsNext: 6735e4 },
  { points: 6735e4, level: 90, pointsNext: 69e6 },
  { points: 69e6, level: 91, pointsNext: 7067e4 },
  { points: 7067e4, level: 92, pointsNext: 7236e4 },
  { points: 7236e4, level: 93, pointsNext: 7407e4 },
  { points: 7407e4, level: 94, pointsNext: 758e5 },
  { points: 758e5, level: 95, pointsNext: 7755e4 },
  { points: 7755e4, level: 96, pointsNext: 7932e4 },
  { points: 7932e4, level: 97, pointsNext: 8111e4 },
  { points: 8111e4, level: 98, pointsNext: 8292e4 },
  { points: 8292e4, level: 99, pointsNext: 8475e4 },
  { points: 8475e4, level: 100, pointsNext: 866e5 },
  { points: 866e5, level: 101, pointsNext: 8847e4 },
  { points: 8847e4, level: 102, pointsNext: 9036e4 },
  { points: 9036e4, level: 103, pointsNext: 9227e4 },
  { points: 9227e4, level: 104, pointsNext: 942e5 },
  { points: 942e5, level: 105, pointsNext: 9615e4 },
  { points: 9615e4, level: 106, pointsNext: 9812e4 },
  { points: 9812e4, level: 107, pointsNext: 10011e4 },
  { points: 10011e4, level: 108, pointsNext: 10212e4 },
  { points: 10212e4, level: 109, pointsNext: 10212e4 },
  { points: 10415e4, level: 110, pointsNext: 10615e4 }
];
function getLevelForPoints(points) {
  let level = levelData[0];
  for (const data of levelData) {
    if (points >= data.points) {
      level = data;
    } else {
      break;
    }
  }
  return level;
}
function statusPointsForLevel(targetLevel) {
  let statusPoints = 0;
  for (const data of levelData) {
    if (targetLevel == data.level && statusPoints == 0) {
      statusPoints = data.points;
    }
  }
  return statusPoints;
}

// src/randomNotificationText.ts
var messagesWeeklyChallenge = [
  "Seven days of note-taking? You're practically a note ninja turtle now! \u{1F422}\u{1F4DD} [X] points, cowabunga!",
  "You've just completed a week-long note-taking marathon! \u{1F3C3}\u200D\u2642\uFE0F\u{1F4DD} [X] points earned. Ready for the next lap?",
  "A whole week of notes? You're on fire! \u{1F525}\u{1F4DD} [X] points, keep the spark alive!",
  "Seven notes in seven days - that's like a note symphony! \u{1F3B6}\u{1F4DD} [X] points, maestro!",
  "You're on a seven-day note-taking fiesta! \u{1F389}\u{1F4DD} [X] points, keep the party going!",
  "Seven days, seven notes - You're like the James Bond of note-taking! \u{1F576}\uFE0F\u{1F4DD} [X] points, secret agent!",
  "You're officially a 'Note-A-Day' superhero! \u{1F9B8}\u200D\u2642\uFE0F\u{1F4DD} [X] points, capes optional!",
  "A whole week of notes? You've practically written a mini novel by now! \u{1F4DA}\u{1F4DD} [X] points, author status achieved!",
  "Seven days straight? You're the Usain Bolt of note-taking! \u{1F3C3}\u200D\u2642\uFE0F\u{1F4DD} [X] points, sprinting towards knowledge!",
  "You're on a seven-day note-taking spree! It's like a notes-plosion! \u{1F4A5}\u{1F4DD} [X] points, keep the fireworks coming!",
  "Seven days, seven notes - you're basically the Michael Jordan of note-taking! \u{1F3C0}\u{1F4DD} [X] points, slam dunk!",
  "A whole week of notes? You're the note-taking MVP! \u{1F3C6}\u{1F4DD} [X] points, keep scoring!",
  "You've just unlocked the 'Seven Day Note Fever' achievement! \u{1F31F}\u{1F4DD} [X] points, catch the fever!",
  "Seven days, seven notes - you're a note-taking rockstar! \u{1F3B8}\u{1F4DD} [X] points, keep jammin'!",
  "You're on a seven-day note-taking magic show! Now you see the notes, now you don't! \u{1F3A9}\u2728 [X] points, keep the magic alive!",
  "A whole week of notes? You're like a note-taking Jedi Master! \u{1F30C}\u2694\uFE0F [X] points, may the notes be with you!",
  "Seven days straight? You're the Tony Hawk of note-taking! \u{1F6F9}\u{1F4DD} [X] points, keep shredding!",
  "You're on a seven-day note-taking rollercoaster! Up and down, but always moving forward! \u{1F3A2}\u{1F4DD} [X] points, enjoy the ride!",
  "Seven days, seven notes - you're a note-taking DJ spinning knowledge beats! \u{1F3A7}\u{1F4DD} [X] points, drop the knowledge!",
  "You've just conquered the seven-day note-taking challenge! You're the note-taking Indiana Jones! \u{1F3F9}\u{1F4DD} [X] points, keep exploring!",
  "A whole week of notes? You're the note-taking Sherlock Holmes, solving knowledge mysteries! \u{1F50D}\u{1F4DD} [X] points, keep sleuthing!",
  "Seven days, seven notes - you're a note-taking Picasso, creating a masterpiece of knowledge! \u{1F3A8}\u{1F4DD} [X] points, keep painting!",
  "You're on a seven-day note-taking rocket ship! Destination: Infinite Knowledge! \u{1F680}\u{1F4DD} [X] points, enjoy the journey!",
  "Seven days straight? You're the note-taking MacGyver, turning information into solutions! \u{1F527}\u{1F4DD} [X] points, keep crafting!",
  "You're on a seven-day note-taking safari, exploring the wilds of knowledge! \u{1F418}\u{1F4DD} [X] points, keep exploring!",
  "Seven days, seven notes - you're a note-taking chef, cooking up a knowledge feast! \u{1F373}\u{1F4DD} [X] points, keep cooking!",
  "You've just unlocked the seven-day note-taking badge! You're the note-taking superhero we need! \u{1F9B8}\u200D\u2640\uFE0F\u{1F4DD} [X] points, keep saving the day!",
  "A whole week of notes? You're the note-taking Lewis and Clark, charting new territories of knowledge! \u{1F5FA}\uFE0F\u{1F4DD} [X] points, keep exploring!",
  "Seven days, seven notes - you're a note-taking DJ, dropping beats of wisdom! \u{1F3A7}\u{1F4DD} [X] points, keep spinning!",
  "You're on a seven-day note-taking treasure hunt, discovering gems of wisdom! \u{1F48E}\u{1F4DD} [X] points, keep hunting!",
  "Seven days straight? You're the note-taking ninja warrior, conquering the knowledge obstacle course! \u{1F94B}\u{1F4DD} [X] points, keep slaying!",
  "You're on a seven-day note-taking rocket ship! Destination: Infinite Knowledge! \u{1F680}\u{1F4DD} [X] points, enjoy the journey!",
  "Seven days, seven notes - you're a note-taking detective, solving cases of curiosity! \u{1F575}\uFE0F\u200D\u2642\uFE0F\u{1F4DD} [X] points, keep detecting!",
  "You've just unlocked the seven-day note-taking badge! You're the note-taking superhero we need! \u{1F9B8}\u200D\u2642\uFE0F\u{1F4DD} [X] points, keep saving the day!",
  "A whole week of notes? You're the note-taking pioneer, blazing trails through the forests of information! \u{1F332}\u{1F4DD} [X] points, keep pioneering!",
  "Seven days, seven notes - you're a note-taking DJ, dropping beats of wisdom! \u{1F3A7}\u{1F4DD} [X] points, keep spinning!",
  "You're on a seven-day note-taking treasure hunt, discovering gems of wisdom! \u{1F48E}\u{1F4DD} [X] points, keep hunting!",
  "Seven days straight? You're the note-taking ninja warrior, conquering the knowledge obstacle course! \u{1F94B}\u{1F4DD} [X] points, keep slaying!",
  "You're on a seven-day note-taking rollercoaster! Up and down, but always moving forward! \u{1F3A2}\u{1F4DD} [X] points, enjoy the ride!",
  "Seven days, seven notes - you're a note-taking DJ spinning knowledge beats! \u{1F3A7}\u{1F4DD} [X] points, drop the knowledge!",
  "You've just conquered the seven-day note-taking challenge! You're the note-taking Indiana Jones! \u{1F3F9}\u{1F4DD} [X] points, keep exploring!",
  "A whole week of notes? You're the note-taking Sherlock Holmes, solving knowledge mysteries! \u{1F50D}\u{1F4DD} [X] points, keep sleuthing!",
  "Seven days, seven notes - you're a note-taking Picasso, creating a masterpiece of knowledge! \u{1F3A8}\u{1F4DD} [X] points, keep painting!",
  "You're on a seven-day note-taking safari, exploring the wilds of knowledge! \u{1F418}\u{1F4DD} [X] points, keep exploring!",
  "Seven days straight? You're the Tony Hawk of note-taking! \u{1F6F9}\u{1F4DD} [X] points, keep shredding!",
  "You're on a seven-day note-taking rocket ship! Destination: Infinite Knowledge! \u{1F680}\u{1F4DD} [X] points, enjoy the journey!",
  "Seven days, seven notes - you're a note-taking ninja turtle now! \u{1F422}\u{1F4DD} [X] points, cowabunga!",
  "You've just completed a week-long note-taking marathon! \u{1F3C3}\u200D\u2642\uFE0F\u{1F4DD} [X] points earned. Ready for the next lap?",
  "A whole week of notes? You're on fire! \u{1F525}\u{1F4DD} [X] points, keep the spark alive!",
  "Seven notes in seven days - that's like a note symphony! \u{1F3B6}\u{1F4DD} [X] points, maestro!"
];
var twoNoteMessages = [
  "Boom! You just aced the 2-note tango! \u{1F389} [X] points in the pocket. Keep groovin'!",
  "Two notes in a day? You're officially a Note Ninja! \u{1F94B} [X] points earned. Rock on!",
  "High-five! You've conquered the 2-note rodeo! \u{1F920} [X] points earned. Yeehaw!",
  "Double trouble! Two notes in one day, you legend! \u{1F31F} [X] points, rockstar!",
  "You're on fire! Two notes in a day - what's your secret weapon? \u{1F525} [X] points!",
  "Bingo! Two notes in a day! You're on a roll! \u{1F680} [X] points earned. Keep it up!",
  "Kaboom! You just blew the 2-note challenge out of the water! \u{1F4A5} [X] points!",
  "You're officially a 2-note superstar! \u{1F31F} [X] points in the bag. Keep shining!",
  "Double up, double down! Two notes in one day - you're a rockstar! \u{1F3B8} [X] points!",
  "You've just joined the 2-note party! \u{1F973} [X] points earned. Let's keep dancing!",
  "Ka-ching! Two notes in a day! You're racking up those points! \u{1F4B0} [X] earned!",
  "You're a 2-note magician! \u{1F3A9}\u2728 [X] points earned. What's your next trick?",
  "Two notes? Nailed it! You're on a roll! \u{1F31F} [X] points earned. Keep it going!",
  "Abra-cadabra! Two notes appear! \u{1F3A9}\u2728 [X] points earned. Keep the magic alive!",
  "Double trouble, double the fun! Two notes in one day! \u{1F389} [X] points, superstar!",
  "You've just unlocked the 2-note achievement! \u{1F31F} [X] points earned. Keep soaring!",
  "Woo-hoo! Two notes in a day! You're on fire! \u{1F525} [X] points, keep it up!",
  "You're a 2-note wizard! \u2728\u{1F52E} [X] points earned. What's your next spell?",
  "Double the notes, double the awesomeness! \u{1F31F} [X] points, rockstar!",
  "You've just kicked the 2-note challenge out of the park! \u26BE [X] points!",
  "Boom! You just conquered the 2-note challenge! \u{1F389} [X] points, superstar!",
  "Double the notes, double the celebration! \u{1F973} [X] points earned. Party on!",
  "You're a 2-note maestro! \u{1F3B5} [X] points in the pocket. Keep the music playing!",
  "Kaboom! Two notes in a day! You're on a roll! \u{1F680} [X] points earned. Keep it up!",
  "You've just joined the 2-note fiesta! \u{1F973} [X] points earned. Let's keep dancing!",
  "Zap! You've just electrified the 2-note challenge! \u26A1 [X] points, rockstar!",
  "Double notes, double the sparkle! \u{1F31F} [X] points earned. Keep shining bright!",
  "You're a 2-note dynamo! \u{1F4A5} [X] points earned. What's your next explosion?",
  "Kaboom! Two notes in a day! You're on fire! \u{1F525} [X] points, keep it up!",
  "You've just unlocked the 2-note achievement! \u{1F31F} [X] points earned. Keep soaring!",
  "Woo-hoo! Two notes in a day! You're on a roll! \u{1F389} [X] points, keep it up!",
  "You're a 2-note wizard! \u2728\u{1F52E} [X] points earned. What's your next spell?",
  "Double the notes, double the awesomeness! \u{1F31F} [X] points, rockstar!",
  "You've just kicked the 2-note challenge out of the park! \u26BE [X] points!",
  "Boom! You just conquered the 2-note challenge! \u{1F389} [X] points, superstar!",
  "Double the notes, double the celebration! \u{1F973} [X] points earned. Party on!",
  "You're a 2-note maestro! \u{1F3B5} [X] points in the pocket. Keep the music playing!",
  "Zap! You've just electrified the 2-note challenge! \u26A1 [X] points, rockstar!",
  "Double notes, double the sparkle! \u{1F31F} [X] points earned. Keep shining bright!",
  "You're a 2-note dynamo! \u{1F4A5} [X] points earned. What's your next explosion?",
  "Kapow! Two notes in a day - you're a superhero! \u{1F9B8}\u200D\u2642\uFE0F [X] points!",
  "You're a 2-note legend! \u{1F31F} [X] points earned. What's your next adventure?",
  "Bingo! Two notes in a day! You're on a roll! \u{1F680} [X] points, keep it up!",
  "You're a 2-note wizard! \u2728\u{1F52E} [X] points earned. What's your next spell?",
  "Double the notes, double the awesomeness! \u{1F31F} [X] points, rockstar!",
  "You've just kicked the 2-note challenge out of the park! \u26BE [X] points!",
  "Boom! You just conquered the 2-note challenge! \u{1F389} [X] points, superstar!",
  "Double the notes, double the celebration! \u{1F973} [X] points earned. Party on!",
  "You're a 2-note maestro! \u{1F3B5} [X] points in the pocket. Keep the music playing!",
  "Zap! You've just electrified the 2-note challenge! \u26A1 [X] points, rockstar!",
  "Double notes, double the sparkle! \u{1F31F} [X] points earned. Keep shining bright!",
  "You're a 2-note dynamo! \u{1F4A5} [X] points earned. What's your next explosion?"
];
var randomPointNotices = [
  "Bazinga! You just snagged [X] points!",
  "Kaboom! [X] points are now in your pocket!",
  "Woohoo! [X] points earned! Keep it up!",
  "Points ahoy! [X] more in the bank!",
  "Score! [X] points added to your total!",
  "You're on fire! [X] points in the bag!",
  "Zippity-zap! [X] points for you!",
  "Champion move! [X] points are yours!",
  "Bingo! [X] points just for you!",
  "Shazam! [X] points to the rescue!",
  "Ka-ching! [X] points earned!",
  "Superb! [X] more points for you!",
  "Bravo! [X] points added to your stash!",
  "Well done! [X] more points in tow!",
  "Zap! [X] points, just like that!",
  "A round of applause for [X] points!",
  "Whoosh! [X] points are yours!",
  "Zing! [X] points for your efforts!",
  "Woo! [X] points, way to go!",
  "Zesty! [X] points in your tally!",
  "Great job! [X] more points for you!",
  "Fantastic! [X] points in the bag!",
  "Zowie! [X] points just for you!",
  "Hooray! [X] points in your account!",
  "Nice one! [X] points in the pocket!",
  "Woot woot! [X] points, nice work!",
  "Zigzag! [X] points, keep it up!",
  "Bam! [X] points, well done!",
  "Cool beans! [X] points for you!",
  "Zesty! [X] points, keep it up!",
  "Splendid! [X] points for your efforts!",
  "Marvelous! [X] points earned!",
  "Zany! [X] points, well done!",
  "Exquisite! [X] points in your stash!",
  "Outstanding! [X] points for you!",
  "Zesty! [X] points, nice job!",
  "Magnificent! [X] points earned!",
  "Zigzag! [X] points in your tally!",
  "Terrific! [X] points for you!",
  "Superb! [X] points, well done!",
  "Zowie! [X] points for your efforts!",
  "Excellent! [X] points earned!",
  "Zap! [X] points in your account!",
  "Awesome! [X] points, way to go!",
  "Well played! [X] points for you!",
  "Zesty! [X] points, nice work!",
  "Impressive! [X] points, keep it up!",
  "Brilliant! [X] points, well done!",
  "Zing! [X] points for your efforts!",
  "Nice move! [X] points earned!",
  "Zesty! [X] points in the bag!",
  "Stellar! [X] points just for you!",
  "Well deserved! [X] points earned!"
];
function getRandomMessageWeeklyChallenge(points) {
  const randomIndex = Math.floor(Math.random() * messagesWeeklyChallenge.length);
  const message = messagesWeeklyChallenge[randomIndex];
  return message.replace("[X]", points.toString());
}
function getRandomMessageTwoNoteChallenge(points) {
  const randomIndex = Math.floor(Math.random() * twoNoteMessages.length);
  const message = twoNoteMessages[randomIndex];
  return message.replace("[X]", points.toString());
}
function getRandomMessagePoints(points) {
  const randomIndex = Math.floor(Math.random() * randomPointNotices.length);
  const message = randomPointNotices[randomIndex];
  return message.replace("[X]", points.toString());
}

// src/main.ts
var style = document.createElement("style");
style.textContent = `
  .modal-checkbox-container {
    margin-bottom: 10px;
    display: flex;
    align-items: center;
  }

  .modal-checkbox-container input[type="checkbox"] {
    margin-right: 5px;
  }
`;
document.head.append(style);
var gamification = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.statusBarItem = this.addStatusBarItem();
    this.statusbarGamification = this.statusBarItem.createEl("span", { text: "" });
  }
  getSetting(key) {
    return this.settings[key];
  }
  setSetting(key, value) {
    this.settings[key] = value;
    this.saveSettings();
  }
  async onload() {
    console.log("obsidian-pkm-gamification loaded!");
    await this.loadSettings();
    this.addSettingTab(new GamificationPluginSettings(this.app, this));
    setTimeout(async () => {
      await this.resetDailyGoals();
    }, 2e3);
    this.timerInterval = 30 * 60 * 1e3;
    this.timerId = window.setInterval(this.resetDailyGoals.bind(this), this.timerInterval);
    await this.updateStatusBar(this.statusbarGamification);
    if (this.settings.debug) {
      this.addRibbonIcon("accessibility", "change text formatting", async () => {
        new ModalBooster(this.app, ` `, this).open();
      });
    }
    this.addRibbonIcon("sprout", "Calculate Note Maturity", async () => {
      await this.calculateNoteMajurity();
    });
    if (this.settings.enableInitCommand) {
      this.addCommand({
        id: "init-rate-gamification",
        name: "Initialize gamification ratings",
        callback: async () => {
          await this.initializeGame(this.statusbarGamification);
        }
      });
    }
    if (this.settings.enableInitCommand) {
      this.addCommand({
        id: "create-avatar-page",
        name: "create profile page",
        callback: async () => {
          const { vault } = this.app;
          await createAvatarFile(this.app, this.settings.avatarPageName);
          const chartString = await this.createChart(vault);
          await replaceChartContent(this.settings.avatarPageName, chartString);
        }
      });
    }
    if (this.settings.enableInitCommand) {
      this.addCommand({
        id: "reset-game",
        name: "reset the game",
        callback: async () => {
          await this.resetGame();
        }
      });
    }
    this.addCommand({
      id: "update-chart-avatarpage",
      name: "update chart on profile page",
      callback: async () => {
        const { vault } = app;
        const chartString = await this.createChart(vault);
        await replaceChartContent(this.settings.avatarPageName, chartString);
      }
    });
    this.addCommand({
      id: "rate-note-maturity",
      name: "Rate note majurity",
      callback: async () => {
        await this.calculateNoteMajurity();
      }
    });
    this.addCommand({
      id: "change-progressive-formatting",
      name: "toggle progressive summarization formatting",
      callback: async () => {
        await replaceFormatStrings(this.settings.progressiveSumLayer2, this.settings.progressiveSumLayer3);
      }
    });
  }
  async resetGame() {
    await this.removeKeysFromFrontmatter();
    this.settings.statusLevel = 1;
    this.settings.statusPoints = 0;
    this.settings.xpForNextLevel = 1e3;
    this.settings.badgeBoosterState = false;
    this.settings.badgeBoosterFactor = 1;
    await this.saveData(this.settings);
    await this.giveStatusPoints(0);
    await this.updateStatusBar(this.statusbarGamification);
    new ModalInformationbox(this.app, `Game is now reseted. Please delete the Profile Page: "${this.settings.avatarPageName}.md" manually.`).open();
  }
  async initializeGame(statusbarGamification) {
    this.settings.gamificationStartDate = format(new Date(), "yyyy-MM-dd");
    await this.saveSettings();
    const { vault } = this.app;
    await createAvatarFile(this.app, this.settings.avatarPageName);
    const chartString = await this.createChart(vault);
    await replaceChartContent(this.settings.avatarPageName, chartString);
    await this.openAvatarFile();
    const fileCountMap = await getFileMap(this.app, this.settings.tagsExclude, this.settings.folderExclude);
    console.log(`fileCountMap loaded. Number of files: ${fileCountMap.length}`);
    let pointsReceived = 0;
    for (const fileName of fileCountMap) {
      const file = fileName;
      const fileContents = await app.vault.read(file);
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      if (activeView && activeView.file && activeView.file.path === file.path) {
        console.warn(`File ${file.path} is currently open. Skipping.`);
        continue;
      }
      const fileLength = countCharactersInActiveFile(fileContents, fileName.basename);
      const rateFileLength = rateNoteLength(fileLength);
      const {
        charCount,
        highlightedCount,
        boldCount
      } = countLayer2AndLayer3Characters(fileContents, fileName.basename, this.settings.progressiveSumLayer2, this.settings.progressiveSumLayer3);
      const rateProgressiveSum = rateProgressiveSummarization(charCount, highlightedCount, boldCount);
      const fileNameRate = rateLengthFilename(file.name);
      const inlinkNumber = count_inlinks(file);
      const inlinkClass = rateInlinks(inlinkNumber);
      const rateOut = rateOutlinks(getNumberOfOutlinks(file));
      const noteMajurity = rateLevelOfMaturity(rateFileLength, fileNameRate, inlinkClass, rateOut, rateProgressiveSum);
      console.log(`Processing file ${fileName.basename} in path ${fileName.path}`);
      try {
        await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
          if (rateDirectionForStatusPoints(frontmatter["note-maturity"], noteMajurity) >= 1) {
            pointsReceived += pointsNoteMajurity * rateDirectionForStatusPoints(frontmatter["note-maturity"], noteMajurity);
            this.giveStatusPoints(pointsNoteMajurity * rateDirectionForStatusPoints("frontmatter['note-maturity']", noteMajurity));
          } else if (!("note-maturity" in frontmatter)) {
            pointsReceived += pointsNoteMajurity * rateDirectionForStatusPoints("0", noteMajurity);
            this.giveStatusPoints(pointsNoteMajurity * rateDirectionForStatusPoints("0", noteMajurity));
          }
          if (rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate) >= 1 && "title-class" in frontmatter) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate));
          } else if (!("title-class" in frontmatter)) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", fileNameRate);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", fileNameRate));
          }
          if (rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength) >= 1) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength));
          } else if (!("note-length-class" in frontmatter)) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", rateFileLength);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateFileLength));
          }
          if (rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass) >= 1) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass));
          } else if (!("inlink-class" in frontmatter)) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", inlinkClass);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", inlinkClass));
          }
          if (rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut) >= 1) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut));
          } else if (!("outlink-class" in frontmatter)) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", rateOut);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateOut));
          }
          if (rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum) >= 1) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum));
          } else if (!("progressive-summarization-maturity" in frontmatter)) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateProgressiveSum));
          }
          this.writeFrontmatter(frontmatter, fileNameRate, rateFileLength, inlinkClass, rateOut, rateProgressiveSum, noteMajurity);
        });
      } catch (e2) {
        if ((e2 == null ? void 0 : e2.name) === "YAMLParseError") {
          const errorMessage = `Update majuritys failed Malformed frontamtter on this file : ${file.path} ${e2.message}`;
          new import_obsidian2.Notice(errorMessage, 4e3);
          console.error(errorMessage);
        }
      }
    }
    if (pointsReceived > 0) {
      let boosterFactor = 1;
      if (this.settings.badgeBoosterState) {
        boosterFactor = this.settings.badgeBoosterFactor;
      }
      new import_obsidian2.Notice(`${pointsReceived * boosterFactor} Points received`);
      console.log(`${pointsReceived * boosterFactor} Points received`);
    }
    setTimeout(async () => {
      const initBadge = getBadgeForInitLevel(this.settings.statusLevel);
      new import_obsidian2.Notice(`You've earned the "${initBadge.name}" badge. ${initBadge.description}`);
      console.log(`You earned ${initBadge.name} - ${initBadge.description}`);
      await this.giveInitBadgeInProfile(this.settings.avatarPageName, initBadge);
      await this.removeBadgesWhenInitLevelHigher(this.settings.avatarPageName, this.settings.statusLevel);
      await this.boosterForInit();
      await this.updateStatusBar(statusbarGamification);
    }, 2e3);
    new ModalInformationbox(this.app, `Finallized gamification initialistation!
Congratulation, you earned ${pointsReceived} Points!

Check the Profile Page: "${this.settings.avatarPageName}.md"

You received an initialisation Booster aktiv for your first level ups. Game on!`).open();
  }
  writeFrontmatter(frontmatter, fileNameRate, rateFileLength, inlinkClass, rateOut, rateProgressiveSum, noteMajurity) {
    frontmatter["title-class"] = rateDirection(frontmatter["title-class"], fileNameRate);
    frontmatter["note-length-class"] = rateDirection(frontmatter["note-length-class"], rateFileLength);
    frontmatter["inlink-class"] = rateDirection(frontmatter["inlink-class"], inlinkClass);
    frontmatter["outlink-class"] = rateDirection(frontmatter["outlink-class"], rateOut);
    frontmatter["progressive-summarization-maturity"] = rateDirection(frontmatter["progressive-summarization-maturity"], rateProgressiveSum);
    frontmatter["note-maturity"] = rateDirection(frontmatter["note-maturity"], noteMajurity);
  }
  onunload() {
    console.log("obsidian-pkm-gamification unloaded!");
    if (this.timerId !== null) {
      clearInterval(this.timerId);
      this.timerId = null;
    }
  }
  async calculateNoteMajurity() {
    var _a;
    const file = this.app.workspace.getActiveFile();
    if (file == null) {
      console.error("got no file, propably none is active");
    }
    let detectIfNoteIsFirstTimeRated = false;
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    const fileContents = activeView == null ? void 0 : activeView.editor.getValue();
    const fileName = activeView == null ? void 0 : activeView.file.basename;
    let rateFileLength = 0;
    let fileLength = 0;
    let rateProgressiveSum = 0;
    if (fileContents !== void 0 && fileName !== void 0) {
      fileLength = countCharactersInActiveFile(fileContents, fileName);
      rateFileLength = rateNoteLength(fileLength);
      if (fileContents !== null && fileName !== null) {
        const { charCount, highlightedCount, boldCount } = countLayer2AndLayer3Characters(fileContents, fileName, this.settings.progressiveSumLayer2, this.settings.progressiveSumLayer3);
        rateProgressiveSum = rateProgressiveSummarization(charCount, highlightedCount, boldCount);
      }
    }
    let fileNameRate = 0;
    let inlinkNumber = 0;
    let inlinkClass = 0;
    let rateOut = 0;
    if (file !== null) {
      fileNameRate = rateLengthFilename((_a = file.name) != null ? _a : "");
      inlinkNumber = count_inlinks(file);
      inlinkClass = rateInlinks(inlinkNumber);
      rateOut = rateOutlinks(getNumberOfOutlinks(file));
      const noteMajurity = rateLevelOfMaturity(rateFileLength, fileNameRate, inlinkClass, rateOut, rateProgressiveSum);
      try {
        await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
          if (frontmatter) {
            let pointsReceived = 0;
            if (rateDirectionForStatusPoints(frontmatter["note-maturity"], noteMajurity) >= 1) {
              console.log(`note-maturity >=1`);
              pointsReceived += pointsNoteMajurity * rateDirectionForStatusPoints(frontmatter["note-maturity"], noteMajurity);
              const newLevel = this.giveStatusPoints(pointsNoteMajurity * rateDirectionForStatusPoints("frontmatter['note-maturity']", noteMajurity));
              this.decisionIfBadge(newLevel);
            } else if (!("note-maturity" in frontmatter)) {
              pointsReceived += pointsNoteMajurity * rateDirectionForStatusPoints("0", noteMajurity);
              const newLevel = this.giveStatusPoints(pointsNoteMajurity * rateDirectionForStatusPoints("0", noteMajurity));
              this.decisionIfBadge(newLevel);
              detectIfNoteIsFirstTimeRated = true;
            }
            if (rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate) >= 1 && "title-class" in frontmatter) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate));
              this.decisionIfBadge(newLevel);
            } else if (!("title-class" in frontmatter)) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", fileNameRate);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", fileNameRate));
              this.decisionIfBadge(newLevel);
            }
            if (rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength) >= 1) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength));
              this.decisionIfBadge(newLevel);
            } else if (!("note-length-class" in frontmatter)) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", rateFileLength);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateFileLength));
              this.decisionIfBadge(newLevel);
            }
            if (rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass) >= 1) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass));
              this.decisionIfBadge(newLevel);
            } else if (!("inlink-class" in frontmatter)) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", inlinkClass);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", inlinkClass));
              this.decisionIfBadge(newLevel);
            }
            if (rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut) >= 1) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut));
              this.decisionIfBadge(newLevel);
            } else if (!("outlink-class" in frontmatter)) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", rateOut);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateOut));
              this.decisionIfBadge(newLevel);
            }
            if (rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum) >= 1) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum));
              this.decisionIfBadge(newLevel);
            } else if (!("progressive-summarization-maturity" in frontmatter)) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateProgressiveSum));
              this.decisionIfBadge(newLevel);
            }
            console.log(`pointsReceived: ${pointsReceived}`);
            if (pointsReceived > 0) {
              const messagePoints = getRandomMessagePoints(pointsReceived * this.settings.badgeBoosterFactor);
              new import_obsidian2.Notice(messagePoints);
              console.log(messagePoints);
            }
            this.writeFrontmatter(frontmatter, fileNameRate, rateFileLength, inlinkClass, rateOut, rateProgressiveSum, noteMajurity);
          }
        });
      } catch (e2) {
        if ((e2 == null ? void 0 : e2.name) === "YAMLParseError") {
          const errorMessage = `Update majuritys failed Malformed frontamtter on this file : ${file.path} ${e2.message}`;
          new import_obsidian2.Notice(errorMessage, 4e3);
          console.error(errorMessage);
        }
      }
      new import_obsidian2.Notice("note majurity updated!");
      console.log("note majurity updated!");
      await this.updateStatusBar(this.statusbarGamification);
    } else {
      console.error("file was not found to calculate majurities. Make sure one is active.");
    }
    if (detectIfNoteIsFirstTimeRated) {
      await this.increaseDailyCreatedNoteCount();
      await this.increaseWeeklyCreatedNoteCount();
    }
  }
  async resetDailyGoals() {
    let reset = false;
    if (!isSameDay(window.moment(this.settings.dailyNoteCreationDate, "DD.MM.YYYY"))) {
      this.settings.dailyNoteCreationTask = 0;
      this.settings.dailyNoteCreationDate = window.moment().format("DD.MM.YYYY");
      await this.saveSettings();
      console.log(`daily Challenge reseted`);
      reset = true;
    }
    if (!isOneDayBefore(window.moment(this.settings.weeklyNoteCreationDate, "DD.MM.YYYY")) && !isSameDay(window.moment(this.settings.weeklyNoteCreationDate, "DD.MM.YYYY"))) {
      this.settings.weeklyNoteCreationTask = 0;
      this.settings.weeklyNoteCreationDate = window.moment().subtract(1, "day").format("DD.MM.YYYY");
      await this.saveSettings();
      console.log(`weekly Challenge reseted`);
      reset = true;
    }
    if (isOneDayBefore(window.moment(this.settings.weeklyNoteCreationDate, "DD.MM.YYYY")) && this.settings.weeklyNoteCreationTask == 7) {
      this.settings.weeklyNoteCreationTask = 0;
      this.settings.weeklyNoteCreationDate = window.moment().subtract(1, "day").format("DD.MM.YYYY");
      await this.saveSettings();
      reset = true;
    }
    if (reset) {
      await this.updateAvatarPage(this.settings.avatarPageName);
    }
  }
  async increaseDailyCreatedNoteCount() {
    let newDailyNoteCreationTask = this.settings.dailyNoteCreationTask;
    if (newDailyNoteCreationTask < 2) {
      newDailyNoteCreationTask++;
      this.settings.dailyNoteCreationTask = newDailyNoteCreationTask;
      await this.saveSettings();
      if (newDailyNoteCreationTask == 1) {
        await this.updateAvatarPage(this.settings.avatarPageName);
        console.log(`${newDailyNoteCreationTask}/2 Notes created today.`);
      } else if (newDailyNoteCreationTask == 2) {
        await this.giveStatusPoints(pointsForDailyChallenge);
        const message = getRandomMessageTwoNoteChallenge(pointsForDailyChallenge);
        console.log(`daily Challenge reached! ${newDailyNoteCreationTask}/2 created.`);
        new import_obsidian2.Notice(message);
        console.log(message);
      } else {
        console.log(`${newDailyNoteCreationTask}/2 Notes created today.`);
      }
    }
  }
  async increaseWeeklyCreatedNoteCount() {
    if (isOneDayBefore(window.moment(this.settings.weeklyNoteCreationDate, "DD.MM.YYYY"))) {
      await this.checkForWeeklyNoteChallengeBelow7();
    } else if (isSameDay(window.moment(this.settings.weeklyNoteCreationDate, "DD.MM.YYYY"))) {
      console.log(`daily note creation was rated already today.`);
    } else {
      this.settings.weeklyNoteCreationDate = window.moment().format("DD.MM.YYYY");
      this.settings.weeklyNoteCreationTask = 1;
      await this.saveSettings();
    }
  }
  async checkForWeeklyNoteChallengeBelow7() {
    let currentWeeklyCreatedNotes = this.settings.weeklyNoteCreationTask;
    if (currentWeeklyCreatedNotes < 7) {
      currentWeeklyCreatedNotes++;
      this.settings.weeklyNoteCreationDate = window.moment().format("DD.MM.YYYY");
      this.settings.weeklyNoteCreationTask = currentWeeklyCreatedNotes;
      await this.saveSettings();
      await this.checkForWeeklyNoteChallengeEvaluation(currentWeeklyCreatedNotes);
    }
  }
  async checkForWeeklyNoteChallengeEvaluation(newWeeklyNoteCreationTask) {
    if (newWeeklyNoteCreationTask <= 6) {
      await this.updateAvatarPage(this.settings.avatarPageName);
      console.log(`${newWeeklyNoteCreationTask}/7 Notes created in a chain.`);
    } else if (newWeeklyNoteCreationTask == 7) {
      await this.giveStatusPoints(pointsForWeeklyChallenge);
      console.log(`Weekly Challenge reached! ${newWeeklyNoteCreationTask}/7 created in a chain.`);
      const message = getRandomMessageWeeklyChallenge(pointsForWeeklyChallenge);
      new import_obsidian2.Notice(message);
      console.log(message);
    } else {
      console.log(`${newWeeklyNoteCreationTask}/7 Notes created in a chain.`);
    }
  }
  async updateStatusBar(statusbar) {
    const currentLevel = getLevelForPoints(this.settings.statusPoints);
    const progressbarPercent = (this.settings.statusPoints - currentLevel.points) / (currentLevel.pointsNext - currentLevel.points) * 100;
    const charNumProgressbar = 10;
    const barLength = Math.round(progressbarPercent / charNumProgressbar);
    statusbar.setText(`\u{1F3B2}|lvl: ${this.settings.statusLevel} | ${this.createProgressbar(charNumProgressbar, barLength)}`);
  }
  createProgressbar(charNumProgressbar, barLength) {
    let progressbar = "";
    for (let i2 = 1; i2 <= charNumProgressbar; i2++) {
      if (i2 <= barLength) {
        progressbar += "=";
      } else {
        progressbar += "-";
      }
    }
    return progressbar;
  }
  async loadSettings() {
    this.settings = Object.assign({}, defaultSettings, await this.loadData());
    console.log("loadSettings()");
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async giveStatusPoints(pointsToAdd) {
    let boosterFactor = 1;
    if (this.settings.badgeBoosterState) {
      boosterFactor = this.settings.badgeBoosterFactor;
    }
    this.settings.statusPoints = pointsToAdd * boosterFactor + this.settings.statusPoints;
    await this.saveData(this.settings);
    return this.updateAvatarPage(this.settings.avatarPageName);
  }
  async updateAvatarPage(avatarPageName) {
    const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
    if (existingFile == null) {
      console.log(`File ${avatarPageName}.md does not exist`);
      return false;
    }
    const file = existingFile;
    const content = await app.vault.read(file);
    let reference = null;
    let reference2 = null;
    let reference3 = null;
    let end = null;
    let start = null;
    let end2 = null;
    let start2 = null;
    let end3 = null;
    let start3 = null;
    const lines = content.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      const line = lines[i2].trim();
      if (line === "^levelAndPoints") {
        if (reference === null) {
          reference = i2;
        }
      }
      if (line === "^dailyNotesChallenge") {
        if (reference2 === null) {
          reference2 = i2;
        }
      }
      if (line === "^weeklyNotesChallenge") {
        if (reference3 === null) {
          reference3 = i2;
        }
      }
    }
    const newPoints = this.settings.statusPoints;
    const level = getLevelForPoints(newPoints);
    let nextLevelAt = this.settings.xpForNextLevel;
    let receiveBadge = false;
    if (this.settings.statusLevel < level.level) {
      new import_obsidian2.Notice(`With ${newPoints} points, the current level is ${level.level}.`);
      receiveBadge = checkIfReceiveABadge(this.settings.statusLevel, level.level);
      this.settings.statusLevel = level.level;
      nextLevelAt = level.pointsNext;
      this.settings.xpForNextLevel = level.pointsNext;
      await this.saveData(this.settings);
    }
    const progressBarEnd = nextLevelAt - newPoints;
    const newPointsString = "| **Level**  | **" + level.level + "** |\n| Points | " + newPoints + "    |\n^levelAndPoints\n```chart\ntype: bar\nlabels: [Expririence]\nseries:\n  - title: points reached\n    data: [" + newPoints + "]\n  - title: points to earn to level up\n    data: [" + progressBarEnd + "]\nxMin: " + level.points + "\nxMax: " + level.pointsNext + '\ntension: 0.2\nwidth: 40%\nlabelColors: false\nfill: false\nbeginAtZero: false\nbestFit: false\nbestFitTitle: undefined\nbestFitNumber: 0\nstacked: true\nindexAxis: y\nxTitle: "progress"\nlegend: false\n```';
    const dailyChallenge = "| **daily Notes** | *500EP* | **" + this.settings.dailyNoteCreationTask + "/2**   |";
    const daysLeftInWeeklyChain = 7 - this.settings.weeklyNoteCreationTask;
    const weeklyChallenge = "| **weekly Notes** | *2000EP*     |  **" + this.settings.weeklyNoteCreationTask + "/7**   |\n^weeklyNotesChallenge\n```chart\ntype: bar\nlabels: [days done in a row]\nseries:\n  - title: days to do in a row\n    data: [" + this.settings.weeklyNoteCreationTask + "]\n  - title: points to earn to level up\n    data: [" + daysLeftInWeeklyChain + ']\nxMin: 0\nxMax: 7\ntension: 0.2\nwidth: 40%\nlabelColors: false\nfill: false\nbeginAtZero: false\nbestFit: false\nbestFitTitle: undefined\nbestFitNumber: 0\nstacked: true\nindexAxis: y\nxTitle: "progress"\nlegend: false\n```';
    if (reference != null && reference2 != null && reference3 != null) {
      start = reference - 2;
      end = reference + 24;
      start2 = reference2 - 1 - 25;
      end2 = reference2 - 25;
      start3 = reference3 - 1 - 25;
      end3 = reference3 + 24 - 25;
      const newLines = [...lines.slice(0, start), newPointsString, ...lines.slice(end)];
      const newLines2 = [...newLines.slice(0, start2), dailyChallenge, ...newLines.slice(end2)];
      const newLines3 = [...newLines2.slice(0, start3), weeklyChallenge, ...newLines2.slice(end3)];
      await app.vault.modify(file, newLines3.join("\n"));
    }
    return receiveBadge;
  }
  async giveBadgeInProfile(avatarPageName, badge) {
    const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
    if (existingFile == null) {
      console.log(`File ${avatarPageName}.md does not exist`);
      return;
    }
    const file = existingFile;
    const content = await app.vault.read(file);
    let reference = null;
    let reference2 = null;
    let end = null;
    let start = null;
    let end2 = null;
    let start2 = null;
    const lines = content.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      const line = lines[i2].trim();
      if (line === "#### achieved") {
        if (reference === null) {
          reference = i2;
        }
      }
      if (line === badge.level + ": *" + badge.name + "*") {
        if (reference2 === null) {
          reference2 = i2;
        }
      }
    }
    if (reference != null && reference2 != null) {
      end = reference + 1;
      start = reference + 1;
      end2 = reference2 + 2;
      start2 = reference2 + 1;
      const badgeString = "**" + badge.name + "** " + badge.level + "\n> " + badge.description + " - *" + window.moment().format("D.M.YY") + "*\n";
      const newLines = [...lines.slice(0, start), badgeString, ...lines.slice(end)];
      const newLines2 = [...newLines.slice(0, start2), ...newLines.slice(end2)];
      await app.vault.modify(file, newLines2.join("\n"));
      console.log(`badgeString: ${badgeString}`);
    }
  }
  async giveInitBadgeInProfile(avatarPageName, badge) {
    const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
    if (existingFile == null) {
      console.log(`File ${avatarPageName}.md does not exist`);
      return;
    }
    const file = existingFile;
    const content = await app.vault.read(file);
    let reference = null;
    let end = null;
    let start = null;
    const lines = content.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      const line = lines[i2].trim();
      if (line === "#### achieved") {
        if (reference === null) {
          reference = i2;
        }
      }
    }
    if (reference != null) {
      end = reference + 2;
      start = reference + 1;
      const badgeString = "**" + badge.name + "**\n> " + badge.description + " - *" + window.moment().format("D.M.YY") + "*\n";
      const newLines = [...lines.slice(0, start), badgeString, ...lines.slice(end)];
      await app.vault.modify(file, newLines.join("\n"));
      console.log(`badgeString: ${badgeString}`);
    }
  }
  async removeBadgesWhenInitLevelHigher(avatarPageName, level) {
    const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
    if (existingFile == null) {
      console.log(`File ${avatarPageName}.md does not exist`);
      return;
    }
    const file = existingFile;
    const content = await app.vault.read(file);
    let reference = null;
    let reference2 = null;
    const lines = content.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      const line = lines[i2].trim();
      if (line === "#### outstanding") {
        if (reference === null) {
          reference = i2;
        }
      }
      if (reference != null && reference2 == null) {
        const levelRegex = /level (\d+)/;
        const match2 = line.match(levelRegex);
        if (match2) {
          const levelNumber = parseInt(match2[1], 10);
          if (levelNumber > level) {
            reference2 = i2;
          }
        }
      }
    }
    if (reference != null && reference2 != null) {
      const newLines = [...lines.slice(0, reference + 1), ...lines.slice(reference2)];
      await app.vault.modify(file, newLines.join("\n"));
    }
  }
  async createChart(vault) {
    const files = vault.getMarkdownFiles();
    const earliestFile = findEarliestModifiedFile(files);
    const earliestDate = earliestFile.stat.mtime;
    let monthCounter = 0;
    let dateCount = new Date(earliestDate);
    const fileDateMonthMapMod = /* @__PURE__ */ new Map();
    const monthcount = monthsBetween(new Date(earliestDate), new Date());
    let dateString = dateCount.getMonth() + 1 + "." + dateCount.getFullYear();
    let yLabel = "";
    monthCounter = 0;
    dateCount = new Date(earliestDate);
    dateString = dateCount.getMonth() + 1 + "." + dateCount.getFullYear();
    while (monthCounter < monthcount) {
      dateString = dateCount.getMonth() + 1 + "." + dateCount.getFullYear();
      yLabel = yLabel + dateString + ", ";
      dateCount.setMonth(dateCount.getMonth() + 1);
      monthCounter += 1;
      fileDateMonthMapMod.set(dateString, 0);
    }
    yLabel = yLabel.slice(0, yLabel.length - 2);
    const modificationDates = getModificationDates(files);
    for (let i2 = 0; i2 < modificationDates.length; i2++) {
      const formattedDate = format(modificationDates[i2], "M.yyyy");
      const currentCount = fileDateMonthMapMod.get(formattedDate);
      if (currentCount !== void 0) {
        fileDateMonthMapMod.set(formattedDate, currentCount + 1);
      } else {
        fileDateMonthMapMod.set(formattedDate, 1);
      }
    }
    let charStringModified = "";
    for (const [value] of fileDateMonthMapMod) {
      charStringModified = charStringModified + value + ", ";
    }
    charStringModified = charStringModified.slice(0, charStringModified.length - 2);
    return createChartFormat(yLabel, charStringModified, this.settings.chartReduzierungMonate);
  }
  async decisionIfBadge(newLevel) {
    newLevel.then((result) => {
      if (result) {
        const badge = getBadgeForLevel(this.settings.statusLevel, false);
        new import_obsidian2.Notice(`You've earned the "${badge.name}" badge. ${badge.description}`);
        console.log(`You've earned the "${badge.name}" badge. ${badge.description}`);
        this.giveBadgeInProfile(this.settings.avatarPageName, badge);
        this.settings.badgeBoosterState = false;
        this.settings.badgeBoosterFactor = 1;
        this.saveData(this.settings);
      }
    });
  }
  async removeKeysFromFrontmatter() {
    const { vault } = this.app;
    const fileCountMap = await getFileCountMap(this.app, this.settings.tagsExclude, this.settings.folderExclude);
    for (const fileName of fileCountMap.keys()) {
      const files = vault.getFiles();
      const file = files.find((file2) => file2.basename === fileName);
      if (!file) {
        console.warn(`File ${fileName} not found.`);
        continue;
      }
      console.log(`Processing file ${fileName}`);
      try {
        await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
          delete frontmatter["title-class"];
          delete frontmatter["note-length-class"];
          delete frontmatter["inlink-class"];
          delete frontmatter["outlink-class"];
          delete frontmatter["progressive-summarization-maturity"];
          delete frontmatter["note-maturity"];
        });
      } catch (e2) {
        if ((e2 == null ? void 0 : e2.name) === "YAMLParseError") {
          const errorMessage = `Update majuritys failed Malformed frontamtter ${e2.message}`;
          new import_obsidian2.Notice(errorMessage, 4e3);
          console.error(errorMessage);
        }
      }
    }
  }
  async whichLevelNextBadge(currentLevel) {
    let nextBadgeLevel = 0;
    for (let i2 = currentLevel; i2 < 110; i2++) {
      const badge = getBadgeForLevel(i2, true);
      const levelRegex = /level (\d+)/;
      const match2 = badge.level.match(levelRegex);
      if (match2) {
        const levelNumber = parseInt(match2[1], 10);
        if (levelNumber > currentLevel && nextBadgeLevel == 0) {
          nextBadgeLevel = levelNumber;
        }
      }
    }
    return nextBadgeLevel;
  }
  async boosterForInit() {
    const nextBadgeAt = await this.whichLevelNextBadge(this.settings.statusLevel);
    const statusPointsToReach = statusPointsForLevel(nextBadgeAt);
    const boosterFactor = Math.round((statusPointsToReach - this.settings.statusPoints) / 50 / 300);
    this.settings.badgeBoosterFactor = boosterFactor;
    this.settings.badgeBoosterState = true;
    await this.saveData(this.settings);
    return boosterFactor;
  }
  async openAvatarFile() {
    var _a;
    const existingFile = app.vault.getAbstractFileByPath(`${this.settings.avatarPageName}.md`);
    if (existingFile) {
      const sourcePath = ((_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path) || "";
      await app.workspace.openLinkText(existingFile.path, sourcePath);
    } else {
      console.log("File not found or unable to open.");
    }
  }
};
function isSameDay(inputDate) {
  const currentDate = window.moment();
  return currentDate.isSame(inputDate, "day");
}
function isOneDayBefore(inputDate) {
  const oneDayBeforeCurrent = window.moment().subtract(1, "day");
  return inputDate.isSame(oneDayBeforeCurrent, "day");
}
async function createAvatarFile(app2, fileName) {
  const existingFile = app2.vault.getAbstractFileByPath(`${fileName}.md`);
  if (existingFile instanceof import_obsidian2.TFile) {
    console.log(`File ${fileName}.md already exists`);
    return;
  }
  await app2.vault.create(`${fileName}.md`, avatarInitContent);
}
var MultiSelectModal = class extends import_obsidian2.Modal {
  constructor(app2, items, buttonText) {
    super(app2);
    this.selectedItems = [];
    this.remainingStock = {};
    this.items = items;
    this.buttonText = buttonText;
    this.items.forEach((item) => {
      this.remainingStock[item] = 5;
    });
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    this.items.forEach((item) => {
      const stock = 5;
      const listItem = this.createCheckbox(item);
      contentEl.appendChild(listItem);
    });
    const submitButton = this.createSubmitButton(this.buttonText);
    contentEl.appendChild(submitButton);
  }
  onClose() {
    this.selectedItems = [];
  }
  incrementItem(item) {
    const selectedItemCount = this.selectedItems.filter((selectedItem) => selectedItem === item).length;
    const stock = this.remainingStock[item];
    if (selectedItemCount < 5 && stock > 0) {
      this.selectedItems.push(item);
      this.remainingStock[item]--;
      this.updateQuantityDisplay(item);
    }
  }
  decrementItem(item) {
    const itemIndex = this.selectedItems.indexOf(item);
    if (itemIndex > -1) {
      this.selectedItems.splice(itemIndex, 1);
      this.remainingStock[item]++;
      this.updateQuantityDisplay(item);
    }
  }
  createCheckbox(labelText) {
    const container = document.createElement("div");
    container.className = "modal-checkbox-container";
    const stock = this.remainingStock[labelText] || 0;
    const label = document.createElement("label");
    label.innerText = `${labelText}`;
    label.classList.add(`${labelText.replace(" ", "-")}`);
    const incrementButton = document.createElement("button");
    incrementButton.innerText = "+";
    incrementButton.onclick = () => {
      this.incrementItem(labelText);
    };
    const decrementButton = document.createElement("button");
    decrementButton.innerText = "-";
    decrementButton.onclick = () => {
      this.decrementItem(labelText);
    };
    const remainingStock = document.createElement("span");
    remainingStock.innerHTML = `Remaining: <span>${stock}</span> `;
    remainingStock.id = "remaining-stock";
    const selectedQuantity = document.createElement("span");
    selectedQuantity.innerHTML = `Selected: <span>0</span>`;
    selectedQuantity.id = "selected-quantity";
    container.appendChild(label);
    container.appendChild(incrementButton);
    container.appendChild(decrementButton);
    container.appendChild(remainingStock);
    container.appendChild(selectedQuantity);
    console.log(`container for incement id?: ${container.id}`);
    return container;
  }
  updateQuantityDisplay(labelText) {
    console.log("updateQuantityDisplay called with label:", labelText);
    const labelElement = document.querySelector(`.${labelText.replace(" ", "-")}`);
    if (!labelElement) {
      console.log(`labelElement not found`);
      return;
    }
    const container = labelElement.parentElement;
    if (!container) {
      console.log(`container not found`);
      return;
    }
    const remainingStock = container.querySelector(`#remaining-stock span`);
    if (!remainingStock) {
      console.log(`remainingStock not found`);
      return;
    }
    const selectedQuantity = container.querySelector(`#selected-quantity span`);
    if (!selectedQuantity) {
      console.log(`selectedQuantity not found`);
      return;
    }
    const stock = this.remainingStock[labelText] || 0;
    const selected = this.selectedItems.filter((item) => item === labelText).length;
    console.log(`stock: ${stock}, selected: ${selected}`);
    remainingStock.innerText = `${5 - selected}`;
    selectedQuantity.innerText = `${selected}`;
  }
  createSubmitButton(buttonText) {
    const submitButton = document.createElement("button");
    submitButton.innerText = buttonText;
    submitButton.onclick = () => {
      const selectedItems2 = this.getSelectedItems();
      this.craftBoosterItem(selectedItems2);
      this.close();
    };
    return submitButton;
  }
  getSelectedItems() {
    return this.selectedItems;
  }
  craftBoosterItem(selectedItems) {
    console.log("Selected:", selectedItems.join(", "));
  }
};
var ModalBooster = class extends import_obsidian2.Modal {
  constructor(app2, displayText, gamificationInstance) {
    super(app2);
    this.displayText = displayText;
    this.gamificationInstance = gamificationInstance;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText(this.displayText);
    const button = document.createElement("button");
    button.innerText = "Open Crating Table";
    button.onclick = () => {
      const items = this.readIncredients();
      const multiSelectModal = new MultiSelectModal(this.app, items, "Craft Booster Item");
      multiSelectModal.open();
    };
    const button2 = document.createElement("button");
    button2.innerText = "Open Booster board";
    button2.onclick = () => {
      const items2 = [
        "Booster 1",
        "Booster 2",
        "Booster 3",
        "Booster 4",
        "Booster 5",
        "Booster 6"
      ];
      const multiSelectModal = new MultiSelectModal(this.app, items2, "use Booster");
      multiSelectModal.open();
    };
    contentEl.appendChild(button);
    contentEl.appendChild(button2);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  readIncredients() {
    const sum = ["Nexus Node", "Connection Crystal", "Mastery Scroll", "Insight Prism", "Reflective Essence", "Amplification Crystal", "Creative Catalyst", "Precision Lens"];
    return sum;
  }
};
var ModalInformationbox = class extends import_obsidian2.Modal {
  // Store the text to be displayed
  constructor(app2, displayText) {
    super(app2);
    this.displayText = displayText;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText(this.displayText);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
async function replaceFormatStrings(layer2, layer3) {
  const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
  if (!activeView) {
    console.error("No active Markdown view found.");
    return;
  }
  const editor = activeView.editor;
  const selectedText = editor.getSelection();
  if (!selectedText) {
    console.error("No text selected (for progressive summarization switch Layer 2 & 3).");
    return;
  }
  let replacedText = selectedText.replaceAll(layer2, "\xA7\xA7\xA7\xA7");
  replacedText = replacedText.replaceAll(layer3, "\u20AC\u20AC\u20AC\u20AC");
  replacedText = replacedText.replaceAll("\u20AC\u20AC\u20AC\u20AC", layer2);
  replacedText = replacedText.replaceAll("\xA7\xA7\xA7\xA7", layer3);
  editor.replaceSelection(replacedText);
}
function rateDirectionForStatusPoints(ratingCurrent, ratingNew) {
  let ratingFaktor;
  if (parseInt(ratingCurrent, 10) < ratingNew) {
    ratingFaktor = ratingNew - parseInt(ratingCurrent, 10);
  } else {
    ratingFaktor = 0;
  }
  return ratingFaktor;
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3NldHRpbmdzLnRzIiwgIm5vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzRGF0ZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVmFsaWQvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZGVmYXVsdE9wdGlvbnMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdC9pbmRleC5qcyIsICJzcmMvY29uc3RhbnRzLnRzIiwgInNyYy9tYWp1cml0eWNhbGN1bGF0aW9uLnRzIiwgInNyYy9jcmVhdG1vZGNoYXJ0Y2FsY3VsYXRpb24udHMiLCAic3JjL2JhZGdlcy50cyIsICJzcmMvbGV2ZWxzLnRzIiwgInNyYy9yYW5kb21Ob3RpZmljYXRpb25UZXh0LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XHJcbnN0eWxlLnRleHRDb250ZW50ID0gYFxyXG4gIC5tb2RhbC1jaGVja2JveC1jb250YWluZXIge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIH1cclxuXHJcbiAgLm1vZGFsLWNoZWNrYm94LWNvbnRhaW5lciBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0ge1xyXG4gICAgbWFyZ2luLXJpZ2h0OiA1cHg7XHJcbiAgfVxyXG5gO1xyXG5cclxuZG9jdW1lbnQuaGVhZC5hcHBlbmQoc3R5bGUpO1xyXG5pbXBvcnQge0FwcCwgTWFya2Rvd25WaWV3LCBNb2RhbCwgTm90aWNlLCBQbHVnaW4sIFRGaWxlLCBWYXVsdH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQge2RlZmF1bHRTZXR0aW5ncywgR2FtaWZpY2F0aW9uUGx1Z2luU2V0dGluZ3N9IGZyb20gJy4vc2V0dGluZ3MnO1xyXG5pbXBvcnQgZm9ybWF0IGZyb20gJ2RhdGUtZm5zL2Zvcm1hdCc7XHJcbmltcG9ydCB7XHJcblx0YXZhdGFySW5pdENvbnRlbnQsXHJcblx0cG9pbnRzTWFqdXJpdHksXHJcblx0cG9pbnRzTm90ZU1hanVyaXR5LFxyXG5cdHBvaW50c0ZvckRhaWx5Q2hhbGxlbmdlLFxyXG5cdHBvaW50c0ZvcldlZWtseUNoYWxsZW5nZVxyXG59IGZyb20gJy4vY29uc3RhbnRzJ1xyXG5pbXBvcnQge1xyXG5cdGNvdW50X2lubGlua3MsXHJcblx0Y291bnRDaGFyYWN0ZXJzSW5BY3RpdmVGaWxlLFxyXG5cdGNvdW50TGF5ZXIyQW5kTGF5ZXIzQ2hhcmFjdGVycyxcclxuXHRnZXRGaWxlQ291bnRNYXAsXHJcblx0Z2V0RmlsZU1hcCxcclxuXHRnZXROdW1iZXJPZk91dGxpbmtzLFxyXG5cdHJhdGVEaXJlY3Rpb24sXHJcblx0cmF0ZUlubGlua3MsXHJcblx0cmF0ZUxlbmd0aEZpbGVuYW1lLFxyXG5cdHJhdGVMZXZlbE9mTWF0dXJpdHksXHJcblx0cmF0ZU5vdGVMZW5ndGgsXHJcblx0cmF0ZU91dGxpbmtzLFxyXG5cdHJhdGVQcm9ncmVzc2l2ZVN1bW1hcml6YXRpb25cclxufSBmcm9tICcuL21hanVyaXR5Y2FsY3VsYXRpb24nXHJcbmltcG9ydCB7XHJcblx0Y3JlYXRlQ2hhcnRGb3JtYXQsXHJcblx0ZmluZEVhcmxpZXN0TW9kaWZpZWRGaWxlLFxyXG5cdGdldE1vZGlmaWNhdGlvbkRhdGVzLFxyXG5cdG1vbnRoc0JldHdlZW4sXHJcblx0cmVwbGFjZUNoYXJ0Q29udGVudFxyXG59IGZyb20gJy4vY3JlYXRtb2RjaGFydGNhbGN1bGF0aW9uJ1xyXG5pbXBvcnQge0JhZGdlLCBjaGVja0lmUmVjZWl2ZUFCYWRnZSwgZ2V0QmFkZ2VGb3JJbml0TGV2ZWwsIGdldEJhZGdlRm9yTGV2ZWx9IGZyb20gJy4vYmFkZ2VzJ1xyXG5pbXBvcnQge2dldExldmVsRm9yUG9pbnRzLCBzdGF0dXNQb2ludHNGb3JMZXZlbH0gZnJvbSAnLi9sZXZlbHMnXHJcbmltcG9ydCB0eXBlIHtNb21lbnR9IGZyb20gJ21vbWVudCc7XHJcbmltcG9ydCB7IGdldFJhbmRvbU1lc3NhZ2VXZWVrbHlDaGFsbGVuZ2UsIGdldFJhbmRvbU1lc3NhZ2VUd29Ob3RlQ2hhbGxlbmdlICwgZ2V0UmFuZG9tTWVzc2FnZVBvaW50cyB9IGZyb20gJy4vcmFuZG9tTm90aWZpY2F0aW9uVGV4dCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGdhbWlmaWNhdGlvbiBleHRlbmRzIFBsdWdpbiB7XHJcblx0cHVibGljIHNldHRpbmdzOiBHYW1pZmljYXRpb25QbHVnaW5TZXR0aW5ncztcclxuXHRwcml2YXRlIHRpbWVySW50ZXJ2YWw6IG51bWJlcjtcclxuXHRwcml2YXRlIHRpbWVySWQ6IG51bWJlciB8IG51bGw7XHJcblx0cHJpdmF0ZSBzdGF0dXNCYXJJdGVtID0gdGhpcy5hZGRTdGF0dXNCYXJJdGVtKCk7XHJcblx0cHJpdmF0ZSBzdGF0dXNiYXJHYW1pZmljYXRpb24gPSB0aGlzLnN0YXR1c0Jhckl0ZW0uY3JlYXRlRWwoXCJzcGFuXCIsIHsgdGV4dDogXCJcIiB9KTtcclxuXHJcblxyXG5cdGdldFNldHRpbmcoa2V5KSB7XHJcbiAgICAgICAgLy8gUmV0cmlldmUgYSBzcGVjaWZpYyBzZXR0aW5nXHJcblx0XHQvL3RoaXMuc2V0dGluZ3NbJ2Jvb3N0ZXJJbmNyZWRpZW50cyddXHJcblx0XHQvL2NvbnN0IGtleSA9ICdib29zdGVySW5jcmVkaWVudHMnXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3Nba2V5XTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTZXR0aW5nKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAvLyBTZXQgYSBzcGVjaWZpYyBzZXR0aW5nXHJcbiAgICAgICAgdGhpcy5zZXR0aW5nc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5zYXZlU2V0dGluZ3MoKTtcclxuICAgIH1cclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0Y29uc29sZS5sb2coJ29ic2lkaWFuLXBrbS1nYW1pZmljYXRpb24gbG9hZGVkIScpO1xyXG5cclxuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblxyXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBHYW1pZmljYXRpb25QbHVnaW5TZXR0aW5ncyh0aGlzLmFwcCwgdGhpcykpO1xyXG5cclxuXHRcdC8vIHRha2UgY2FyZSB0byByZXNldCB3aGVuIG9wZW5lZCBvbiBhIG5ldyBkYXksIGRvbid0IHdhaXQgZm9yIHRyaWdnZXJcclxuXHRcdHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHQvLyBDb2RlIHRoYXQgeW91IHdhbnQgdG8gZXhlY3V0ZSBhZnRlciB0aGUgZGVsYXlcclxuXHRcdFx0YXdhaXQgdGhpcy5yZXNldERhaWx5R29hbHMoKVxyXG5cdFx0fSwgMjAwMCk7IC8vIDIwMDAgbWlsbGlzZWNvbmRzID0gMiBzZWNvbmRzXHJcblxyXG5cclxuXHRcdC8vIHRvIHNldCB0aW1lciBmb3IgcmVzZXQgZGFpbHkgYW5kIHdlZWtseSBnb2Fsc1xyXG5cdFx0dGhpcy50aW1lckludGVydmFsID0gMzAgKiA2MCAqIDEwMDA7IC8vIG1pbnV0ZXMgeCBzZWNvbmRzIHggbWlsbGlzZWNvbmRzXHJcblx0XHR0aGlzLnRpbWVySWQgPSB3aW5kb3cuc2V0SW50ZXJ2YWwodGhpcy5yZXNldERhaWx5R29hbHMuYmluZCh0aGlzKSwgdGhpcy50aW1lckludGVydmFsKTtcclxuXHJcblx0XHRhd2FpdCB0aGlzLnVwZGF0ZVN0YXR1c0Jhcih0aGlzLnN0YXR1c2JhckdhbWlmaWNhdGlvbilcclxuXHJcblxyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MuZGVidWcpe1xyXG5cdFx0XHR0aGlzLmFkZFJpYmJvbkljb24oXCJhY2Nlc3NpYmlsaXR5XCIsIFwiY2hhbmdlIHRleHQgZm9ybWF0dGluZ1wiLCBhc3luYyAoKSA9PiB7XHJcblxyXG5cdFx0XHRcdC8vIGNvbnN0IHBvaW50c1JlY2VpdmVkID0gNTAwO1xyXG5cdFx0XHRcdC8vIG5ldyBNb2RhbEluZm9ybWF0aW9uYm94KHRoaXMuYXBwLCBgRmluYWxpemVkIGdhbWlmaWNhdGlvbiBpbml0aWFsaXphdGlvbiFcXG5Db25ncmF0dWxhdGlvbiwgeW91IGVhcm5lZCAke3BvaW50c1JlY2VpdmVkfSBQb2ludHMhXFxuXFxuQ2hlY2sgdGhlIFByb2ZpbGUgUGFnZTogXFxcIiR7dGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZX0ubWRcXFwiLmApLm9wZW4oKTtcclxuXHJcblx0XHRcdFx0Ly8gY29uc3QgbmV3TGV2ZWwgPSB0aGlzLmdpdmVTdGF0dXNQb2ludHModGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSwgMzAwKVxyXG5cdFx0XHRcdC8vIHRoaXMuZGVjaXNpb25JZkJhZGdlKG5ld0xldmVsKVxyXG5cclxuXHRcdFx0XHQvLyBjb25zdCBuZXh0QmFkZ2VMZXZlbCA9IGF3YWl0IHRoaXMud2hpY2hMZXZlbE5leHRCYWRnZSh0aGlzLnNldHRpbmdzLnN0YXR1c0xldmVsKVxyXG5cdFx0XHRcdC8vIGNvbnNvbGUubG9nKGBOXHUwMEU0Y2hzdGUgQmFkZ2UgbWl0IExldmVsICR7bmV4dEJhZGdlTGV2ZWx9YClcclxuXHJcblxyXG5cdFx0XHRcdC8vIGNvbnN0IGluaXRCYWRnZSA6IEJhZGdlID0gYXdhaXQgZ2V0QmFkZ2VGb3JJbml0TGV2ZWwodGhpcy5zZXR0aW5ncy5zdGF0dXNMZXZlbCk7XHJcblx0XHRcdFx0Ly8gYXdhaXQgdGhpcy5naXZlSW5pdEJhZGdlSW5Qcm9maWxlKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUsIGluaXRCYWRnZSk7XHJcblx0XHRcdFx0Ly8gYXdhaXQgdGhpcy5yZW1vdmVCYWRnZXNXaGVuSW5pdExldmVsSGlnaGVyKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUgLHRoaXMuc2V0dGluZ3Muc3RhdHVzTGV2ZWwpXHJcblx0XHRcdFx0Ly8gYXdhaXQgdGhpcy5ib29zdGVyRm9ySW5pdCgpXHJcblxyXG5cdFx0XHRcdC8vIHRoaXMub3BlbkF2YXRhckZpbGUoKVxyXG5cclxuXHJcblx0XHRcdFx0Ly8gY2hhbmdlIHRleHQgaW4gc3RhdHVzIGJhclxyXG5cclxuXHRcdFx0XHQvLyB0aGlzLnVwZGF0ZVN0YXR1c0JhcihzdGF0dXNiYXJHYW1pZmljYXRpb24pXHJcblx0XHRcdFx0Ly9zdGF0dXNiYXJHYW1pZmljYXRpb24uc2V0VGV4dChcIkhhbGxvXCIpXHJcblxyXG5cclxuXHRcdFx0XHQvL2F3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblx0XHRcdFx0Ly9hd2FpdCB0aGlzLnVwZGF0ZUF2YXRhclBhZ2UodGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSk7XHJcblxyXG5cdFx0XHRcdC8vIHRoaXMubG9hZFNldHRpbmdzKClcclxuXHRcdFx0XHQvL2F3YWl0IHRoaXMucmVzZXREYWlseUdvYWxzKClcclxuXHJcblxyXG5cdFx0XHRcdG5ldyBNb2RhbEJvb3N0ZXIodGhpcy5hcHAsIGAgYCwgdGhpcykub3BlbigpO1xyXG5cclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdHRoaXMuYWRkUmliYm9uSWNvbihcInNwcm91dFwiLCBcIkNhbGN1bGF0ZSBOb3RlIE1hdHVyaXR5XCIsIGFzeW5jICgpID0+IHtcclxuXHRcdFx0Ly9jb25zdCBmaWxlOiBURmlsZSB8IG51bGwgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG5cdFx0XHRhd2FpdCB0aGlzLmNhbGN1bGF0ZU5vdGVNYWp1cml0eSgpO1xyXG5cdFx0fSk7XHJcblxyXG5cclxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZUluaXRDb21tYW5kKXtcclxuXHRcdFx0Ly8gY29tbWFuZCBJbml0aWFsaXplIGdhbWlmaWNhdGlvbiByYXRpbmdzXHJcblx0XHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdFx0aWQ6ICdpbml0LXJhdGUtZ2FtaWZpY2F0aW9uJyxcclxuXHRcdFx0XHRuYW1lOiAnSW5pdGlhbGl6ZSBnYW1pZmljYXRpb24gcmF0aW5ncycsXHJcblx0XHRcdFx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMuaW5pdGlhbGl6ZUdhbWUodGhpcy5zdGF0dXNiYXJHYW1pZmljYXRpb24pO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZUluaXRDb21tYW5kKXtcclxuXHRcdFx0Ly8gY29tbWFuZCBjcmVhdGUgYXZhdGFyIHByb2ZpbGUgcGFnZVxyXG5cdFx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRcdGlkOiAnY3JlYXRlLWF2YXRhci1wYWdlJyxcclxuXHRcdFx0XHRuYW1lOiAnY3JlYXRlIHByb2ZpbGUgcGFnZScsXHJcblx0XHRcdFx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRcdGNvbnN0IHsgdmF1bHQgfSA9IHRoaXMuYXBwO1xyXG5cdFx0XHRcdFx0YXdhaXQgY3JlYXRlQXZhdGFyRmlsZSh0aGlzLmFwcCwgdGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSlcclxuXHRcdFx0XHRcdGNvbnN0IGNoYXJ0U3RyaW5nID0gYXdhaXQgdGhpcy5jcmVhdGVDaGFydCh2YXVsdClcclxuXHRcdFx0XHRcdGF3YWl0IHJlcGxhY2VDaGFydENvbnRlbnQodGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSwgY2hhcnRTdHJpbmcpXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZUluaXRDb21tYW5kKSB7XHJcblx0XHRcdC8vIGNvbW1hbmQ6IHJlc2V0IGdhbWVcclxuXHRcdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0XHRpZDogJ3Jlc2V0LWdhbWUnLFxyXG5cdFx0XHRcdG5hbWU6ICdyZXNldCB0aGUgZ2FtZScsXHJcblx0XHRcdFx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJlc2V0R2FtZSgpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGNvbW1hbmQ6IHVwZGF0ZSBjaGFydCBpbiBBdmF0YXIgUGFnZVxyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6ICd1cGRhdGUtY2hhcnQtYXZhdGFycGFnZScsXHJcblx0XHRcdG5hbWU6ICd1cGRhdGUgY2hhcnQgb24gcHJvZmlsZSBwYWdlJyxcclxuXHRcdFx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRjb25zdCB7IHZhdWx0IH0gPSBhcHA7XHJcblx0XHRcdFx0Y29uc3QgY2hhcnRTdHJpbmcgPSBhd2FpdCB0aGlzLmNyZWF0ZUNoYXJ0KHZhdWx0KVxyXG5cdFx0XHRcdGF3YWl0IHJlcGxhY2VDaGFydENvbnRlbnQodGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSwgY2hhcnRTdHJpbmcpXHJcblx0XHRcdH0sXHJcblx0XHR9KTtcclxuXHJcblxyXG5cdFx0Ly8gY29tbWFuZDogcmF0ZSBub3RlIG1hdHVyaXR5XHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogJ3JhdGUtbm90ZS1tYXR1cml0eScsXHJcblx0XHRcdG5hbWU6ICdSYXRlIG5vdGUgbWFqdXJpdHknLFxyXG5cdFx0XHRjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHRcdGF3YWl0IHRoaXMuY2FsY3VsYXRlTm90ZU1hanVyaXR5KCk7XHJcblx0XHRcdH0sXHJcblx0XHR9KTtcclxuXHJcblxyXG5cdFx0Ly8gY29tbWFuZDogY2hhbmdlIHByb2dyZXNzaXZlIHN1bW1hcml6YXRpb24gc3ltYm9sc1xyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6ICdjaGFuZ2UtcHJvZ3Jlc3NpdmUtZm9ybWF0dGluZycsXHJcblx0XHRcdG5hbWU6ICd0b2dnbGUgcHJvZ3Jlc3NpdmUgc3VtbWFyaXphdGlvbiBmb3JtYXR0aW5nJyxcclxuXHRcdFx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IHtcclxuXHRcdFx0XHRhd2FpdCByZXBsYWNlRm9ybWF0U3RyaW5ncyh0aGlzLnNldHRpbmdzLnByb2dyZXNzaXZlU3VtTGF5ZXIyLCB0aGlzLnNldHRpbmdzLnByb2dyZXNzaXZlU3VtTGF5ZXIzKTtcclxuXHRcdFx0fSxcclxuXHRcdH0pO1xyXG5cclxuXHR9XHJcblxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgcmVzZXRHYW1lKCkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMucmVtb3ZlS2V5c0Zyb21Gcm9udG1hdHRlcigpO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3Muc3RhdHVzTGV2ZWwgPSAxO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3Muc3RhdHVzUG9pbnRzID0gMDtcclxuICAgICAgICB0aGlzLnNldHRpbmdzLnhwRm9yTmV4dExldmVsID0gMTAwMFxyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MuYmFkZ2VCb29zdGVyU3RhdGUgPSBmYWxzZVxyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MuYmFkZ2VCb29zdGVyRmFjdG9yID0gMVxyXG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5naXZlU3RhdHVzUG9pbnRzKDApXHJcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVTdGF0dXNCYXIodGhpcy5zdGF0dXNiYXJHYW1pZmljYXRpb24pXHJcbiAgICAgICAgbmV3IE1vZGFsSW5mb3JtYXRpb25ib3godGhpcy5hcHAsIGBHYW1lIGlzIG5vdyByZXNldGVkLiBQbGVhc2UgZGVsZXRlIHRoZSBQcm9maWxlIFBhZ2U6IFwiJHt0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lfS5tZFwiIG1hbnVhbGx5LmApLm9wZW4oKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGluaXRpYWxpemVHYW1lKHN0YXR1c2JhckdhbWlmaWNhdGlvbjogSFRNTFNwYW5FbGVtZW50KSB7XHJcblx0XHR0aGlzLnNldHRpbmdzLmdhbWlmaWNhdGlvblN0YXJ0RGF0ZSA9IGZvcm1hdChuZXcgRGF0ZSgpLCAneXl5eS1NTS1kZCcpO1xyXG5cdFx0YXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcclxuXHJcblx0XHRjb25zdCB7dmF1bHR9ID0gdGhpcy5hcHA7XHJcblx0XHRhd2FpdCBjcmVhdGVBdmF0YXJGaWxlKHRoaXMuYXBwLCB0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lKVxyXG5cdFx0Y29uc3QgY2hhcnRTdHJpbmcgPSBhd2FpdCB0aGlzLmNyZWF0ZUNoYXJ0KHZhdWx0KVxyXG5cdFx0YXdhaXQgcmVwbGFjZUNoYXJ0Q29udGVudCh0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lLCBjaGFydFN0cmluZylcclxuXHRcdGF3YWl0IHRoaXMub3BlbkF2YXRhckZpbGUoKVxyXG5cdFx0Y29uc3QgZmlsZUNvdW50TWFwOiBURmlsZVtdID0gYXdhaXQgZ2V0RmlsZU1hcCh0aGlzLmFwcCwgdGhpcy5zZXR0aW5ncy50YWdzRXhjbHVkZSwgdGhpcy5zZXR0aW5ncy5mb2xkZXJFeGNsdWRlKTtcclxuXHRcdGNvbnNvbGUubG9nKGBmaWxlQ291bnRNYXAgbG9hZGVkLiBOdW1iZXIgb2YgZmlsZXM6ICR7ZmlsZUNvdW50TWFwLmxlbmd0aH1gKTtcclxuXHJcblx0XHRsZXQgcG9pbnRzUmVjZWl2ZWQgPSAwOyAvLyB0byBoYXZlIG9uZSBtZXNzYWdlIGF0IHRoZSBlbmQgaG93IG1hbnkgcG9pbnRzIHJlY2VpdmVkXHJcblxyXG5cdFx0Zm9yIChjb25zdCBmaWxlTmFtZSBvZiBmaWxlQ291bnRNYXApIHtcclxuXHRcdFx0Y29uc3QgZmlsZSA9IGZpbGVOYW1lXHJcblx0XHRcdGNvbnN0IGZpbGVDb250ZW50cyA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGZpbGUpO1xyXG5cdFx0XHRjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcclxuXHRcdFx0aWYgKGFjdGl2ZVZpZXcgJiYgYWN0aXZlVmlldy5maWxlICYmIGFjdGl2ZVZpZXcuZmlsZS5wYXRoID09PSBmaWxlLnBhdGgpIHtcclxuXHRcdFx0XHRjb25zb2xlLndhcm4oYEZpbGUgJHtmaWxlLnBhdGh9IGlzIGN1cnJlbnRseSBvcGVuLiBTa2lwcGluZy5gKTtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvL2NvbnNvbGUubG9nKGBmaWxlTmFtZS5iYXNlbmFtZTogJHtmaWxlTmFtZS5iYXNlbmFtZX1gKVxyXG5cdFx0XHRjb25zdCBmaWxlTGVuZ3RoID0gY291bnRDaGFyYWN0ZXJzSW5BY3RpdmVGaWxlKGZpbGVDb250ZW50cywgZmlsZU5hbWUuYmFzZW5hbWUpO1xyXG5cdFx0XHRjb25zdCByYXRlRmlsZUxlbmd0aCA9IHJhdGVOb3RlTGVuZ3RoKGZpbGVMZW5ndGgpO1xyXG5cdFx0XHRjb25zdCB7XHJcblx0XHRcdFx0Y2hhckNvdW50LFxyXG5cdFx0XHRcdGhpZ2hsaWdodGVkQ291bnQsXHJcblx0XHRcdFx0Ym9sZENvdW50XHJcblx0XHRcdH0gPSBjb3VudExheWVyMkFuZExheWVyM0NoYXJhY3RlcnMoZmlsZUNvbnRlbnRzLCBmaWxlTmFtZS5iYXNlbmFtZSwgdGhpcy5zZXR0aW5ncy5wcm9ncmVzc2l2ZVN1bUxheWVyMiwgdGhpcy5zZXR0aW5ncy5wcm9ncmVzc2l2ZVN1bUxheWVyMyk7XHJcblx0XHRcdGNvbnN0IHJhdGVQcm9ncmVzc2l2ZVN1bTogbnVtYmVyID0gcmF0ZVByb2dyZXNzaXZlU3VtbWFyaXphdGlvbihjaGFyQ291bnQsIGhpZ2hsaWdodGVkQ291bnQsIGJvbGRDb3VudCk7XHJcblx0XHRcdGNvbnN0IGZpbGVOYW1lUmF0ZSA9IHJhdGVMZW5ndGhGaWxlbmFtZShmaWxlLm5hbWUpO1xyXG5cdFx0XHRjb25zdCBpbmxpbmtOdW1iZXIgPSBjb3VudF9pbmxpbmtzKGZpbGUpO1xyXG5cdFx0XHRjb25zdCBpbmxpbmtDbGFzcyA9IHJhdGVJbmxpbmtzKGlubGlua051bWJlcikvLywgZmlsZUNvdW50TWFwLnNpemUpO1xyXG5cdFx0XHRjb25zdCByYXRlT3V0ID0gcmF0ZU91dGxpbmtzKGdldE51bWJlck9mT3V0bGlua3MoZmlsZSkpO1xyXG5cdFx0XHRjb25zdCBub3RlTWFqdXJpdHkgPSByYXRlTGV2ZWxPZk1hdHVyaXR5KHJhdGVGaWxlTGVuZ3RoLCBmaWxlTmFtZVJhdGUsIGlubGlua0NsYXNzLCByYXRlT3V0LCByYXRlUHJvZ3Jlc3NpdmVTdW0pO1xyXG5cclxuXHJcblx0XHRcdGNvbnNvbGUubG9nKGBQcm9jZXNzaW5nIGZpbGUgJHtmaWxlTmFtZS5iYXNlbmFtZX0gaW4gcGF0aCAke2ZpbGVOYW1lLnBhdGh9YCk7XHJcblxyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdGF3YWl0IHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnByb2Nlc3NGcm9udE1hdHRlcihmaWxlLCAoZnJvbnRtYXR0ZXIpID0+IHtcclxuXHRcdFx0XHRcdGlmIChyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydub3RlLW1hdHVyaXR5J10sIG5vdGVNYWp1cml0eSkgPj0gMSkge1xyXG5cdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNOb3RlTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydub3RlLW1hdHVyaXR5J10sIG5vdGVNYWp1cml0eSlcclxuXHRcdFx0XHRcdFx0dGhpcy5naXZlU3RhdHVzUG9pbnRzKHBvaW50c05vdGVNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoXCJmcm9udG1hdHRlclsnbm90ZS1tYXR1cml0eSddXCIsIG5vdGVNYWp1cml0eSkpXHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCEoJ25vdGUtbWF0dXJpdHknIGluIGZyb250bWF0dGVyKSkge1xyXG5cdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNOb3RlTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCBub3RlTWFqdXJpdHkpXHJcblx0XHRcdFx0XHRcdHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyhwb2ludHNOb3RlTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCBub3RlTWFqdXJpdHkpKVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmIChyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWyd0aXRsZS1jbGFzcyddLCBmaWxlTmFtZVJhdGUpID49IDEgJiYgJ3RpdGxlLWNsYXNzJyBpbiBmcm9udG1hdHRlcikge1xyXG5cdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ3RpdGxlLWNsYXNzJ10sIGZpbGVOYW1lUmF0ZSlcclxuXHRcdFx0XHRcdFx0dGhpcy5naXZlU3RhdHVzUG9pbnRzKHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsndGl0bGUtY2xhc3MnXSwgZmlsZU5hbWVSYXRlKSlcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoISgndGl0bGUtY2xhc3MnIGluIGZyb250bWF0dGVyKSkge1xyXG5cdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoXCIwXCIsIGZpbGVOYW1lUmF0ZSlcclxuXHRcdFx0XHRcdFx0dGhpcy5naXZlU3RhdHVzUG9pbnRzKHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhcIjBcIiwgZmlsZU5hbWVSYXRlKSlcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAocmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnbm90ZS1sZW5ndGgtY2xhc3MnXSwgcmF0ZUZpbGVMZW5ndGgpID49IDEpIHtcclxuXHRcdFx0XHRcdFx0cG9pbnRzUmVjZWl2ZWQgKz0gcG9pbnRzTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydub3RlLWxlbmd0aC1jbGFzcyddLCByYXRlRmlsZUxlbmd0aClcclxuXHRcdFx0XHRcdFx0dGhpcy5naXZlU3RhdHVzUG9pbnRzKHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnbm90ZS1sZW5ndGgtY2xhc3MnXSwgcmF0ZUZpbGVMZW5ndGgpKVxyXG5cdFx0XHRcdFx0fSBlbHNlIGlmICghKCdub3RlLWxlbmd0aC1jbGFzcycgaW4gZnJvbnRtYXR0ZXIpKSB7XHJcblx0XHRcdFx0XHRcdHBvaW50c1JlY2VpdmVkICs9IHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhcIjBcIiwgcmF0ZUZpbGVMZW5ndGgpXHJcblx0XHRcdFx0XHRcdHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyhwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoXCIwXCIsIHJhdGVGaWxlTGVuZ3RoKSlcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZiAocmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnaW5saW5rLWNsYXNzJ10sIGlubGlua0NsYXNzKSA+PSAxKSB7XHJcblx0XHRcdFx0XHRcdHBvaW50c1JlY2VpdmVkICs9IHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnaW5saW5rLWNsYXNzJ10sIGlubGlua0NsYXNzKVxyXG5cdFx0XHRcdFx0XHR0aGlzLmdpdmVTdGF0dXNQb2ludHMocG9pbnRzTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydpbmxpbmstY2xhc3MnXSwgaW5saW5rQ2xhc3MpKVxyXG5cdFx0XHRcdFx0fSBlbHNlIGlmICghKCdpbmxpbmstY2xhc3MnIGluIGZyb250bWF0dGVyKSkge1xyXG5cdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoXCIwXCIsIGlubGlua0NsYXNzKVxyXG5cdFx0XHRcdFx0XHR0aGlzLmdpdmVTdGF0dXNQb2ludHMocG9pbnRzTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCBpbmxpbmtDbGFzcykpXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aWYgKHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ291dGxpbmstY2xhc3MnXSwgcmF0ZU91dCkgPj0gMSkge1xyXG5cdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ291dGxpbmstY2xhc3MnXSwgcmF0ZU91dClcclxuXHRcdFx0XHRcdFx0dGhpcy5naXZlU3RhdHVzUG9pbnRzKHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnb3V0bGluay1jbGFzcyddLCByYXRlT3V0KSlcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoISgnb3V0bGluay1jbGFzcycgaW4gZnJvbnRtYXR0ZXIpKSB7XHJcblx0XHRcdFx0XHRcdHBvaW50c1JlY2VpdmVkICs9IHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhcIjBcIiwgcmF0ZU91dClcclxuXHRcdFx0XHRcdFx0dGhpcy5naXZlU3RhdHVzUG9pbnRzKHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhcIjBcIiwgcmF0ZU91dCkpXHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aWYgKHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ3Byb2dyZXNzaXZlLXN1bW1hcml6YXRpb24tbWF0dXJpdHknXSwgcmF0ZVByb2dyZXNzaXZlU3VtKSA+PSAxKSB7XHJcblx0XHRcdFx0XHRcdHBvaW50c1JlY2VpdmVkICs9IHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsncHJvZ3Jlc3NpdmUtc3VtbWFyaXphdGlvbi1tYXR1cml0eSddLCByYXRlUHJvZ3Jlc3NpdmVTdW0pXHJcblx0XHRcdFx0XHRcdHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyhwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ3Byb2dyZXNzaXZlLXN1bW1hcml6YXRpb24tbWF0dXJpdHknXSwgcmF0ZVByb2dyZXNzaXZlU3VtKSlcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoISgncHJvZ3Jlc3NpdmUtc3VtbWFyaXphdGlvbi1tYXR1cml0eScgaW4gZnJvbnRtYXR0ZXIpKSB7XHJcblx0XHRcdFx0XHRcdHBvaW50c1JlY2VpdmVkICs9IHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsncHJvZ3Jlc3NpdmUtc3VtbWFyaXphdGlvbi1tYXR1cml0eSddLCByYXRlUHJvZ3Jlc3NpdmVTdW0pXHJcblx0XHRcdFx0XHRcdHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyhwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoXCIwXCIsIHJhdGVQcm9ncmVzc2l2ZVN1bSkpXHJcblxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHJcblx0XHRcdFx0XHR0aGlzLndyaXRlRnJvbnRtYXR0ZXIoZnJvbnRtYXR0ZXIsIGZpbGVOYW1lUmF0ZSwgcmF0ZUZpbGVMZW5ndGgsIGlubGlua0NsYXNzLCByYXRlT3V0LCByYXRlUHJvZ3Jlc3NpdmVTdW0sIG5vdGVNYWp1cml0eSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0XHRpZiAoZT8ubmFtZSA9PT0gJ1lBTUxQYXJzZUVycm9yJykge1xyXG5cdFx0XHRcdFx0Y29uc3QgZXJyb3JNZXNzYWdlID0gYFVwZGF0ZSBtYWp1cml0eXMgZmFpbGVkIE1hbGZvcm1lZCBmcm9udGFtdHRlciBvbiB0aGlzIGZpbGUgOiAke2ZpbGUucGF0aH0gJHtlLm1lc3NhZ2V9YDtcclxuXHRcdFx0XHRcdG5ldyBOb3RpY2UoZXJyb3JNZXNzYWdlLCA0MDAwKTtcclxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyb3JNZXNzYWdlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmIChwb2ludHNSZWNlaXZlZCA+IDApIHtcclxuXHRcdFx0bGV0IGJvb3N0ZXJGYWN0b3IgPSAxO1xyXG5cdFx0XHRpZiAodGhpcy5zZXR0aW5ncy5iYWRnZUJvb3N0ZXJTdGF0ZSl7XHJcblx0XHRcdFx0Ym9vc3RlckZhY3RvciA9IHRoaXMuc2V0dGluZ3MuYmFkZ2VCb29zdGVyRmFjdG9yO1xyXG5cdFx0XHR9XHJcblx0XHRcdG5ldyBOb3RpY2UoYCR7cG9pbnRzUmVjZWl2ZWQgKiBib29zdGVyRmFjdG9yfSBQb2ludHMgcmVjZWl2ZWRgKVxyXG5cdFx0XHRjb25zb2xlLmxvZyhgJHtwb2ludHNSZWNlaXZlZCAqIGJvb3N0ZXJGYWN0b3J9IFBvaW50cyByZWNlaXZlZGApXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSW5zaWRlIHlvdXIgZnVuY3Rpb24gd2hlcmUgeW91IHdhbnQgdG8gaW50cm9kdWNlIGEgZGVsYXlcclxuXHRcdHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHQvLyBDb2RlIHRoYXQgeW91IHdhbnQgdG8gZXhlY3V0ZSBhZnRlciB0aGUgZGVsYXlcclxuXHRcdFx0Y29uc3QgaW5pdEJhZGdlOiBCYWRnZSA9IGdldEJhZGdlRm9ySW5pdExldmVsKHRoaXMuc2V0dGluZ3Muc3RhdHVzTGV2ZWwpO1xyXG5cdFx0XHRuZXcgTm90aWNlKGBZb3UndmUgZWFybmVkIHRoZSBcIiR7aW5pdEJhZGdlLm5hbWV9XCIgYmFkZ2UuICR7aW5pdEJhZGdlLmRlc2NyaXB0aW9ufWApXHJcblx0XHRcdGNvbnNvbGUubG9nKGBZb3UgZWFybmVkICR7aW5pdEJhZGdlLm5hbWV9IC0gJHtpbml0QmFkZ2UuZGVzY3JpcHRpb259YClcclxuXHRcdFx0YXdhaXQgdGhpcy5naXZlSW5pdEJhZGdlSW5Qcm9maWxlKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUsIGluaXRCYWRnZSk7XHJcblx0XHRcdGF3YWl0IHRoaXMucmVtb3ZlQmFkZ2VzV2hlbkluaXRMZXZlbEhpZ2hlcih0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lLCB0aGlzLnNldHRpbmdzLnN0YXR1c0xldmVsKVxyXG5cdFx0XHRhd2FpdCB0aGlzLmJvb3N0ZXJGb3JJbml0KClcclxuXHRcdFx0YXdhaXQgdGhpcy51cGRhdGVTdGF0dXNCYXIoc3RhdHVzYmFyR2FtaWZpY2F0aW9uKVxyXG5cdFx0fSwgMjAwMCk7IC8vIDIwMDAgbWlsbGlzZWNvbmRzID0gMiBzZWNvbmRzXHJcblxyXG5cdFx0bmV3IE1vZGFsSW5mb3JtYXRpb25ib3godGhpcy5hcHAsIGBGaW5hbGxpemVkIGdhbWlmaWNhdGlvbiBpbml0aWFsaXN0YXRpb24hXFxuQ29uZ3JhdHVsYXRpb24sIHlvdSBlYXJuZWQgJHtwb2ludHNSZWNlaXZlZH0gUG9pbnRzIVxcblxcbkNoZWNrIHRoZSBQcm9maWxlIFBhZ2U6IFwiJHt0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lfS5tZFwiXFxuXFxuWW91IHJlY2VpdmVkIGFuIGluaXRpYWxpc2F0aW9uIEJvb3N0ZXIgYWt0aXYgZm9yIHlvdXIgZmlyc3QgbGV2ZWwgdXBzLiBHYW1lIG9uIWApLm9wZW4oKTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgd3JpdGVGcm9udG1hdHRlcihmcm9udG1hdHRlcjogYW55LCBmaWxlTmFtZVJhdGU6IG51bWJlciwgcmF0ZUZpbGVMZW5ndGg6IG51bWJlciwgaW5saW5rQ2xhc3M6IG51bWJlciwgcmF0ZU91dDogbnVtYmVyLCByYXRlUHJvZ3Jlc3NpdmVTdW06IG51bWJlciwgbm90ZU1hanVyaXR5OiBudW1iZXIpIHtcclxuXHRcdGZyb250bWF0dGVyWyd0aXRsZS1jbGFzcyddID0gcmF0ZURpcmVjdGlvbihmcm9udG1hdHRlclsndGl0bGUtY2xhc3MnXSwgZmlsZU5hbWVSYXRlKVxyXG5cdFx0ZnJvbnRtYXR0ZXJbJ25vdGUtbGVuZ3RoLWNsYXNzJ10gPSByYXRlRGlyZWN0aW9uKGZyb250bWF0dGVyWydub3RlLWxlbmd0aC1jbGFzcyddLCByYXRlRmlsZUxlbmd0aClcclxuXHRcdGZyb250bWF0dGVyWydpbmxpbmstY2xhc3MnXSA9IHJhdGVEaXJlY3Rpb24oZnJvbnRtYXR0ZXJbJ2lubGluay1jbGFzcyddLCBpbmxpbmtDbGFzcylcclxuXHRcdGZyb250bWF0dGVyWydvdXRsaW5rLWNsYXNzJ10gPSByYXRlRGlyZWN0aW9uKGZyb250bWF0dGVyWydvdXRsaW5rLWNsYXNzJ10sIHJhdGVPdXQpXHJcblx0XHRmcm9udG1hdHRlclsncHJvZ3Jlc3NpdmUtc3VtbWFyaXphdGlvbi1tYXR1cml0eSddID0gcmF0ZURpcmVjdGlvbihmcm9udG1hdHRlclsncHJvZ3Jlc3NpdmUtc3VtbWFyaXphdGlvbi1tYXR1cml0eSddLCByYXRlUHJvZ3Jlc3NpdmVTdW0pXHJcblx0XHRmcm9udG1hdHRlclsnbm90ZS1tYXR1cml0eSddID0gcmF0ZURpcmVjdGlvbihmcm9udG1hdHRlclsnbm90ZS1tYXR1cml0eSddLCBub3RlTWFqdXJpdHkpXHJcblx0fVxyXG5cclxuXHRvbnVubG9hZCgpIHtcclxuXHRcdGNvbnNvbGUubG9nKCdvYnNpZGlhbi1wa20tZ2FtaWZpY2F0aW9uIHVubG9hZGVkIScpO1xyXG5cclxuXHRcdC8vIENsZWFyIHRoZSB0aW1lciB3aGVuIHRoZSBwbHVnaW4gaXMgdW5sb2FkZWRcclxuXHRcdGlmICh0aGlzLnRpbWVySWQgIT09IG51bGwpIHtcclxuXHRcdFx0Y2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVySWQpO1xyXG5cdFx0XHR0aGlzLnRpbWVySWQgPSBudWxsO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgY2FsY3VsYXRlTm90ZU1hanVyaXR5KCl7XHJcblx0XHRjb25zdCBmaWxlOiBURmlsZSB8IG51bGw9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XHJcblx0XHRpZiAoZmlsZSA9PSBudWxsKSB7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ2dvdCBubyBmaWxlLCBwcm9wYWJseSBub25lIGlzIGFjdGl2ZScpXHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IGRldGVjdElmTm90ZUlzRmlyc3RUaW1lUmF0ZWQgPSBmYWxzZTtcclxuXHJcblx0XHQvLyBnZXQgZmlsZSBjb250ZW50IGxlbmd0aFxyXG5cdFx0Y29uc3QgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XHJcblx0XHRjb25zdCBmaWxlQ29udGVudHMgPSBhY3RpdmVWaWV3Py5lZGl0b3IuZ2V0VmFsdWUoKTtcclxuXHRcdGNvbnN0IGZpbGVOYW1lID0gYWN0aXZlVmlldz8uZmlsZS5iYXNlbmFtZTtcclxuXHJcblx0XHRsZXQgcmF0ZUZpbGVMZW5ndGggPSAwO1xyXG5cdFx0bGV0IGZpbGVMZW5ndGggPSAwO1xyXG5cdFx0bGV0IHJhdGVQcm9ncmVzc2l2ZVN1bSA9IDA7XHJcblxyXG5cdFx0aWYgKGZpbGVDb250ZW50cyAhPT0gdW5kZWZpbmVkICYmIGZpbGVOYW1lICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0ZmlsZUxlbmd0aCA9IGNvdW50Q2hhcmFjdGVyc0luQWN0aXZlRmlsZShmaWxlQ29udGVudHMsIGZpbGVOYW1lKTtcclxuXHRcdFx0cmF0ZUZpbGVMZW5ndGggPSByYXRlTm90ZUxlbmd0aChmaWxlTGVuZ3RoKTtcclxuXHJcblx0XHRcdC8vIENoZWNrIGlmIGZpbGVDb250ZW50cyBhbmQgZmlsZU5hbWUgYXJlIG5vdCBudWxsXHJcblx0XHRcdGlmIChmaWxlQ29udGVudHMgIT09IG51bGwgJiYgZmlsZU5hbWUgIT09IG51bGwpIHtcclxuXHRcdFx0XHRjb25zdCB7IGNoYXJDb3VudCwgaGlnaGxpZ2h0ZWRDb3VudCwgYm9sZENvdW50IH0gPSBjb3VudExheWVyMkFuZExheWVyM0NoYXJhY3RlcnMoZmlsZUNvbnRlbnRzLCBmaWxlTmFtZSwgdGhpcy5zZXR0aW5ncy5wcm9ncmVzc2l2ZVN1bUxheWVyMiwgdGhpcy5zZXR0aW5ncy5wcm9ncmVzc2l2ZVN1bUxheWVyMyk7XHJcblx0XHRcdFx0cmF0ZVByb2dyZXNzaXZlU3VtID0gcmF0ZVByb2dyZXNzaXZlU3VtbWFyaXphdGlvbihjaGFyQ291bnQsIGhpZ2hsaWdodGVkQ291bnQsIGJvbGRDb3VudCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRsZXQgZmlsZU5hbWVSYXRlID0gMDtcclxuXHRcdGxldCBpbmxpbmtOdW1iZXIgPSAwO1xyXG5cdFx0bGV0IGlubGlua0NsYXNzID0gMDtcclxuXHRcdGxldCByYXRlT3V0ID0gMDtcclxuXHJcblx0XHRpZiAoZmlsZSAhPT0gbnVsbCkge1xyXG5cdFx0XHRmaWxlTmFtZVJhdGUgPSByYXRlTGVuZ3RoRmlsZW5hbWUoZmlsZS5uYW1lID8/ICcnKTtcclxuXHRcdFx0aW5saW5rTnVtYmVyID0gY291bnRfaW5saW5rcyhmaWxlKTtcclxuXHRcdFx0aW5saW5rQ2xhc3MgPSByYXRlSW5saW5rcyhpbmxpbmtOdW1iZXIpLy8sIG51bUFsbEZpbGVzKVxyXG5cdFx0XHRyYXRlT3V0ID0gcmF0ZU91dGxpbmtzKGdldE51bWJlck9mT3V0bGlua3MoZmlsZSkpO1xyXG5cclxuXHRcdFx0Y29uc3Qgbm90ZU1hanVyaXR5ID0gcmF0ZUxldmVsT2ZNYXR1cml0eShyYXRlRmlsZUxlbmd0aCwgZmlsZU5hbWVSYXRlLCBpbmxpbmtDbGFzcywgcmF0ZU91dCwgcmF0ZVByb2dyZXNzaXZlU3VtKTtcclxuXHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0YXdhaXQgdGhpcy5hcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKGZpbGUsIChmcm9udG1hdHRlcikgPT4ge1xyXG5cdFx0XHRcdFx0aWYgKGZyb250bWF0dGVyKSB7XHJcblx0XHRcdFx0XHRcdGxldCBwb2ludHNSZWNlaXZlZCA9IDA7IC8vIHRvIGhhdmUgb25lIG1lc3NhZ2UgYXQgdGhlIGVuZCBob3cgbWFueSBwb2ludHMgcmVjZWl2ZWRcclxuXHRcdFx0XHRcdFx0aWYgKHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ25vdGUtbWF0dXJpdHknXSwgbm90ZU1hanVyaXR5KSA+PSAxKXtcclxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhgbm90ZS1tYXR1cml0eSA+PTFgKVxyXG5cdFx0XHRcdFx0XHRcdHBvaW50c1JlY2VpdmVkICs9IHBvaW50c05vdGVNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydub3RlLW1hdHVyaXR5J10sIG5vdGVNYWp1cml0eSlcclxuXHRcdFx0XHRcdFx0XHRjb25zdCBuZXdMZXZlbCA9IHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyhwb2ludHNOb3RlTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiZnJvbnRtYXR0ZXJbJ25vdGUtbWF0dXJpdHknXVwiLCBub3RlTWFqdXJpdHkpKVxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuZGVjaXNpb25JZkJhZGdlKG5ld0xldmVsKVxyXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCEoJ25vdGUtbWF0dXJpdHknIGluIGZyb250bWF0dGVyKSl7XHJcblx0XHRcdFx0XHRcdFx0cG9pbnRzUmVjZWl2ZWQgKz0gcG9pbnRzTm90ZU1hanVyaXR5KnJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoXCIwXCIsIG5vdGVNYWp1cml0eSlcclxuXHRcdFx0XHRcdFx0XHRjb25zdCBuZXdMZXZlbCA9IHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyhwb2ludHNOb3RlTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCBub3RlTWFqdXJpdHkpKVxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuZGVjaXNpb25JZkJhZGdlKG5ld0xldmVsKTtcclxuXHRcdFx0XHRcdFx0XHRkZXRlY3RJZk5vdGVJc0ZpcnN0VGltZVJhdGVkID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgKHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ3RpdGxlLWNsYXNzJ10sIGZpbGVOYW1lUmF0ZSkgPj0gMSAmJiAndGl0bGUtY2xhc3MnIGluIGZyb250bWF0dGVyKXtcclxuXHRcdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWyd0aXRsZS1jbGFzcyddLCBmaWxlTmFtZVJhdGUpXHJcblx0XHRcdFx0XHRcdFx0Y29uc3QgbmV3TGV2ZWwgPSB0aGlzLmdpdmVTdGF0dXNQb2ludHMocG9pbnRzTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWyd0aXRsZS1jbGFzcyddLCBmaWxlTmFtZVJhdGUpKVxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuZGVjaXNpb25JZkJhZGdlKG5ld0xldmVsKVxyXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCEoJ3RpdGxlLWNsYXNzJyBpbiBmcm9udG1hdHRlcikpe1xyXG5cdFx0XHRcdFx0XHRcdHBvaW50c1JlY2VpdmVkICs9IHBvaW50c01hanVyaXR5KnJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoXCIwXCIsIGZpbGVOYW1lUmF0ZSlcclxuXHRcdFx0XHRcdFx0XHRjb25zdCBuZXdMZXZlbCA9IHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyhwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoXCIwXCIsIGZpbGVOYW1lUmF0ZSkpXHJcblx0XHRcdFx0XHRcdFx0dGhpcy5kZWNpc2lvbklmQmFkZ2UobmV3TGV2ZWwpXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdGlmIChyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydub3RlLWxlbmd0aC1jbGFzcyddLCByYXRlRmlsZUxlbmd0aCkgPj0gMSl7XHJcblx0XHRcdFx0XHRcdFx0cG9pbnRzUmVjZWl2ZWQgKz0gcG9pbnRzTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnbm90ZS1sZW5ndGgtY2xhc3MnXSwgcmF0ZUZpbGVMZW5ndGgpXHJcblx0XHRcdFx0XHRcdFx0Y29uc3QgbmV3TGV2ZWwgPSB0aGlzLmdpdmVTdGF0dXNQb2ludHMocG9pbnRzTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydub3RlLWxlbmd0aC1jbGFzcyddLCByYXRlRmlsZUxlbmd0aCkpXHJcblx0XHRcdFx0XHRcdFx0dGhpcy5kZWNpc2lvbklmQmFkZ2UobmV3TGV2ZWwpXHJcblx0XHRcdFx0XHRcdH1lbHNlIGlmICghKCdub3RlLWxlbmd0aC1jbGFzcycgaW4gZnJvbnRtYXR0ZXIpKXtcclxuXHRcdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCByYXRlRmlsZUxlbmd0aClcclxuXHRcdFx0XHRcdFx0XHRjb25zdCBuZXdMZXZlbCA9IHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyhwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoXCIwXCIsIHJhdGVGaWxlTGVuZ3RoKSlcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmRlY2lzaW9uSWZCYWRnZShuZXdMZXZlbClcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgKHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ2lubGluay1jbGFzcyddLCBpbmxpbmtDbGFzcykgPj0gMSl7XHJcblx0XHRcdFx0XHRcdFx0cG9pbnRzUmVjZWl2ZWQgKz0gcG9pbnRzTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnaW5saW5rLWNsYXNzJ10sIGlubGlua0NsYXNzKVxyXG5cdFx0XHRcdFx0XHRcdGNvbnN0IG5ld0xldmVsID0gdGhpcy5naXZlU3RhdHVzUG9pbnRzKHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnaW5saW5rLWNsYXNzJ10sIGlubGlua0NsYXNzKSlcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmRlY2lzaW9uSWZCYWRnZShuZXdMZXZlbClcclxuXHRcdFx0XHRcdFx0fWVsc2UgaWYgKCEoJ2lubGluay1jbGFzcycgaW4gZnJvbnRtYXR0ZXIpKXtcclxuXHRcdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCBpbmxpbmtDbGFzcylcclxuXHRcdFx0XHRcdFx0XHRjb25zdCBuZXdMZXZlbCA9IHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyhwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoXCIwXCIsIGlubGlua0NsYXNzKSlcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmRlY2lzaW9uSWZCYWRnZShuZXdMZXZlbClcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgKHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ291dGxpbmstY2xhc3MnXSwgcmF0ZU91dCkgPj0gMSl7XHJcblx0XHRcdFx0XHRcdFx0cG9pbnRzUmVjZWl2ZWQgKz0gcG9pbnRzTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnb3V0bGluay1jbGFzcyddLCByYXRlT3V0KVxyXG5cdFx0XHRcdFx0XHRcdGNvbnN0IG5ld0xldmVsID0gdGhpcy5naXZlU3RhdHVzUG9pbnRzKHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnb3V0bGluay1jbGFzcyddLCByYXRlT3V0KSlcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmRlY2lzaW9uSWZCYWRnZShuZXdMZXZlbClcclxuXHRcdFx0XHRcdFx0fWVsc2UgaWYgKCEoJ291dGxpbmstY2xhc3MnIGluIGZyb250bWF0dGVyKSl7XHJcblx0XHRcdFx0XHRcdFx0cG9pbnRzUmVjZWl2ZWQgKz0gcG9pbnRzTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhcIjBcIiwgcmF0ZU91dClcclxuXHRcdFx0XHRcdFx0XHRjb25zdCBuZXdMZXZlbCA9IHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyhwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoXCIwXCIsIHJhdGVPdXQpKVxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuZGVjaXNpb25JZkJhZGdlKG5ld0xldmVsKVxyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAocmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsncHJvZ3Jlc3NpdmUtc3VtbWFyaXphdGlvbi1tYXR1cml0eSddLCByYXRlUHJvZ3Jlc3NpdmVTdW0pID49IDEpe1xyXG5cdFx0XHRcdFx0XHRcdHBvaW50c1JlY2VpdmVkICs9IHBvaW50c01hanVyaXR5KnJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ3Byb2dyZXNzaXZlLXN1bW1hcml6YXRpb24tbWF0dXJpdHknXSwgcmF0ZVByb2dyZXNzaXZlU3VtKVxyXG5cdFx0XHRcdFx0XHRcdGNvbnN0IG5ld0xldmVsID0gdGhpcy5naXZlU3RhdHVzUG9pbnRzKHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsncHJvZ3Jlc3NpdmUtc3VtbWFyaXphdGlvbi1tYXR1cml0eSddLCByYXRlUHJvZ3Jlc3NpdmVTdW0pKVxyXG5cdFx0XHRcdFx0XHRcdHRoaXMuZGVjaXNpb25JZkJhZGdlKG5ld0xldmVsKVxyXG5cdFx0XHRcdFx0XHR9ZWxzZSBpZiAoISgncHJvZ3Jlc3NpdmUtc3VtbWFyaXphdGlvbi1tYXR1cml0eScgaW4gZnJvbnRtYXR0ZXIpKXtcclxuXHRcdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydwcm9ncmVzc2l2ZS1zdW1tYXJpemF0aW9uLW1hdHVyaXR5J10sIHJhdGVQcm9ncmVzc2l2ZVN1bSlcclxuXHRcdFx0XHRcdFx0XHRjb25zdCBuZXdMZXZlbCA9IHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyhwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoXCIwXCIsIHJhdGVQcm9ncmVzc2l2ZVN1bSkpXHJcblx0XHRcdFx0XHRcdFx0dGhpcy5kZWNpc2lvbklmQmFkZ2UobmV3TGV2ZWwpXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coYHBvaW50c1JlY2VpdmVkOiAke3BvaW50c1JlY2VpdmVkfWApXHJcblx0XHRcdFx0XHRcdGlmIChwb2ludHNSZWNlaXZlZCA+IDApe1xyXG5cdFx0XHRcdFx0XHRcdGNvbnN0IG1lc3NhZ2VQb2ludHMgPSBnZXRSYW5kb21NZXNzYWdlUG9pbnRzKHBvaW50c1JlY2VpdmVkICogdGhpcy5zZXR0aW5ncy5iYWRnZUJvb3N0ZXJGYWN0b3IpXHJcblx0XHRcdFx0XHRcdFx0bmV3IE5vdGljZShtZXNzYWdlUG9pbnRzKVxyXG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKG1lc3NhZ2VQb2ludHMpXHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHRoaXMud3JpdGVGcm9udG1hdHRlcihmcm9udG1hdHRlciwgZmlsZU5hbWVSYXRlLCByYXRlRmlsZUxlbmd0aCwgaW5saW5rQ2xhc3MsIHJhdGVPdXQsIHJhdGVQcm9ncmVzc2l2ZVN1bSwgbm90ZU1hanVyaXR5KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRcdGlmIChlPy5uYW1lID09PSAnWUFNTFBhcnNlRXJyb3InKSB7XHJcblx0XHRcdFx0XHRjb25zdCBlcnJvck1lc3NhZ2UgPSBgVXBkYXRlIG1hanVyaXR5cyBmYWlsZWQgTWFsZm9ybWVkIGZyb250YW10dGVyIG9uIHRoaXMgZmlsZSA6ICR7ZmlsZS5wYXRofSAke2UubWVzc2FnZX1gO1xyXG5cdFx0XHRcdFx0bmV3IE5vdGljZShlcnJvck1lc3NhZ2UsIDQwMDApO1xyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihlcnJvck1lc3NhZ2UpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRuZXcgTm90aWNlKCdub3RlIG1hanVyaXR5IHVwZGF0ZWQhJyk7XHJcblx0XHRcdGNvbnNvbGUubG9nKCdub3RlIG1hanVyaXR5IHVwZGF0ZWQhJylcclxuXHRcdFx0Ly9hd2FpdCB0aGlzLnVwZGF0ZUF2YXRhclBhZ2UodGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSlcclxuXHRcdFx0YXdhaXQgdGhpcy51cGRhdGVTdGF0dXNCYXIodGhpcy5zdGF0dXNiYXJHYW1pZmljYXRpb24pXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKCdmaWxlIHdhcyBub3QgZm91bmQgdG8gY2FsY3VsYXRlIG1hanVyaXRpZXMuIE1ha2Ugc3VyZSBvbmUgaXMgYWN0aXZlLicpXHJcblx0XHR9XHJcblx0XHRpZiAoZGV0ZWN0SWZOb3RlSXNGaXJzdFRpbWVSYXRlZCl7XHJcblx0XHRcdGF3YWl0IHRoaXMuaW5jcmVhc2VEYWlseUNyZWF0ZWROb3RlQ291bnQoKTtcclxuXHRcdFx0YXdhaXQgdGhpcy5pbmNyZWFzZVdlZWtseUNyZWF0ZWROb3RlQ291bnQoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cclxuXHRhc3luYyByZXNldERhaWx5R29hbHMoKXtcclxuXHRcdGxldCByZXNldCA9IGZhbHNlO1xyXG5cdFx0aWYoIWlzU2FtZURheSh3aW5kb3cubW9tZW50KHRoaXMuc2V0dGluZ3MuZGFpbHlOb3RlQ3JlYXRpb25EYXRlLCAnREQuTU0uWVlZWScpKSl7XHJcblx0XHRcdHRoaXMuc2V0dGluZ3MuZGFpbHlOb3RlQ3JlYXRpb25UYXNrID0gMDtcclxuXHRcdFx0dGhpcy5zZXR0aW5ncy5kYWlseU5vdGVDcmVhdGlvbkRhdGUgPSB3aW5kb3cubW9tZW50KCkuZm9ybWF0KCdERC5NTS5ZWVlZJylcclxuXHRcdFx0YXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0Y29uc29sZS5sb2coYGRhaWx5IENoYWxsZW5nZSByZXNldGVkYClcclxuXHRcdFx0cmVzZXQgPSB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0aWYoIWlzT25lRGF5QmVmb3JlKHdpbmRvdy5tb21lbnQodGhpcy5zZXR0aW5ncy53ZWVrbHlOb3RlQ3JlYXRpb25EYXRlLCAnREQuTU0uWVlZWScpKSAmJiAhaXNTYW1lRGF5KHdpbmRvdy5tb21lbnQodGhpcy5zZXR0aW5ncy53ZWVrbHlOb3RlQ3JlYXRpb25EYXRlLCAnREQuTU0uWVlZWScpKSl7XHJcblx0XHRcdHRoaXMuc2V0dGluZ3Mud2Vla2x5Tm90ZUNyZWF0aW9uVGFzayA9IDA7XHJcblx0XHRcdHRoaXMuc2V0dGluZ3Mud2Vla2x5Tm90ZUNyZWF0aW9uRGF0ZSA9IHdpbmRvdy5tb21lbnQoKS5zdWJ0cmFjdCgxLCAnZGF5JykuZm9ybWF0KCdERC5NTS5ZWVlZJylcclxuXHRcdFx0YXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0Y29uc29sZS5sb2coYHdlZWtseSBDaGFsbGVuZ2UgcmVzZXRlZGApXHJcblx0XHRcdHJlc2V0ID0gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdGlmKGlzT25lRGF5QmVmb3JlKHdpbmRvdy5tb21lbnQodGhpcy5zZXR0aW5ncy53ZWVrbHlOb3RlQ3JlYXRpb25EYXRlLCAnREQuTU0uWVlZWScpKSAmJiB0aGlzLnNldHRpbmdzLndlZWtseU5vdGVDcmVhdGlvblRhc2sgPT0gNyl7XHJcblx0XHRcdHRoaXMuc2V0dGluZ3Mud2Vla2x5Tm90ZUNyZWF0aW9uVGFzayA9IDA7XHJcblx0XHRcdHRoaXMuc2V0dGluZ3Mud2Vla2x5Tm90ZUNyZWF0aW9uRGF0ZSA9IHdpbmRvdy5tb21lbnQoKS5zdWJ0cmFjdCgxLCAnZGF5JykuZm9ybWF0KCdERC5NTS5ZWVlZJylcclxuXHRcdFx0YXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0cmVzZXQgPSB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHJlc2V0KXtcclxuXHRcdFx0Ly90aGlzLmRhaWx5Q2hhbGxlbmdlVXBkYXRlUHJvZmlsZSh0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lLCAwKVxyXG5cdFx0XHRhd2FpdCB0aGlzLnVwZGF0ZUF2YXRhclBhZ2UodGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSk7XHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0YXN5bmMgaW5jcmVhc2VEYWlseUNyZWF0ZWROb3RlQ291bnQoKXtcclxuXHRcdGxldCBuZXdEYWlseU5vdGVDcmVhdGlvblRhc2sgPSB0aGlzLnNldHRpbmdzLmRhaWx5Tm90ZUNyZWF0aW9uVGFzaztcclxuICAgICAgICBpZiAobmV3RGFpbHlOb3RlQ3JlYXRpb25UYXNrIDwgMil7XHJcblx0XHRcdG5ld0RhaWx5Tm90ZUNyZWF0aW9uVGFzayArKztcclxuXHRcdFx0dGhpcy5zZXR0aW5ncy5kYWlseU5vdGVDcmVhdGlvblRhc2sgPSBuZXdEYWlseU5vdGVDcmVhdGlvblRhc2s7XHJcblx0XHRcdGF3YWl0IHRoaXMuc2F2ZVNldHRpbmdzKCk7XHJcblxyXG5cdFx0XHRpZihuZXdEYWlseU5vdGVDcmVhdGlvblRhc2sgPT0gMSl7XHJcblx0XHRcdFx0Ly8gdXBkYXRlIEF2YXRhciBQYWdlXHJcblx0XHRcdFx0YXdhaXQgdGhpcy51cGRhdGVBdmF0YXJQYWdlKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUpO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGAke25ld0RhaWx5Tm90ZUNyZWF0aW9uVGFza30vMiBOb3RlcyBjcmVhdGVkIHRvZGF5LmApXHJcblx0XHRcdH0gZWxzZSBpZiAobmV3RGFpbHlOb3RlQ3JlYXRpb25UYXNrID09IDIpIHtcclxuXHRcdFx0XHRhd2FpdCB0aGlzLmdpdmVTdGF0dXNQb2ludHMocG9pbnRzRm9yRGFpbHlDaGFsbGVuZ2UpXHJcblx0XHRcdFx0Y29uc3QgbWVzc2FnZSA9IGdldFJhbmRvbU1lc3NhZ2VUd29Ob3RlQ2hhbGxlbmdlKHBvaW50c0ZvckRhaWx5Q2hhbGxlbmdlKTtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhgZGFpbHkgQ2hhbGxlbmdlIHJlYWNoZWQhICR7bmV3RGFpbHlOb3RlQ3JlYXRpb25UYXNrfS8yIGNyZWF0ZWQuYClcclxuXHRcdFx0XHRuZXcgTm90aWNlKG1lc3NhZ2UpXHJcblx0XHRcdFx0Y29uc29sZS5sb2cobWVzc2FnZSlcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBub3RoaW5nIGVsc2UgdG8gZG8gaGVyZVxyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGAke25ld0RhaWx5Tm90ZUNyZWF0aW9uVGFza30vMiBOb3RlcyBjcmVhdGVkIHRvZGF5LmApXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGFzeW5jIGluY3JlYXNlV2Vla2x5Q3JlYXRlZE5vdGVDb3VudCgpe1xyXG5cdFx0aWYoaXNPbmVEYXlCZWZvcmUod2luZG93Lm1vbWVudCh0aGlzLnNldHRpbmdzLndlZWtseU5vdGVDcmVhdGlvbkRhdGUsICdERC5NTS5ZWVlZJykpKXtcclxuXHRcdFx0YXdhaXQgdGhpcy5jaGVja0ZvcldlZWtseU5vdGVDaGFsbGVuZ2VCZWxvdzcoKTtcclxuXHRcdH0gZWxzZSBpZiAoaXNTYW1lRGF5KHdpbmRvdy5tb21lbnQodGhpcy5zZXR0aW5ncy53ZWVrbHlOb3RlQ3JlYXRpb25EYXRlLCAnREQuTU0uWVlZWScpKSl7XHJcblx0XHRcdC8vIGRvIG5vdGhpbmdcclxuXHRcdFx0Y29uc29sZS5sb2coYGRhaWx5IG5vdGUgY3JlYXRpb24gd2FzIHJhdGVkIGFscmVhZHkgdG9kYXkuYClcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuc2V0dGluZ3Mud2Vla2x5Tm90ZUNyZWF0aW9uRGF0ZSA9IHdpbmRvdy5tb21lbnQoKS5mb3JtYXQoJ0RELk1NLllZWVknKVxyXG5cdFx0XHR0aGlzLnNldHRpbmdzLndlZWtseU5vdGVDcmVhdGlvblRhc2sgPSAxO1xyXG5cdFx0XHRhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBhc3luYyBjaGVja0ZvcldlZWtseU5vdGVDaGFsbGVuZ2VCZWxvdzcoKSB7XHJcblx0XHRsZXQgY3VycmVudFdlZWtseUNyZWF0ZWROb3RlcyA9IHRoaXMuc2V0dGluZ3Mud2Vla2x5Tm90ZUNyZWF0aW9uVGFzaztcclxuXHRcdGlmIChjdXJyZW50V2Vla2x5Q3JlYXRlZE5vdGVzIDwgNykge1xyXG5cdFx0XHRjdXJyZW50V2Vla2x5Q3JlYXRlZE5vdGVzKys7XHJcblx0XHRcdHRoaXMuc2V0dGluZ3Mud2Vla2x5Tm90ZUNyZWF0aW9uRGF0ZSA9IHdpbmRvdy5tb21lbnQoKS5mb3JtYXQoJ0RELk1NLllZWVknKVxyXG5cdFx0XHR0aGlzLnNldHRpbmdzLndlZWtseU5vdGVDcmVhdGlvblRhc2sgPSBjdXJyZW50V2Vla2x5Q3JlYXRlZE5vdGVzO1xyXG5cdFx0XHRhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpO1xyXG5cclxuXHRcdFx0YXdhaXQgdGhpcy5jaGVja0ZvcldlZWtseU5vdGVDaGFsbGVuZ2VFdmFsdWF0aW9uKGN1cnJlbnRXZWVrbHlDcmVhdGVkTm90ZXMpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHJpdmF0ZSBhc3luYyBjaGVja0ZvcldlZWtseU5vdGVDaGFsbGVuZ2VFdmFsdWF0aW9uKG5ld1dlZWtseU5vdGVDcmVhdGlvblRhc2s6IG51bWJlcikge1xyXG5cdFx0aWYgKG5ld1dlZWtseU5vdGVDcmVhdGlvblRhc2sgPD0gNikge1xyXG5cdFx0XHQvLyB1cGRhdGUgQXZhdGFyIFBhZ2VcclxuXHRcdFx0YXdhaXQgdGhpcy51cGRhdGVBdmF0YXJQYWdlKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhgJHtuZXdXZWVrbHlOb3RlQ3JlYXRpb25UYXNrfS83IE5vdGVzIGNyZWF0ZWQgaW4gYSBjaGFpbi5gKVxyXG5cdFx0fSBlbHNlIGlmIChuZXdXZWVrbHlOb3RlQ3JlYXRpb25UYXNrID09IDcpIHtcclxuXHRcdFx0YXdhaXQgdGhpcy5naXZlU3RhdHVzUG9pbnRzKHBvaW50c0ZvcldlZWtseUNoYWxsZW5nZSlcclxuXHRcdFx0Y29uc29sZS5sb2coYFdlZWtseSBDaGFsbGVuZ2UgcmVhY2hlZCEgJHtuZXdXZWVrbHlOb3RlQ3JlYXRpb25UYXNrfS83IGNyZWF0ZWQgaW4gYSBjaGFpbi5gKVxyXG5cdFx0XHRjb25zdCBtZXNzYWdlID0gZ2V0UmFuZG9tTWVzc2FnZVdlZWtseUNoYWxsZW5nZShwb2ludHNGb3JXZWVrbHlDaGFsbGVuZ2UpO1xyXG5cdFx0XHRuZXcgTm90aWNlKG1lc3NhZ2UpXHJcblx0XHRcdGNvbnNvbGUubG9nKG1lc3NhZ2UpXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBub3RoaW5nIGVsc2UgdG8gZG8gaGVyZVxyXG5cdFx0XHRjb25zb2xlLmxvZyhgJHtuZXdXZWVrbHlOb3RlQ3JlYXRpb25UYXNrfS83IE5vdGVzIGNyZWF0ZWQgaW4gYSBjaGFpbi5gKVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgdXBkYXRlU3RhdHVzQmFyKHN0YXR1c2JhcjogSFRNTFNwYW5FbGVtZW50KXtcclxuXHRcdGNvbnN0IGN1cnJlbnRMZXZlbCA9IGdldExldmVsRm9yUG9pbnRzKHRoaXMuc2V0dGluZ3Muc3RhdHVzUG9pbnRzKVxyXG5cdFx0Y29uc3QgcHJvZ3Jlc3NiYXJQZXJjZW50ID0gKHRoaXMuc2V0dGluZ3Muc3RhdHVzUG9pbnRzIC0gY3VycmVudExldmVsLnBvaW50cykvKGN1cnJlbnRMZXZlbC5wb2ludHNOZXh0IC0gY3VycmVudExldmVsLnBvaW50cykqMTAwO1xyXG5cdFx0Y29uc3QgY2hhck51bVByb2dyZXNzYmFyID0gMTBcclxuXHRcdGNvbnN0IGJhckxlbmd0aCA9IE1hdGgucm91bmQocHJvZ3Jlc3NiYXJQZXJjZW50IC8gY2hhck51bVByb2dyZXNzYmFyKVxyXG5cdFx0c3RhdHVzYmFyLnNldFRleHQoYFx1RDgzQ1x1REZCMnxsdmw6ICR7dGhpcy5zZXR0aW5ncy5zdGF0dXNMZXZlbH0gfCAke3RoaXMuY3JlYXRlUHJvZ3Jlc3NiYXIoY2hhck51bVByb2dyZXNzYmFyLCBiYXJMZW5ndGgpfWApXHJcblx0fVxyXG5cclxuXHRwcml2YXRlIGNyZWF0ZVByb2dyZXNzYmFyKGNoYXJOdW1Qcm9ncmVzc2JhcjogbnVtYmVyLCBiYXJMZW5ndGg6IG51bWJlcikge1xyXG5cdFx0bGV0IHByb2dyZXNzYmFyID0gJydcclxuXHRcdGZvciAobGV0IGkgPSAxOyBpIDw9IGNoYXJOdW1Qcm9ncmVzc2JhcjsgaSsrKSB7XHJcblx0XHRcdGlmIChpIDw9IGJhckxlbmd0aCkge1xyXG5cdFx0XHRcdHByb2dyZXNzYmFyICs9ICc9J1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHByb2dyZXNzYmFyICs9ICctJ1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcHJvZ3Jlc3NiYXI7XHJcblx0fVxyXG5cclxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFNldHRpbmdzLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xyXG5cdFx0Y29uc29sZS5sb2coJ2xvYWRTZXR0aW5ncygpJylcclxuXHR9XHJcblxyXG5cclxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG5cdH1cclxuXHJcblxyXG5cdGFzeW5jIGdpdmVTdGF0dXNQb2ludHMocG9pbnRzVG9BZGQ6IG51bWJlcik6IFByb21pc2U8Ym9vbGVhbj57XHJcblx0XHRsZXQgYm9vc3RlckZhY3RvciA9IDE7XHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5iYWRnZUJvb3N0ZXJTdGF0ZSl7XHJcblx0XHRcdGJvb3N0ZXJGYWN0b3IgPSB0aGlzLnNldHRpbmdzLmJhZGdlQm9vc3RlckZhY3RvcjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnNldHRpbmdzLnN0YXR1c1BvaW50cyA9IHBvaW50c1RvQWRkICogYm9vc3RlckZhY3RvciArIHRoaXMuc2V0dGluZ3Muc3RhdHVzUG9pbnRzXHJcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpXHJcblxyXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlQXZhdGFyUGFnZSh0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lKVxyXG5cdH1cclxuXHJcblxyXG5cdGFzeW5jIHVwZGF0ZUF2YXRhclBhZ2UoYXZhdGFyUGFnZU5hbWU6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj57XHJcblx0XHRjb25zdCBleGlzdGluZ0ZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGAke2F2YXRhclBhZ2VOYW1lfS5tZGApO1xyXG5cdFx0aWYgKGV4aXN0aW5nRmlsZSA9PSBudWxsKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKGBGaWxlICR7YXZhdGFyUGFnZU5hbWV9Lm1kIGRvZXMgbm90IGV4aXN0YCk7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdGNvbnN0IGZpbGUgPSBleGlzdGluZ0ZpbGUgYXMgVEZpbGU7XHJcblxyXG5cdFx0Ly9jb25zb2xlLmxvZyhgY3VycmVudCBzdGF0dXNQb2ludHM6ICR7dGhpcy5zZXR0aW5ncy5zdGF0dXNQb2ludHN9YClcclxuXHRcdGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBhcHAudmF1bHQucmVhZChmaWxlKTtcclxuXHRcdGxldCByZWZlcmVuY2U6IG51bWJlciB8IG51bGwgPSBudWxsO1xyXG5cdFx0bGV0IHJlZmVyZW5jZTI6IG51bWJlciB8IG51bGwgPSBudWxsO1xyXG5cdFx0bGV0IHJlZmVyZW5jZTM6IG51bWJlciB8IG51bGwgPSBudWxsO1xyXG5cdFx0bGV0IGVuZDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcblx0XHRsZXQgc3RhcnQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xyXG5cdFx0bGV0IGVuZDI6IG51bWJlciB8IG51bGwgPSBudWxsO1xyXG5cdFx0bGV0IHN0YXJ0MjogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcblx0XHRsZXQgZW5kMzogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcblx0XHRsZXQgc3RhcnQzOiBudW1iZXIgfCBudWxsID0gbnVsbDtcclxuXHJcblx0XHRjb25zdCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoXCJcXG5cIik7XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGNvbnN0IGxpbmUgPSBsaW5lc1tpXS50cmltKCk7XHJcblx0XHRcdGlmIChsaW5lID09PSBcIl5sZXZlbEFuZFBvaW50c1wiKSB7XHJcblx0XHRcdFx0aWYgKHJlZmVyZW5jZSA9PT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0cmVmZXJlbmNlID0gaTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKGxpbmUgPT09IFwiXmRhaWx5Tm90ZXNDaGFsbGVuZ2VcIikge1xyXG5cdFx0XHRcdGlmIChyZWZlcmVuY2UyID09PSBudWxsKSB7XHJcblx0XHRcdFx0XHRyZWZlcmVuY2UyID0gaTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKGxpbmUgPT09IFwiXndlZWtseU5vdGVzQ2hhbGxlbmdlXCIpIHtcclxuXHRcdFx0XHRpZiAocmVmZXJlbmNlMyA9PT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0cmVmZXJlbmNlMyA9IGk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHQvLyByZWFkIGN1cnJlbnQgUG9pbnRzIGZyb20gc2V0dGluZ3NcclxuXHRcdGNvbnN0IG5ld1BvaW50cyA9IHRoaXMuc2V0dGluZ3Muc3RhdHVzUG9pbnRzXHJcblxyXG5cdFx0Y29uc3QgbGV2ZWwgPSBnZXRMZXZlbEZvclBvaW50cyhuZXdQb2ludHMpO1xyXG5cdFx0bGV0IG5leHRMZXZlbEF0ID0gdGhpcy5zZXR0aW5ncy54cEZvck5leHRMZXZlbDtcclxuXHRcdGxldCByZWNlaXZlQmFkZ2UgPSBmYWxzZVxyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3Muc3RhdHVzTGV2ZWwgPCBsZXZlbC5sZXZlbCl7XHJcblx0XHRcdC8vIExldmVsIFVwIGFyY2hpdmVkXHJcblx0XHRcdG5ldyBOb3RpY2UoYFdpdGggJHtuZXdQb2ludHN9IHBvaW50cywgdGhlIGN1cnJlbnQgbGV2ZWwgaXMgJHtsZXZlbC5sZXZlbH0uYClcclxuXHRcdFx0Ly8gY2hlY2sgZmlyc3QgaWYgdGhpcyBtZWFucyBhIG5ldyBiYWRnZSBiZWZvcmUgaXQgZ2V0cyBvdmVyd3JpdHRlblxyXG5cdFx0XHRyZWNlaXZlQmFkZ2UgPSBjaGVja0lmUmVjZWl2ZUFCYWRnZSh0aGlzLnNldHRpbmdzLnN0YXR1c0xldmVsLCBsZXZlbC5sZXZlbClcclxuXHRcdFx0dGhpcy5zZXR0aW5ncy5zdGF0dXNMZXZlbCA9IGxldmVsLmxldmVsO1xyXG5cdFx0XHRuZXh0TGV2ZWxBdCA9IGxldmVsLnBvaW50c05leHQ7XHJcblx0XHRcdHRoaXMuc2V0dGluZ3MueHBGb3JOZXh0TGV2ZWwgPSBsZXZlbC5wb2ludHNOZXh0O1xyXG5cdFx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgcHJvZ3Jlc3NCYXJFbmQgPSBuZXh0TGV2ZWxBdCAtIG5ld1BvaW50cztcclxuXHRcdGNvbnN0IG5ld1BvaW50c1N0cmluZyA9ICd8ICoqTGV2ZWwqKiAgfCAqKicgKyBsZXZlbC5sZXZlbCArICcqKiB8XFxufCBQb2ludHMgfCAnICsgbmV3UG9pbnRzICsgJyAgICB8XFxuXmxldmVsQW5kUG9pbnRzXFxuYGBgY2hhcnRcXG50eXBlOiBiYXJcXG5sYWJlbHM6IFtFeHByaXJpZW5jZV1cXG5zZXJpZXM6XFxuICAtIHRpdGxlOiBwb2ludHMgcmVhY2hlZFxcbiAgICBkYXRhOiBbJyArIG5ld1BvaW50cyArICddXFxuICAtIHRpdGxlOiBwb2ludHMgdG8gZWFybiB0byBsZXZlbCB1cFxcbiAgICBkYXRhOiBbJyArIHByb2dyZXNzQmFyRW5kICsgJ11cXG54TWluOiAnICsgbGV2ZWwucG9pbnRzICsgJ1xcbnhNYXg6ICcgKyBsZXZlbC5wb2ludHNOZXh0ICsgJ1xcbnRlbnNpb246IDAuMlxcbndpZHRoOiA0MCVcXG5sYWJlbENvbG9yczogZmFsc2VcXG5maWxsOiBmYWxzZVxcbmJlZ2luQXRaZXJvOiBmYWxzZVxcbmJlc3RGaXQ6IGZhbHNlXFxuYmVzdEZpdFRpdGxlOiB1bmRlZmluZWRcXG5iZXN0Rml0TnVtYmVyOiAwXFxuc3RhY2tlZDogdHJ1ZVxcbmluZGV4QXhpczogeVxcbnhUaXRsZTogXCJwcm9ncmVzc1wiXFxubGVnZW5kOiBmYWxzZVxcbmBgYCdcclxuXHRcdGNvbnN0IGRhaWx5Q2hhbGxlbmdlID0gJ3wgKipkYWlseSBOb3RlcyoqIHwgKjUwMEVQKiB8ICoqJyArIHRoaXMuc2V0dGluZ3MuZGFpbHlOb3RlQ3JlYXRpb25UYXNrICsgJy8yKiogICB8JztcclxuXHRcdGNvbnN0IGRheXNMZWZ0SW5XZWVrbHlDaGFpbiA6IG51bWJlciA9IDcgLSB0aGlzLnNldHRpbmdzLndlZWtseU5vdGVDcmVhdGlvblRhc2s7XHJcblx0XHRjb25zdCB3ZWVrbHlDaGFsbGVuZ2UgPSAnfCAqKndlZWtseSBOb3RlcyoqIHwgKjIwMDBFUCogICAgIHwgICoqJyArIHRoaXMuc2V0dGluZ3Mud2Vla2x5Tm90ZUNyZWF0aW9uVGFzayArICcvNyoqICAgfFxcbl53ZWVrbHlOb3Rlc0NoYWxsZW5nZVxcbmBgYGNoYXJ0XFxudHlwZTogYmFyXFxubGFiZWxzOiBbZGF5cyBkb25lIGluIGEgcm93XVxcbnNlcmllczpcXG4gIC0gdGl0bGU6IGRheXMgdG8gZG8gaW4gYSByb3dcXG4gICAgZGF0YTogWycgKyB0aGlzLnNldHRpbmdzLndlZWtseU5vdGVDcmVhdGlvblRhc2sgKyAnXVxcbiAgLSB0aXRsZTogcG9pbnRzIHRvIGVhcm4gdG8gbGV2ZWwgdXBcXG4gICAgZGF0YTogWycgKyBkYXlzTGVmdEluV2Vla2x5Q2hhaW4gKyAnXVxcbnhNaW46IDBcXG54TWF4OiA3XFxudGVuc2lvbjogMC4yXFxud2lkdGg6IDQwJVxcbmxhYmVsQ29sb3JzOiBmYWxzZVxcbmZpbGw6IGZhbHNlXFxuYmVnaW5BdFplcm86IGZhbHNlXFxuYmVzdEZpdDogZmFsc2VcXG5iZXN0Rml0VGl0bGU6IHVuZGVmaW5lZFxcbmJlc3RGaXROdW1iZXI6IDBcXG5zdGFja2VkOiB0cnVlXFxuaW5kZXhBeGlzOiB5XFxueFRpdGxlOiBcInByb2dyZXNzXCJcXG5sZWdlbmQ6IGZhbHNlXFxuYGBgJztcclxuXHJcblx0XHRpZiAocmVmZXJlbmNlICE9IG51bGwgJiYgcmVmZXJlbmNlMiAhPSBudWxsICYmIHJlZmVyZW5jZTMgIT0gbnVsbCl7XHJcblx0XHRcdHN0YXJ0ID0gcmVmZXJlbmNlIC0gMjtcclxuXHRcdFx0ZW5kID0gcmVmZXJlbmNlICsgMjQ7XHJcblx0XHRcdHN0YXJ0MiA9IHJlZmVyZW5jZTIgLSAxIC0gMjU7IC8vIG5vIGlkZWEgd2J5IG9mZnNldCAyNSBpcyBuZWVkZWRcclxuXHRcdFx0ZW5kMiA9IHJlZmVyZW5jZTIgLSAyNTsgLy8gbm8gaWRlYSB3Ynkgb2Zmc2V0IDI1IGlzIG5lZWRlZFxyXG5cdFx0XHRzdGFydDMgPSByZWZlcmVuY2UzIC0gMSAtMjU7IC8vIG5vIGlkZWEgd2J5IG9mZnNldCAyNSBpcyBuZWVkZWRcclxuXHRcdFx0ZW5kMyA9IHJlZmVyZW5jZTMgKyAyNCAtMjU7IC8vIG5vIGlkZWEgd2J5IG9mZnNldCAyNSBpcyBuZWVkZWRcclxuXHJcblxyXG5cdFx0XHRjb25zdCBuZXdMaW5lcyA9IFsuLi5saW5lcy5zbGljZSgwLCBzdGFydCksIG5ld1BvaW50c1N0cmluZywgLi4ubGluZXMuc2xpY2UoZW5kKV07XHJcblx0XHRcdGNvbnN0IG5ld0xpbmVzMiA9IFsuLi5uZXdMaW5lcy5zbGljZSgwLCBzdGFydDIpLCBkYWlseUNoYWxsZW5nZSwgLi4ubmV3TGluZXMuc2xpY2UoZW5kMildO1xyXG5cdFx0XHRjb25zdCBuZXdMaW5lczMgPSBbLi4ubmV3TGluZXMyLnNsaWNlKDAsIHN0YXJ0MyksIHdlZWtseUNoYWxsZW5nZSwgLi4ubmV3TGluZXMyLnNsaWNlKGVuZDMpXTtcclxuXHRcdFx0YXdhaXQgYXBwLnZhdWx0Lm1vZGlmeShmaWxlLCBuZXdMaW5lczMuam9pbihcIlxcblwiKSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVjZWl2ZUJhZGdlXHJcblx0fVxyXG5cclxuXHJcblx0YXN5bmMgZ2l2ZUJhZGdlSW5Qcm9maWxlKGF2YXRhclBhZ2VOYW1lOiBzdHJpbmcsIGJhZGdlOiBCYWRnZSl7XHJcblx0XHRjb25zdCBleGlzdGluZ0ZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGAke2F2YXRhclBhZ2VOYW1lfS5tZGApO1xyXG5cdFx0aWYgKGV4aXN0aW5nRmlsZSA9PSBudWxsKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKGBGaWxlICR7YXZhdGFyUGFnZU5hbWV9Lm1kIGRvZXMgbm90IGV4aXN0YCk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGNvbnN0IGZpbGUgPSBleGlzdGluZ0ZpbGUgYXMgVEZpbGU7XHJcblxyXG5cdFx0Y29uc3QgY29udGVudCA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGZpbGUpO1xyXG5cdFx0bGV0IHJlZmVyZW5jZTogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcblx0XHRsZXQgcmVmZXJlbmNlMjogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcblx0XHRsZXQgZW5kOiBudW1iZXIgfCBudWxsID0gbnVsbDtcclxuXHRcdGxldCBzdGFydDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcblx0XHRsZXQgZW5kMjogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcblx0XHRsZXQgc3RhcnQyOiBudW1iZXIgfCBudWxsID0gbnVsbDtcclxuXHJcblx0XHRjb25zdCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoXCJcXG5cIik7XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGNvbnN0IGxpbmUgPSBsaW5lc1tpXS50cmltKCk7XHJcblx0XHRcdGlmIChsaW5lID09PSBcIiMjIyMgYWNoaWV2ZWRcIikge1xyXG5cdFx0XHRcdGlmIChyZWZlcmVuY2UgPT09IG51bGwpIHtcclxuXHRcdFx0XHRcdHJlZmVyZW5jZSA9IGk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChsaW5lID09PSBiYWRnZS5sZXZlbCArIFwiOiAqXCIgKyBiYWRnZS5uYW1lICsgXCIqXCIpe1xyXG5cdFx0XHRcdGlmIChyZWZlcmVuY2UyID09PSBudWxsKSB7XHJcblx0XHRcdFx0XHRyZWZlcmVuY2UyID0gaTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmIChyZWZlcmVuY2UgIT0gbnVsbCAmJiByZWZlcmVuY2UyICE9IG51bGwpe1xyXG5cdFx0XHRlbmQgPSByZWZlcmVuY2UgKyAxO1xyXG5cdFx0XHRzdGFydCA9IHJlZmVyZW5jZSArIDE7XHJcblxyXG5cdFx0XHRlbmQyID0gcmVmZXJlbmNlMiArIDI7XHJcblx0XHRcdHN0YXJ0MiA9IHJlZmVyZW5jZTIgKyAxO1xyXG5cclxuXHRcdFx0Y29uc3QgYmFkZ2VTdHJpbmcgPSBcIioqXCIgKyBiYWRnZS5uYW1lICsgXCIqKiBcIiArIGJhZGdlLmxldmVsICsgXCJcXG4+IFwiICsgYmFkZ2UuZGVzY3JpcHRpb24gKyBcIiAtICpcIiArIHdpbmRvdy5tb21lbnQoKS5mb3JtYXQoJ0QuTS5ZWScpICsgXCIqXFxuXCJcclxuXHRcdFx0Y29uc3QgbmV3TGluZXMgPSBbLi4ubGluZXMuc2xpY2UoMCwgc3RhcnQpLCBiYWRnZVN0cmluZywgLi4ubGluZXMuc2xpY2UoZW5kKV07XHJcblx0XHRcdGNvbnN0IG5ld0xpbmVzMiA9IFsuLi5uZXdMaW5lcy5zbGljZSgwLCBzdGFydDIpLCAuLi5uZXdMaW5lcy5zbGljZShlbmQyKV1cclxuXHRcdFx0YXdhaXQgYXBwLnZhdWx0Lm1vZGlmeShmaWxlLCBuZXdMaW5lczIuam9pbihcIlxcblwiKSk7XHJcblx0XHRcdGNvbnNvbGUubG9nKGBiYWRnZVN0cmluZzogJHtiYWRnZVN0cmluZ31gKVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgZ2l2ZUluaXRCYWRnZUluUHJvZmlsZShhdmF0YXJQYWdlTmFtZTogc3RyaW5nLCBiYWRnZTogQmFkZ2Upe1xyXG5cdFx0Y29uc3QgZXhpc3RpbmdGaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChgJHthdmF0YXJQYWdlTmFtZX0ubWRgKTtcclxuXHRcdGlmIChleGlzdGluZ0ZpbGUgPT0gbnVsbCkge1xyXG5cdFx0XHRjb25zb2xlLmxvZyhgRmlsZSAke2F2YXRhclBhZ2VOYW1lfS5tZCBkb2VzIG5vdCBleGlzdGApO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRjb25zdCBmaWxlID0gZXhpc3RpbmdGaWxlIGFzIFRGaWxlO1xyXG5cclxuXHRcdGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBhcHAudmF1bHQucmVhZChmaWxlKTtcclxuXHRcdGxldCByZWZlcmVuY2U6IG51bWJlciB8IG51bGwgPSBudWxsO1xyXG5cdFx0bGV0IGVuZDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcblx0XHRsZXQgc3RhcnQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xyXG5cclxuXHRcdGNvbnN0IGxpbmVzID0gY29udGVudC5zcGxpdChcIlxcblwiKTtcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0Y29uc3QgbGluZSA9IGxpbmVzW2ldLnRyaW0oKTtcclxuXHRcdFx0aWYgKGxpbmUgPT09IFwiIyMjIyBhY2hpZXZlZFwiKSB7XHJcblx0XHRcdFx0aWYgKHJlZmVyZW5jZSA9PT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0cmVmZXJlbmNlID0gaTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmIChyZWZlcmVuY2UgIT0gbnVsbCApe1xyXG5cdFx0XHRlbmQgPSByZWZlcmVuY2UgKyAyO1xyXG5cdFx0XHRzdGFydCA9IHJlZmVyZW5jZSArIDE7XHJcblxyXG5cdFx0XHRjb25zdCBiYWRnZVN0cmluZyA9IFwiKipcIiArIGJhZGdlLm5hbWUgKyBcIioqXFxuPiBcIiArIGJhZGdlLmRlc2NyaXB0aW9uICsgXCIgLSAqXCIgKyB3aW5kb3cubW9tZW50KCkuZm9ybWF0KCdELk0uWVknKSArIFwiKlxcblwiXHJcblx0XHRcdGNvbnN0IG5ld0xpbmVzID0gWy4uLmxpbmVzLnNsaWNlKDAsIHN0YXJ0KSwgYmFkZ2VTdHJpbmcsIC4uLmxpbmVzLnNsaWNlKGVuZCldO1xyXG5cdFx0XHRhd2FpdCBhcHAudmF1bHQubW9kaWZ5KGZpbGUsIG5ld0xpbmVzLmpvaW4oXCJcXG5cIikpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhgYmFkZ2VTdHJpbmc6ICR7YmFkZ2VTdHJpbmd9YClcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGFzeW5jIHJlbW92ZUJhZGdlc1doZW5Jbml0TGV2ZWxIaWdoZXIoYXZhdGFyUGFnZU5hbWU6IHN0cmluZywgbGV2ZWw6IG51bWJlcil7XHJcblx0XHRjb25zdCBleGlzdGluZ0ZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGAke2F2YXRhclBhZ2VOYW1lfS5tZGApO1xyXG5cdFx0aWYgKGV4aXN0aW5nRmlsZSA9PSBudWxsKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKGBGaWxlICR7YXZhdGFyUGFnZU5hbWV9Lm1kIGRvZXMgbm90IGV4aXN0YCk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGNvbnN0IGZpbGUgPSBleGlzdGluZ0ZpbGUgYXMgVEZpbGU7XHJcblxyXG5cdFx0Y29uc3QgY29udGVudCA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGZpbGUpO1xyXG5cdFx0bGV0IHJlZmVyZW5jZTogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcblx0XHRsZXQgcmVmZXJlbmNlMjogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcblxyXG5cdFx0Y29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KFwiXFxuXCIpO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRjb25zdCBsaW5lID0gbGluZXNbaV0udHJpbSgpO1xyXG5cdFx0XHRpZiAobGluZSA9PT0gXCIjIyMjIG91dHN0YW5kaW5nXCIpIHtcclxuXHRcdFx0XHRpZiAocmVmZXJlbmNlID09PSBudWxsKSB7XHJcblx0XHRcdFx0XHRyZWZlcmVuY2UgPSBpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAocmVmZXJlbmNlICE9IG51bGwgJiYgcmVmZXJlbmNlMiA9PSBudWxsKXtcclxuXHRcdFx0XHQvLyBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggdGhlIGxldmVsIG51bWJlclxyXG5cdFx0XHRcdGNvbnN0IGxldmVsUmVnZXggPSAvbGV2ZWwgKFxcZCspLztcclxuXHRcdFx0XHQvLyBFeHRyYWN0IHRoZSBsZXZlbCBudW1iZXIgdXNpbmcgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvblxyXG5cdFx0XHRcdGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaChsZXZlbFJlZ2V4KTtcclxuXHJcblx0XHRcdFx0aWYobWF0Y2gpe1xyXG5cdFx0XHRcdFx0Y29uc3QgbGV2ZWxOdW1iZXIgPSBwYXJzZUludChtYXRjaFsxXSwgMTApOyAvLyBDb252ZXJ0IHRoZSBtYXRjaGVkIG51bWJlciB0byBhbiBpbnRlZ2VyXHJcblx0XHRcdFx0XHRpZiAobGV2ZWxOdW1iZXIgPiBsZXZlbCkge1xyXG5cdFx0XHRcdFx0XHRyZWZlcmVuY2UyID0gaVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYgKHJlZmVyZW5jZSAhPSBudWxsICYmIHJlZmVyZW5jZTIgIT0gbnVsbCl7XHJcblx0XHRcdGNvbnN0IG5ld0xpbmVzID0gWy4uLmxpbmVzLnNsaWNlKDAsIHJlZmVyZW5jZSArIDEpLCAuLi5saW5lcy5zbGljZShyZWZlcmVuY2UyKV07XHJcblx0XHRcdGF3YWl0IGFwcC52YXVsdC5tb2RpZnkoZmlsZSwgbmV3TGluZXMuam9pbihcIlxcblwiKSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHJcblx0YXN5bmMgY3JlYXRlQ2hhcnQodmF1bHQ6IFZhdWx0KTogUHJvbWlzZTxzdHJpbmc+e1xyXG5cdFx0Y29uc3QgZmlsZXMgPSB2YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XHJcblx0XHRjb25zdCBlYXJsaWVzdEZpbGUgPSBmaW5kRWFybGllc3RNb2RpZmllZEZpbGUoZmlsZXMpXHJcblx0XHQvL2xldCBlYXJsaWVzdERhdGUgPSBlYXJsaWVzdEZpbGUuc3RhdC5jdGltZVxyXG5cdFx0Ly9pZiAoZWFybGllc3RGaWxlLnN0YXQubXRpbWUgPCBlYXJsaWVzdEZpbGUuc3RhdC5jdGltZSApe1xyXG5cdFx0Y29uc3QgZWFybGllc3REYXRlID0gZWFybGllc3RGaWxlLnN0YXQubXRpbWVcclxuXHRcdC8vfVxyXG5cclxuXHRcdGxldCBtb250aENvdW50ZXIgPSAwIC8vZm9ybWF0KG5ldyBEYXRlKGVhcmxpZXN0RGF0ZSksICdNTScpO1xyXG5cdFx0bGV0IGRhdGVDb3VudCA9IG5ldyBEYXRlKGVhcmxpZXN0RGF0ZSk7IC8vIHVtIGVzIGhvY2h6XHUwMEU0aGxlbiB6dSBrXHUwMEY2bm5lblxyXG5cdFx0Ly9jb25zdCBmaWxlRGF0ZU1vbnRoTWFwID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcclxuXHRcdGNvbnN0IGZpbGVEYXRlTW9udGhNYXBNb2QgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xyXG5cdFx0Y29uc3QgbW9udGhjb3VudCA9IG1vbnRoc0JldHdlZW4obmV3IERhdGUoZWFybGllc3REYXRlKSwgbmV3IERhdGUoKSlcclxuXHRcdGxldCBkYXRlU3RyaW5nID0gZGF0ZUNvdW50LmdldE1vbnRoKCkrMSArIFwiLlwiICsgZGF0ZUNvdW50LmdldEZ1bGxZZWFyKClcclxuXHRcdGxldCB5TGFiZWwgPSBcIlwiXHJcblx0XHQvLyBjcmVhdGUgQmFzZSBmb3IgY291bnRpbmcgY3JlYXRlZFxyXG5cdFx0Lyp3aGlsZSAobW9udGhDb3VudGVyIDwgbW9udGhjb3VudCl7XHJcblx0XHRcdGRhdGVTdHJpbmcgPSBkYXRlQ291bnQuZ2V0TW9udGgoKSsxICsgXCIuXCIgKyBkYXRlQ291bnQuZ2V0RnVsbFllYXIoKVxyXG5cdFx0XHQvL2NvbnNvbGUubG9nKGBkYXRlU3RyaW5nOiAke2RhdGVTdHJpbmd9YClcclxuXHRcdFx0ZGF0ZUNvdW50LnNldE1vbnRoKGRhdGVDb3VudC5nZXRNb250aCgpICsgMSlcclxuXHRcdFx0bW9udGhDb3VudGVyICs9IDE7XHJcblx0XHRcdGZpbGVEYXRlTW9udGhNYXAuc2V0KGRhdGVTdHJpbmcsIDApXHJcblx0XHR9Ki9cclxuXHJcblx0XHRtb250aENvdW50ZXIgPSAwXHJcblx0XHRkYXRlQ291bnQgPSBuZXcgRGF0ZShlYXJsaWVzdERhdGUpOyAvLyB1bSBlcyBob2Noelx1MDBFNGhsZW4genUga1x1MDBGNm5uZW5cclxuXHRcdGRhdGVTdHJpbmcgPSBkYXRlQ291bnQuZ2V0TW9udGgoKSsxICsgXCIuXCIgKyBkYXRlQ291bnQuZ2V0RnVsbFllYXIoKVxyXG5cdFx0Ly8gY3JlYXRlIEJhc2UgZm9yIGNvdW50aW5nIG1vZGlmaWVkXHJcblx0XHR3aGlsZSAobW9udGhDb3VudGVyIDwgbW9udGhjb3VudCl7XHJcblx0XHRcdGRhdGVTdHJpbmcgPSBkYXRlQ291bnQuZ2V0TW9udGgoKSsxICsgXCIuXCIgKyBkYXRlQ291bnQuZ2V0RnVsbFllYXIoKVxyXG5cdFx0XHQvL2NvbnNvbGUubG9nKGBkYXRlU3RyaW5nOiAke2RhdGVTdHJpbmd9YClcclxuXHRcdFx0eUxhYmVsID0geUxhYmVsICsgZGF0ZVN0cmluZyArIFwiLCBcIlxyXG5cdFx0XHRkYXRlQ291bnQuc2V0TW9udGgoZGF0ZUNvdW50LmdldE1vbnRoKCkgKyAxKVxyXG5cdFx0XHRtb250aENvdW50ZXIgKz0gMTtcclxuXHRcdFx0ZmlsZURhdGVNb250aE1hcE1vZC5zZXQoZGF0ZVN0cmluZywgMClcclxuXHRcdH1cclxuXHRcdHlMYWJlbCA9IHlMYWJlbC5zbGljZSgwLHlMYWJlbC5sZW5ndGgtMilcclxuXHJcblx0XHQvLyBjb3VudCBob3cgbWFueSBmaWxlcyBpbiBlYWNoIG1vbnRoXHJcblx0XHQvKmNvbnN0IGNyZWF0aW9uRGF0ZXMgPSBnZXRDcmVhdGlvbkRhdGVzKGZpbGVzKVxyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjcmVhdGlvbkRhdGVzLmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0Ly9maWxlRGF0ZU1vbnRoTWFwLnNldChmb3JtYXQoY3JlYXRpb25EYXRlc1tpXSwgJ00ueXl5eScpLGZpbGVEYXRlTW9udGhNYXAuZ2V0KGZvcm1hdChjcmVhdGlvbkRhdGVzW2ldLCAnTS55eXl5JykpKzEpXHJcblx0XHRcdGNvbnN0IGZvcm1hdHRlZERhdGUgPSBmb3JtYXQoY3JlYXRpb25EYXRlc1tpXSwgJ00ueXl5eScpO1xyXG5cdFx0XHRjb25zdCBjdXJyZW50Q291bnQgPSBmaWxlRGF0ZU1vbnRoTWFwLmdldChmb3JtYXR0ZWREYXRlKTtcclxuXHJcblx0XHRcdGlmIChjdXJyZW50Q291bnQgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdGZpbGVEYXRlTW9udGhNYXAuc2V0KGZvcm1hdHRlZERhdGUsIGN1cnJlbnRDb3VudCArIDEpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdC8vIElmIHRoZSBrZXkgZG9lc24ndCBleGlzdCBpbiB0aGUgbWFwLCBpbml0aWFsaXplIGl0IHdpdGggYSBjb3VudCBvZiAxXHJcblx0XHRcdFx0ZmlsZURhdGVNb250aE1hcC5zZXQoZm9ybWF0dGVkRGF0ZSwgMSk7XHJcblx0XHRcdH1cclxuXHRcdH0qL1xyXG5cclxuXHRcdC8vIGNvdW50IGhvdyBtYW55IG1vZCBmaWxlcyBpbiBlYWNoIG1vbnRoXHJcblx0XHRjb25zdCBtb2RpZmljYXRpb25EYXRlcyA9IGdldE1vZGlmaWNhdGlvbkRhdGVzKGZpbGVzKVxyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBtb2RpZmljYXRpb25EYXRlcy5sZW5ndGg7IGkrKyl7XHJcblx0XHRcdC8vZmlsZURhdGVNb250aE1hcE1vZC5zZXQoZm9ybWF0KG1vZGlmaWNhdGlvbkRhdGVzW2ldLCAnTS55eXl5JyksZmlsZURhdGVNb250aE1hcE1vZC5nZXQoZm9ybWF0KG1vZGlmaWNhdGlvbkRhdGVzW2ldLCAnTS55eXl5JykpKzEpXHJcblx0XHRcdGNvbnN0IGZvcm1hdHRlZERhdGUgPSBmb3JtYXQobW9kaWZpY2F0aW9uRGF0ZXNbaV0sICdNLnl5eXknKTtcclxuXHRcdFx0Y29uc3QgY3VycmVudENvdW50ID0gZmlsZURhdGVNb250aE1hcE1vZC5nZXQoZm9ybWF0dGVkRGF0ZSk7XHJcblxyXG5cdFx0XHRpZiAoY3VycmVudENvdW50ICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRmaWxlRGF0ZU1vbnRoTWFwTW9kLnNldChmb3JtYXR0ZWREYXRlLCBjdXJyZW50Q291bnQgKyAxKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBJZiB0aGUga2V5IGRvZXNuJ3QgZXhpc3QgaW4gdGhlIG1hcCwgaW5pdGlhbGl6ZSBpdCB3aXRoIGEgY291bnQgb2YgMVxyXG5cdFx0XHRcdGZpbGVEYXRlTW9udGhNYXBNb2Quc2V0KGZvcm1hdHRlZERhdGUsIDEpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gYnVpbGQgQ2hhcnQgU3RyaW5nIGNyZWF0ZWRcclxuXHRcdC8qbGV0IGNoYXJTdHJpbmdDcmVhdGVkID0gXCJcIlxyXG5cdFx0Zm9yIChjb25zdCBbdmFsdWVdIG9mIGZpbGVEYXRlTW9udGhNYXApIHtcclxuXHRcdFx0Y2hhclN0cmluZ0NyZWF0ZWQgPSBjaGFyU3RyaW5nQ3JlYXRlZCArIHZhbHVlICsgXCIsIFwiXHJcblx0XHR9XHJcblx0XHRjaGFyU3RyaW5nQ3JlYXRlZCA9IGNoYXJTdHJpbmdDcmVhdGVkLnNsaWNlKDAsY2hhclN0cmluZ0NyZWF0ZWQubGVuZ3RoLTIpKi9cclxuXHJcblx0XHQvLyBidWlsZCBDaGFydCBTdHJpbmcgbW9kaWZpZWRcclxuXHRcdGxldCBjaGFyU3RyaW5nTW9kaWZpZWQgPSBcIlwiXHJcblx0XHRmb3IgKGNvbnN0IFt2YWx1ZV0gb2YgZmlsZURhdGVNb250aE1hcE1vZCkge1xyXG5cdFx0XHQvL2NvbnNvbGUubG9nKGBrZXk6ICR7a2V5fSwgdmFsdWU6ICR7dmFsdWV9YCk7XHJcblx0XHRcdGNoYXJTdHJpbmdNb2RpZmllZCA9IGNoYXJTdHJpbmdNb2RpZmllZCArIHZhbHVlICsgXCIsIFwiXHJcblx0XHR9XHJcblx0XHRjaGFyU3RyaW5nTW9kaWZpZWQgPSBjaGFyU3RyaW5nTW9kaWZpZWQuc2xpY2UoMCxjaGFyU3RyaW5nTW9kaWZpZWQubGVuZ3RoLTIpXHJcblxyXG5cdFx0cmV0dXJuIGNyZWF0ZUNoYXJ0Rm9ybWF0KHlMYWJlbCwgY2hhclN0cmluZ01vZGlmaWVkLCB0aGlzLnNldHRpbmdzLmNoYXJ0UmVkdXppZXJ1bmdNb25hdGUpXHJcblx0fVxyXG5cclxuXHRhc3luYyBkZWNpc2lvbklmQmFkZ2UobmV3TGV2ZWw6IFByb21pc2U8Ym9vbGVhbj4pe1xyXG5cdFx0bmV3TGV2ZWwudGhlbigocmVzdWx0OiBib29sZWFuKT0+IHtcclxuXHRcdFx0aWYocmVzdWx0KXtcclxuXHRcdFx0XHRjb25zdCBiYWRnZSA6IEJhZGdlID0gZ2V0QmFkZ2VGb3JMZXZlbCh0aGlzLnNldHRpbmdzLnN0YXR1c0xldmVsLCBmYWxzZSlcclxuXHRcdFx0XHRuZXcgTm90aWNlKGBZb3UndmUgZWFybmVkIHRoZSBcIiR7YmFkZ2UubmFtZX1cIiBiYWRnZS4gJHtiYWRnZS5kZXNjcmlwdGlvbn1gKVxyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGBZb3UndmUgZWFybmVkIHRoZSBcIiR7YmFkZ2UubmFtZX1cIiBiYWRnZS4gJHtiYWRnZS5kZXNjcmlwdGlvbn1gKVxyXG5cdFx0XHRcdC8vY29uc29sZS5sb2coYGJhZGdlIGZvciBsZXZlbCAke3RoaXMuc2V0dGluZ3Muc3RhdHVzTGV2ZWx9IGlzICR7YmFkZ2UubmFtZX0gLSAke2JhZGdlLmxldmVsfWApXHJcblx0XHRcdFx0dGhpcy5naXZlQmFkZ2VJblByb2ZpbGUodGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSwgYmFkZ2UpXHJcblx0XHRcdFx0dGhpcy5zZXR0aW5ncy5iYWRnZUJvb3N0ZXJTdGF0ZSA9IGZhbHNlO1xyXG5cdFx0XHRcdHRoaXMuc2V0dGluZ3MuYmFkZ2VCb29zdGVyRmFjdG9yID0gMTtcclxuXHRcdFx0XHR0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpXHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblxyXG5cdGFzeW5jIHJlbW92ZUtleXNGcm9tRnJvbnRtYXR0ZXIoKSB7XHJcblx0XHQvL2NvbnN0IHsgVmF1bHQsIFRGaWxlIH0gPSB3aW5kb3cuYXBwO1xyXG5cdFx0Y29uc3QgeyB2YXVsdCB9ID0gdGhpcy5hcHBcclxuXHRcdC8vY29uc3QgdmF1bHQgPSBWYXVsdC5yZW9wZW4oKTtcclxuXHJcblx0XHQvLyBHZXQgYWxsIE1hcmtkb3duIGZpbGVzIGluIHRoZSB2YXVsdFxyXG5cdFx0Ly9jb25zdCBtYXJrZG93bkZpbGVzID0gdmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xyXG5cdFx0Y29uc3QgZmlsZUNvdW50TWFwID0gYXdhaXQgZ2V0RmlsZUNvdW50TWFwKHRoaXMuYXBwLCB0aGlzLnNldHRpbmdzLnRhZ3NFeGNsdWRlLCB0aGlzLnNldHRpbmdzLmZvbGRlckV4Y2x1ZGUpO1xyXG5cdFx0Zm9yIChjb25zdCBmaWxlTmFtZSBvZiBmaWxlQ291bnRNYXAua2V5cygpKSB7XHJcblx0XHRcdGNvbnN0IGZpbGVzID0gdmF1bHQuZ2V0RmlsZXMoKTtcclxuXHRcdFx0Y29uc3QgZmlsZSA9IGZpbGVzLmZpbmQoZmlsZSA9PiBmaWxlLmJhc2VuYW1lID09PSBmaWxlTmFtZSk7XHJcblx0XHRcdGlmICghZmlsZSkge1xyXG5cdFx0XHRcdGNvbnNvbGUud2FybihgRmlsZSAke2ZpbGVOYW1lfSBub3QgZm91bmQuYCk7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly9jb25zdCBmaWxlQ29udGVudHMgPSBhd2FpdCBhcHAudmF1bHQucmVhZChmaWxlKTtcclxuXHRcdFx0Y29uc29sZS5sb2coYFByb2Nlc3NpbmcgZmlsZSAke2ZpbGVOYW1lfWApO1xyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdGF3YWl0IHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnByb2Nlc3NGcm9udE1hdHRlcihmaWxlLCAoZnJvbnRtYXR0ZXIpID0+IHtcclxuXHRcdFx0XHRcdGRlbGV0ZSBmcm9udG1hdHRlclsndGl0bGUtY2xhc3MnXVxyXG5cdFx0XHRcdFx0ZGVsZXRlIGZyb250bWF0dGVyWydub3RlLWxlbmd0aC1jbGFzcyddXHJcblx0XHRcdFx0XHRkZWxldGUgZnJvbnRtYXR0ZXJbJ2lubGluay1jbGFzcyddXHJcblx0XHRcdFx0XHRkZWxldGUgZnJvbnRtYXR0ZXJbJ291dGxpbmstY2xhc3MnXVxyXG5cdFx0XHRcdFx0ZGVsZXRlIGZyb250bWF0dGVyWydwcm9ncmVzc2l2ZS1zdW1tYXJpemF0aW9uLW1hdHVyaXR5J11cclxuXHRcdFx0XHRcdGRlbGV0ZSBmcm9udG1hdHRlclsnbm90ZS1tYXR1cml0eSddXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0XHRpZiAoZT8ubmFtZSA9PT0gJ1lBTUxQYXJzZUVycm9yJykge1xyXG5cdFx0XHRcdFx0Y29uc3QgZXJyb3JNZXNzYWdlID0gYFVwZGF0ZSBtYWp1cml0eXMgZmFpbGVkIE1hbGZvcm1lZCBmcm9udGFtdHRlciAke2UubWVzc2FnZX1gO1xyXG5cdFx0XHRcdFx0bmV3IE5vdGljZShlcnJvck1lc3NhZ2UsIDQwMDApO1xyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihlcnJvck1lc3NhZ2UpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBuZXcgTm90aWNlKGBSZW1vdmVkIHNwZWNpZmllZCBrZXlzIGZyb20gZnJvbnRtYXR0ZXIgZnJvbSBmaWxlIFxcXCIke2ZpbGVOYW1lfVxcXCIuYCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRhc3luYyB3aGljaExldmVsTmV4dEJhZGdlKGN1cnJlbnRMZXZlbDogbnVtYmVyKTogUHJvbWlzZTxudW1iZXI+e1xyXG5cdFx0bGV0IG5leHRCYWRnZUxldmVsID0gMFxyXG5cdFx0Zm9yIChsZXQgaSA9IGN1cnJlbnRMZXZlbDsgaSA8IDExMDsgaSsrKXtcclxuXHRcdFx0Y29uc3QgYmFkZ2UgOiBCYWRnZSA9IGdldEJhZGdlRm9yTGV2ZWwoaSwgdHJ1ZSlcclxuXHRcdFx0Ly8gUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIHRoZSBsZXZlbCBudW1iZXJcclxuXHRcdFx0Y29uc3QgbGV2ZWxSZWdleCA9IC9sZXZlbCAoXFxkKykvO1xyXG5cdFx0XHQvLyBFeHRyYWN0IHRoZSBsZXZlbCBudW1iZXIgdXNpbmcgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvblxyXG5cdFx0XHRjb25zdCBtYXRjaCA9IGJhZGdlLmxldmVsLm1hdGNoKGxldmVsUmVnZXgpO1xyXG5cdFx0XHRpZihtYXRjaCl7XHJcblx0XHRcdFx0Y29uc3QgbGV2ZWxOdW1iZXIgPSBwYXJzZUludChtYXRjaFsxXSwgMTApOyAvLyBDb252ZXJ0IHRoZSBtYXRjaGVkIG51bWJlciB0byBhbiBpbnRlZ2VyXHJcblx0XHRcdFx0aWYgKGxldmVsTnVtYmVyID4gY3VycmVudExldmVsICYmIG5leHRCYWRnZUxldmVsID09IDAgKSB7XHJcblx0XHRcdFx0XHRuZXh0QmFkZ2VMZXZlbCA9IGxldmVsTnVtYmVyO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG5leHRCYWRnZUxldmVsXHJcblx0fVxyXG5cclxuXHRhc3luYyBib29zdGVyRm9ySW5pdCgpOiBQcm9taXNlPG51bWJlcj4ge1xyXG5cdFx0Y29uc3QgbmV4dEJhZGdlQXQgPSBhd2FpdCB0aGlzLndoaWNoTGV2ZWxOZXh0QmFkZ2UodGhpcy5zZXR0aW5ncy5zdGF0dXNMZXZlbClcclxuXHRcdGNvbnN0IHN0YXR1c1BvaW50c1RvUmVhY2ggPSBzdGF0dXNQb2ludHNGb3JMZXZlbChuZXh0QmFkZ2VBdClcclxuXHRcdC8vY29uc29sZS5sb2coYHN0YXR1c1BvaW50c1RvUmVhY2ggZm9yIG5leHQgQmFkZ2U6ICR7c3RhdHVzUG9pbnRzVG9SZWFjaH1gKVxyXG5cdFx0Ly8gNTAgTm90ZXMgZnJvbSBMZXZlbCAxIHRvIDUgdG8gZ2V0IHRoZSBmaXJzdCBiYWRnZS5cclxuXHRcdC8vIDMwMCBQb2ludHMgaW4gYXZlcmFnZSBmb3IgYSBOb3RlLlxyXG5cdFx0Y29uc3QgYm9vc3RlckZhY3RvciA9IE1hdGgucm91bmQoKHN0YXR1c1BvaW50c1RvUmVhY2ggLSB0aGlzLnNldHRpbmdzLnN0YXR1c1BvaW50cykvNTAvMzAwKTtcclxuXHRcdHRoaXMuc2V0dGluZ3MuYmFkZ2VCb29zdGVyRmFjdG9yID0gYm9vc3RlckZhY3RvclxyXG5cdFx0dGhpcy5zZXR0aW5ncy5iYWRnZUJvb3N0ZXJTdGF0ZSA9IHRydWVcclxuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncylcclxuXHRcdC8vY29uc29sZS5sb2coYGJvb3N0ZXJGYWt0b3I6ICR7Ym9vc3RlckZhY3Rvcn1gKVxyXG5cdFx0cmV0dXJuIGJvb3N0ZXJGYWN0b3JcclxuXHR9XHJcblxyXG5cdGFzeW5jIG9wZW5BdmF0YXJGaWxlKCkge1xyXG5cdFx0Y29uc3QgZXhpc3RpbmdGaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChgJHt0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lfS5tZGApO1xyXG5cdFx0aWYgKGV4aXN0aW5nRmlsZSl7XHJcblx0XHRcdGNvbnN0IHNvdXJjZVBhdGggPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpPy5wYXRoIHx8ICcnO1xyXG5cdFx0XHRhd2FpdCBhcHAud29ya3NwYWNlLm9wZW5MaW5rVGV4dChleGlzdGluZ0ZpbGUucGF0aCwgc291cmNlUGF0aCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcIkZpbGUgbm90IGZvdW5kIG9yIHVuYWJsZSB0byBvcGVuLlwiKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gaXNTYW1lRGF5KGlucHV0RGF0ZTogTW9tZW50KTogYm9vbGVhbiB7XHJcblx0Y29uc3QgY3VycmVudERhdGUgPSB3aW5kb3cubW9tZW50KCk7IC8vIEdldCB0aGUgY3VycmVudCBkYXRlXHJcblx0cmV0dXJuIGN1cnJlbnREYXRlLmlzU2FtZShpbnB1dERhdGUsICdkYXknKTsgLy8gQ2hlY2sgaWYgdGhleSBhcmUgdGhlIHNhbWUgZGF5XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzT25lRGF5QmVmb3JlKGlucHV0RGF0ZTogTW9tZW50KTogYm9vbGVhbiB7XHJcblx0Y29uc3Qgb25lRGF5QmVmb3JlQ3VycmVudCA9IHdpbmRvdy5tb21lbnQoKS5zdWJ0cmFjdCgxLCAnZGF5Jyk7IC8vIENhbGN1bGF0ZSBvbmUgZGF5IGJlZm9yZSBjdXJyZW50IGRhdGVcclxuXHRyZXR1cm4gaW5wdXREYXRlLmlzU2FtZShvbmVEYXlCZWZvcmVDdXJyZW50LCAnZGF5Jyk7XHJcbn1cclxuXHJcblxyXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVBdmF0YXJGaWxlKGFwcDogQXBwLCBmaWxlTmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcblx0Ly9zZXR0aW5nczogR2FtaWZpY2F0aW9uUGx1Z2luU2V0dGluZ3M7XHJcblx0Ly8gRGVmaW5lIHRoZSBmaWxlIG5hbWUgYW5kIGNvbnRlbnRcclxuXHQvL2NvbnN0IGZpbGVOYW1lID0gJ0F2YXRhciAtIEdhbWlmaWNhdGlvbic7IC8vIHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWU7XHJcblx0Ly9jb25zb2xlLmxvZyhgZmlsZU5hbWU6ICR7ZmlsZU5hbWV9YClcclxuXHJcblx0Y29uc3QgZXhpc3RpbmdGaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChgJHtmaWxlTmFtZX0ubWRgKTtcclxuXHRpZiAoZXhpc3RpbmdGaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcclxuXHRcdGNvbnNvbGUubG9nKGBGaWxlICR7ZmlsZU5hbWV9Lm1kIGFscmVhZHkgZXhpc3RzYCk7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdC8vIENyZWF0ZSB0aGUgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgdmF1bHRcclxuXHRhd2FpdCBhcHAudmF1bHQuY3JlYXRlKGAke2ZpbGVOYW1lfS5tZGAsIGF2YXRhckluaXRDb250ZW50KTtcclxuXHJcbn1cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gc3RyaW5nVG9MaXN0KGlucHV0OiBzdHJpbmcpOiBzdHJpbmdbXSB7XHJcbiAgICByZXR1cm4gaW5wdXQuc3BsaXQoJywnKTtcclxufVxyXG5jbGFzcyBNdWx0aVNlbGVjdE1vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBpdGVtczogc3RyaW5nW107XHJcbiAgICBwcml2YXRlIHNlbGVjdGVkSXRlbXM6IHN0cmluZ1tdID0gW107XHJcblx0cHJpdmF0ZSByZW1haW5pbmdTdG9jazogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9O1xyXG4gICAgcHJpdmF0ZSBidXR0b25UZXh0OiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGl0ZW1zOiBzdHJpbmdbXSwgYnV0dG9uVGV4dDogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwKTtcclxuICAgICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XHJcblx0XHR0aGlzLmJ1dHRvblRleHQgPSBidXR0b25UZXh0O1xyXG5cclxuXHRcdC8vIEluaXRpYWxpemUgcmVtYWluaW5nIHN0b2NrIHZhbHVlc1xyXG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZW1haW5pbmdTdG9ja1tpdGVtXSA9IDU7IC8vIFJlcGxhY2Ugd2l0aCB0aGUgYWN0dWFsIHN0b2NrIHZhbHVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuXHRvbk9wZW4oKSB7XHJcblx0XHRjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuXHRcdGNvbnRlbnRFbC5lbXB0eSgpO1xyXG5cdFxyXG5cdFx0dGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG5cdFx0XHRjb25zdCBzdG9jayA9IDU7IC8vIFJlcGxhY2Ugd2l0aCB0aGUgYWN0dWFsIHN0b2NrIHZhbHVlXHJcblx0XHRcdGNvbnN0IGxpc3RJdGVtID0gdGhpcy5jcmVhdGVDaGVja2JveChpdGVtKTtcclxuXHRcdFx0Y29udGVudEVsLmFwcGVuZENoaWxkKGxpc3RJdGVtKTtcclxuXHRcdH0pO1xyXG5cdFxyXG5cdFx0Y29uc3Qgc3VibWl0QnV0dG9uID0gdGhpcy5jcmVhdGVTdWJtaXRCdXR0b24odGhpcy5idXR0b25UZXh0KTtcclxuXHRcdGNvbnRlbnRFbC5hcHBlbmRDaGlsZChzdWJtaXRCdXR0b24pO1xyXG5cdH1cdFxyXG5cdFxyXG5cclxuICAgIG9uQ2xvc2UoKSB7XHJcblx0XHR0aGlzLnNlbGVjdGVkSXRlbXMgPSBbXTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuXHJcblx0aW5jcmVtZW50SXRlbShpdGVtOiBzdHJpbmcpIHtcclxuXHRcdGNvbnN0IHNlbGVjdGVkSXRlbUNvdW50ID0gdGhpcy5zZWxlY3RlZEl0ZW1zLmZpbHRlcihzZWxlY3RlZEl0ZW0gPT4gc2VsZWN0ZWRJdGVtID09PSBpdGVtKS5sZW5ndGg7XHJcblx0XHRjb25zdCBzdG9jayA9IHRoaXMucmVtYWluaW5nU3RvY2tbaXRlbV07XHJcblx0XHJcblx0XHRpZiAoc2VsZWN0ZWRJdGVtQ291bnQgPCA1ICYmIHN0b2NrID4gMCkge1xyXG5cdFx0XHR0aGlzLnNlbGVjdGVkSXRlbXMucHVzaChpdGVtKTtcclxuXHRcdFx0dGhpcy5yZW1haW5pbmdTdG9ja1tpdGVtXS0tO1xyXG5cdFx0XHR0aGlzLnVwZGF0ZVF1YW50aXR5RGlzcGxheShpdGVtKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0ZGVjcmVtZW50SXRlbShpdGVtOiBzdHJpbmcpIHtcclxuXHRcdGNvbnN0IGl0ZW1JbmRleCA9IHRoaXMuc2VsZWN0ZWRJdGVtcy5pbmRleE9mKGl0ZW0pO1xyXG5cdFxyXG5cdFx0aWYgKGl0ZW1JbmRleCA+IC0xKSB7XHJcblx0XHRcdHRoaXMuc2VsZWN0ZWRJdGVtcy5zcGxpY2UoaXRlbUluZGV4LCAxKTtcclxuXHRcdFx0dGhpcy5yZW1haW5pbmdTdG9ja1tpdGVtXSsrO1xyXG5cdFx0XHR0aGlzLnVwZGF0ZVF1YW50aXR5RGlzcGxheShpdGVtKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0XHJcblxyXG5cdHByaXZhdGUgY3JlYXRlQ2hlY2tib3gobGFiZWxUZXh0OiBzdHJpbmcpIHtcclxuXHRcdGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0Y29udGFpbmVyLmNsYXNzTmFtZSA9ICdtb2RhbC1jaGVja2JveC1jb250YWluZXInO1xyXG5cdFx0Y29uc3Qgc3RvY2sgPSB0aGlzLnJlbWFpbmluZ1N0b2NrW2xhYmVsVGV4dF0gfHwgMDtcclxuXHRcclxuXHRcdGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuXHRcdGxhYmVsLmlubmVyVGV4dCA9IGAke2xhYmVsVGV4dH1gOy8vICgke3N0b2NrfSlgO1xyXG5cdFx0bGFiZWwuY2xhc3NMaXN0LmFkZChgJHtsYWJlbFRleHQucmVwbGFjZSgnICcsJy0nKX1gKTsgLy8gQWRkIGNsYXNzICdpdGVtLWxhYmVsJyB0byB0aGUgbGFiZWxcclxuXHRcclxuXHRcdGNvbnN0IGluY3JlbWVudEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG5cdFx0aW5jcmVtZW50QnV0dG9uLmlubmVyVGV4dCA9ICcrJztcclxuXHRcdGluY3JlbWVudEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG5cdFx0XHR0aGlzLmluY3JlbWVudEl0ZW0obGFiZWxUZXh0KTtcclxuXHRcdH07XHJcblx0XHJcblx0XHRjb25zdCBkZWNyZW1lbnRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuXHRcdGRlY3JlbWVudEJ1dHRvbi5pbm5lclRleHQgPSAnLSc7XHJcblx0XHRkZWNyZW1lbnRCdXR0b24ub25jbGljayA9ICgpID0+IHtcclxuXHRcdFx0dGhpcy5kZWNyZW1lbnRJdGVtKGxhYmVsVGV4dCk7XHJcblx0XHR9O1xyXG5cdFxyXG5cdFx0Y29uc3QgcmVtYWluaW5nU3RvY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcblx0XHRyZW1haW5pbmdTdG9jay5pbm5lckhUTUwgPSBgUmVtYWluaW5nOiA8c3Bhbj4ke3N0b2NrfTwvc3Bhbj4gYDtcclxuXHRcdHJlbWFpbmluZ1N0b2NrLmlkID0gJ3JlbWFpbmluZy1zdG9jayc7XHJcblxyXG5cdFx0Y29uc3Qgc2VsZWN0ZWRRdWFudGl0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuXHRcdHNlbGVjdGVkUXVhbnRpdHkuaW5uZXJIVE1MID0gYFNlbGVjdGVkOiA8c3Bhbj4wPC9zcGFuPmA7XHJcblx0XHRzZWxlY3RlZFF1YW50aXR5LmlkID0gJ3NlbGVjdGVkLXF1YW50aXR5JztcclxuXHJcblx0XHJcblx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xyXG5cdFx0Y29udGFpbmVyLmFwcGVuZENoaWxkKGluY3JlbWVudEJ1dHRvbik7XHJcblx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQoZGVjcmVtZW50QnV0dG9uKTtcclxuXHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZChyZW1haW5pbmdTdG9jayk7XHJcblx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQoc2VsZWN0ZWRRdWFudGl0eSk7XHJcblx0XHRjb25zb2xlLmxvZyhgY29udGFpbmVyIGZvciBpbmNlbWVudCBpZD86ICR7Y29udGFpbmVyLmlkfWApXHJcblx0XHRyZXR1cm4gY29udGFpbmVyO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHRwcml2YXRlIHVwZGF0ZVF1YW50aXR5RGlzcGxheShsYWJlbFRleHQ6IHN0cmluZykge1xyXG5cdFx0Y29uc29sZS5sb2coJ3VwZGF0ZVF1YW50aXR5RGlzcGxheSBjYWxsZWQgd2l0aCBsYWJlbDonLCBsYWJlbFRleHQpO1xyXG5cdFx0Y29uc3QgbGFiZWxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLiR7bGFiZWxUZXh0LnJlcGxhY2UoJyAnLCctJyl9YCk7XHJcblx0XHRpZiAoIWxhYmVsRWxlbWVudCkge1xyXG5cdFx0XHRjb25zb2xlLmxvZyhgbGFiZWxFbGVtZW50IG5vdCBmb3VuZGApO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHJcblx0XHRjb25zdCBjb250YWluZXIgPSBsYWJlbEVsZW1lbnQucGFyZW50RWxlbWVudCBhcyBIVE1MRGl2RWxlbWVudDtcclxuXHRcdGlmICghY29udGFpbmVyKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKGBjb250YWluZXIgbm90IGZvdW5kYCk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcclxuXHRcdGNvbnN0IHJlbWFpbmluZ1N0b2NrID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYCNyZW1haW5pbmctc3RvY2sgc3BhbmApIGFzIEhUTUxTcGFuRWxlbWVudDtcclxuXHRcdGlmICghcmVtYWluaW5nU3RvY2spIHtcclxuXHRcdFx0Y29uc29sZS5sb2coYHJlbWFpbmluZ1N0b2NrIG5vdCBmb3VuZGApO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHJcblx0XHRjb25zdCBzZWxlY3RlZFF1YW50aXR5ID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYCNzZWxlY3RlZC1xdWFudGl0eSBzcGFuYCkgYXMgSFRNTFNwYW5FbGVtZW50O1xyXG5cdFx0aWYgKCFzZWxlY3RlZFF1YW50aXR5KSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKGBzZWxlY3RlZFF1YW50aXR5IG5vdCBmb3VuZGApO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHJcblx0XHRjb25zdCBzdG9jayA9IHRoaXMucmVtYWluaW5nU3RvY2tbbGFiZWxUZXh0XSB8fCAwOyAvLyBVc2UgZ2xvYmFsIHJlbWFpbmluZyBzdG9jayB2YWx1ZVxyXG5cdFx0Y29uc3Qgc2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkSXRlbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbSA9PT0gbGFiZWxUZXh0KS5sZW5ndGg7XHJcblx0XHJcblx0XHRjb25zb2xlLmxvZyhgc3RvY2s6ICR7c3RvY2t9LCBzZWxlY3RlZDogJHtzZWxlY3RlZH1gKTtcclxuXHRcclxuXHRcdHJlbWFpbmluZ1N0b2NrLmlubmVyVGV4dCA9IGAkezUgLSBzZWxlY3RlZH1gO1xyXG5cdFx0Ly9yZW1haW5pbmdTdG9jay5pbm5lclRleHQgPSBgJHtzdG9ja31gO1xyXG5cdFx0c2VsZWN0ZWRRdWFudGl0eS5pbm5lclRleHQgPSBgJHtzZWxlY3RlZH1gO1xyXG5cdH1cclxuXHRcclxuXHRcclxuXHRcclxuXHJcbiAgICBwcml2YXRlIGNyZWF0ZVN1Ym1pdEJ1dHRvbihidXR0b25UZXh0OnN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgIHN1Ym1pdEJ1dHRvbi5pbm5lclRleHQgPSBidXR0b25UZXh0O1xyXG4gICAgICAgIHN1Ym1pdEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZEl0ZW1zMiA9IHRoaXMuZ2V0U2VsZWN0ZWRJdGVtcygpO1xyXG5cdFx0XHR0aGlzLmNyYWZ0Qm9vc3Rlckl0ZW0oc2VsZWN0ZWRJdGVtczIpO1xyXG5cdFx0XHR0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gc3VibWl0QnV0dG9uO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGdldFNlbGVjdGVkSXRlbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRJdGVtcztcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBjcmFmdEJvb3N0ZXJJdGVtKHNlbGVjdGVkSXRlbXM6IHN0cmluZ1tdKSB7XHJcblx0XHRjb25zb2xlLmxvZygnU2VsZWN0ZWQ6Jywgc2VsZWN0ZWRJdGVtcy5qb2luKCcsICcpKTtcclxuXHR9XHRcclxufVxyXG5cclxuXHJcblxyXG5jbGFzcyBNb2RhbEJvb3N0ZXIgZXh0ZW5kcyBNb2RhbCB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRpc3BsYXlUZXh0OiBzdHJpbmc7XHJcblx0cHJpdmF0ZSByZWFkb25seSBnYW1pZmljYXRpb25JbnN0YW5jZTogZ2FtaWZpY2F0aW9uO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBkaXNwbGF5VGV4dDogc3RyaW5nLCBnYW1pZmljYXRpb25JbnN0YW5jZTogZ2FtaWZpY2F0aW9uKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwKTtcclxuICAgICAgICB0aGlzLmRpc3BsYXlUZXh0ID0gZGlzcGxheVRleHQ7XHJcblx0XHR0aGlzLmdhbWlmaWNhdGlvbkluc3RhbmNlID0gZ2FtaWZpY2F0aW9uSW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgb25PcGVuKCkge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG4gICAgICAgIGNvbnRlbnRFbC5zZXRUZXh0KHRoaXMuZGlzcGxheVRleHQpO1xyXG5cclxuICAgICAgICAvLyBBZGQgYSBidXR0b24gdG8gb3BlbiB0aGUgbXVsdGktc2VsZWN0IG1vZGFsXHJcbiAgICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgYnV0dG9uLmlubmVyVGV4dCA9ICdPcGVuIENyYXRpbmcgVGFibGUnO1xyXG4gICAgICAgIGJ1dHRvbi5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAvL2NvbnN0IGl0ZW1zID0gc3RyaW5nVG9MaXN0KHRoaXMuZ2FtaWZpY2F0aW9uSW5zdGFuY2UuZ2V0U2V0dGluZygnYm9vc3RlckluY3JlZGllbnRzJykpXHJcblx0XHRcdGNvbnN0IGl0ZW1zID0gdGhpcy5yZWFkSW5jcmVkaWVudHMoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG11bHRpU2VsZWN0TW9kYWwgPSBuZXcgTXVsdGlTZWxlY3RNb2RhbCh0aGlzLmFwcCwgaXRlbXMsJ0NyYWZ0IEJvb3N0ZXIgSXRlbScpO1xyXG4gICAgICAgICAgICBtdWx0aVNlbGVjdE1vZGFsLm9wZW4oKTtcclxuICAgICAgICB9O1xyXG5cclxuXHRcdGNvbnN0IGJ1dHRvbjIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICBidXR0b24yLmlubmVyVGV4dCA9ICdPcGVuIEJvb3N0ZXIgYm9hcmQnO1xyXG4gICAgICAgIGJ1dHRvbjIub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaXRlbXMyID0gW1xyXG4gICAgICAgICAgICAgICAgJ0Jvb3N0ZXIgMScsXHJcbiAgICAgICAgICAgICAgICAnQm9vc3RlciAyJyxcclxuICAgICAgICAgICAgICAgICdCb29zdGVyIDMnLFxyXG4gICAgICAgICAgICAgICAgJ0Jvb3N0ZXIgNCcsXHJcbiAgICAgICAgICAgICAgICAnQm9vc3RlciA1JyxcclxuICAgICAgICAgICAgICAgICdCb29zdGVyIDYnXHJcbiAgICAgICAgICAgIF07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtdWx0aVNlbGVjdE1vZGFsID0gbmV3IE11bHRpU2VsZWN0TW9kYWwodGhpcy5hcHAsIGl0ZW1zMiwndXNlIEJvb3N0ZXInKTtcclxuICAgICAgICAgICAgbXVsdGlTZWxlY3RNb2RhbC5vcGVuKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29udGVudEVsLmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcblx0XHRjb250ZW50RWwuYXBwZW5kQ2hpbGQoYnV0dG9uMik7XHJcbiAgICB9XHJcblxyXG4gICAgb25DbG9zZSgpIHtcclxuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTtcclxuICAgIH1cclxuXHJcblx0cHJpdmF0ZSByZWFkSW5jcmVkaWVudHMoKTogc3RyaW5nW10ge1xyXG5cdFx0Ly8gcmVhZCBmcm9tIHNldHRpbmdzIHRoZSBudW1iZXJzIGFuZCBwcm92aWRlIHRoZW0gYXMgc3RyaW5nXHJcblx0XHQvKmNvbnN0IG5leHVzTm9kZSA9ICdOZXh1cyBOb2RlICgnICsgdGhpcy5nYW1pZmljYXRpb25JbnN0YW5jZS5nZXRTZXR0aW5nKCduZXh1c05vZGUnKSArICcpJ1xyXG5cdFx0Y29uc3QgY29ubmVjdGlvbkNyeXN0YWwgPSAnQ29ubmVjdGlvbiBDcnlzdGFsICgnICsgdGhpcy5nYW1pZmljYXRpb25JbnN0YW5jZS5nZXRTZXR0aW5nKCdjb25uZWN0aW9uQ3J5c3RhbCcpICsgJyknXHJcblx0XHRjb25zdCBtYXN0ZXJ5U2Nyb2xsID0gJ01hc3RlcnkgU2Nyb2xsICgnICsgdGhpcy5nYW1pZmljYXRpb25JbnN0YW5jZS5nZXRTZXR0aW5nKCdtYXN0ZXJ5U2Nyb2xsJykgKyAnKSdcclxuXHRcdGNvbnN0IGluc2lnaHRQcmlzbSA9ICdJbnNpZ2h0IFByaXNtICgnICsgdGhpcy5nYW1pZmljYXRpb25JbnN0YW5jZS5nZXRTZXR0aW5nKCdpbnNpZ2h0UHJpc20nKSArICcpJ1xyXG5cdFx0Y29uc3QgcmVmbGVjdGl2ZUVzc2VuY2UgPSAnUmVmbGVjdGl2ZSBFc3NlbmNlICgnICsgdGhpcy5nYW1pZmljYXRpb25JbnN0YW5jZS5nZXRTZXR0aW5nKCdyZWZsZWN0aXZlRXNzZW5jZScpICsgJyknXHJcblx0XHRjb25zdCBhbXBsaWZpY2F0aW9uQ3J5c3RhbCA9ICdBbXBsaWZpY2F0aW9uIENyeXN0YWwgKCcgKyB0aGlzLmdhbWlmaWNhdGlvbkluc3RhbmNlLmdldFNldHRpbmcoJ2FtcGxpZmljYXRpb25DcnlzdGFsJykgKyAnKSdcclxuXHRcdGNvbnN0IGNyZWF0aXZlQ2F0YWx5c3QgPSAnQ3JlYXRpdmUgQ2F0YWx5c3QgKCcgKyB0aGlzLmdhbWlmaWNhdGlvbkluc3RhbmNlLmdldFNldHRpbmcoJ2NyZWF0aXZlQ2F0YWx5c3QnKSArICcpJ1xyXG5cdFx0Y29uc3QgcHJlY2lzaW9uTGVucyA9ICdQcmVjaXNpb24gTGVucyAoJyArIHRoaXMuZ2FtaWZpY2F0aW9uSW5zdGFuY2UuZ2V0U2V0dGluZygncHJlY2lzaW9uTGVucycpICsgJyknXHJcblx0XHRjb25zdCBzdW0gPSBbbmV4dXNOb2RlLGNvbm5lY3Rpb25DcnlzdGFsLG1hc3RlcnlTY3JvbGwsaW5zaWdodFByaXNtLHJlZmxlY3RpdmVFc3NlbmNlLGFtcGxpZmljYXRpb25DcnlzdGFsLGNyZWF0aXZlQ2F0YWx5c3QscHJlY2lzaW9uTGVuc11cclxuXHRcdGNvbnNvbGUubG9nKGB0aGUgaW5jcmVkaWVudCBhbW91bnQgaXM6ICR7c3VtfWApKi9cclxuXHRcdGNvbnN0IHN1bSA9IFsnTmV4dXMgTm9kZScsJ0Nvbm5lY3Rpb24gQ3J5c3RhbCcsJ01hc3RlcnkgU2Nyb2xsJywnSW5zaWdodCBQcmlzbScsJ1JlZmxlY3RpdmUgRXNzZW5jZScsJ0FtcGxpZmljYXRpb24gQ3J5c3RhbCcsJ0NyZWF0aXZlIENhdGFseXN0JywnUHJlY2lzaW9uIExlbnMnXVxyXG5cdFx0cmV0dXJuIHN1bTtcclxuXHR9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbmNsYXNzIE1vZGFsSW5mb3JtYXRpb25ib3ggZXh0ZW5kcyBNb2RhbCB7XHJcblx0cHJpdmF0ZSByZWFkb25seSBkaXNwbGF5VGV4dDogc3RyaW5nOyAvLyBTdG9yZSB0aGUgdGV4dCB0byBiZSBkaXNwbGF5ZWRcclxuXHJcblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIGRpc3BsYXlUZXh0OiBzdHJpbmcpIHtcclxuXHRcdHN1cGVyKGFwcCk7XHJcblx0XHR0aGlzLmRpc3BsYXlUZXh0ID0gZGlzcGxheVRleHQ7IC8vIFN0b3JlIHRoZSBwYXNzZWQgdGV4dFxyXG5cdH1cclxuXHJcblx0b25PcGVuKCkge1xyXG5cdFx0Y29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcblx0XHRjb250ZW50RWwuc2V0VGV4dCh0aGlzLmRpc3BsYXlUZXh0KTsgLy8gVXNlIHRoZSBzdG9yZWQgdGV4dFxyXG5cdH1cclxuXHJcblx0b25DbG9zZSgpIHtcclxuXHRcdGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xyXG5cdFx0Y29udGVudEVsLmVtcHR5KCk7XHJcblx0fVxyXG59XHJcblxyXG5cclxuYXN5bmMgZnVuY3Rpb24gcmVwbGFjZUZvcm1hdFN0cmluZ3MobGF5ZXIyOiBzdHJpbmcsIGxheWVyMzogc3RyaW5nKSB7XHJcblx0Y29uc3QgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XHJcblxyXG5cdGlmICghYWN0aXZlVmlldykge1xyXG5cdFx0Y29uc29sZS5lcnJvcihcIk5vIGFjdGl2ZSBNYXJrZG93biB2aWV3IGZvdW5kLlwiKTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdGNvbnN0IGVkaXRvciA9IGFjdGl2ZVZpZXcuZWRpdG9yO1xyXG5cdGNvbnN0IHNlbGVjdGVkVGV4dCA9IGVkaXRvci5nZXRTZWxlY3Rpb24oKTtcclxuXHJcblx0aWYgKCFzZWxlY3RlZFRleHQpIHtcclxuXHRcdGNvbnNvbGUuZXJyb3IoXCJObyB0ZXh0IHNlbGVjdGVkIChmb3IgcHJvZ3Jlc3NpdmUgc3VtbWFyaXphdGlvbiBzd2l0Y2ggTGF5ZXIgMiAmIDMpLlwiKTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdGxldCByZXBsYWNlZFRleHQgPSBzZWxlY3RlZFRleHQucmVwbGFjZUFsbChsYXllcjIsIFwiXHUwMEE3XHUwMEE3XHUwMEE3XHUwMEE3XCIpO1xyXG5cdHJlcGxhY2VkVGV4dCA9IHJlcGxhY2VkVGV4dC5yZXBsYWNlQWxsKGxheWVyMywgXCJcdTIwQUNcdTIwQUNcdTIwQUNcdTIwQUNcIilcclxuXHRyZXBsYWNlZFRleHQgPSByZXBsYWNlZFRleHQucmVwbGFjZUFsbChcIlx1MjBBQ1x1MjBBQ1x1MjBBQ1x1MjBBQ1wiLCBsYXllcjIpXHJcblx0cmVwbGFjZWRUZXh0ID0gcmVwbGFjZWRUZXh0LnJlcGxhY2VBbGwoXCJcdTAwQTdcdTAwQTdcdTAwQTdcdTAwQTdcIiwgbGF5ZXIzKVxyXG5cclxuXHRlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihyZXBsYWNlZFRleHQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKHJhdGluZ0N1cnJlbnQ6IHN0cmluZywgcmF0aW5nTmV3OiBudW1iZXIpOiBudW1iZXIge1xyXG5cdGxldCByYXRpbmdGYWt0b3I6IG51bWJlclxyXG5cdGlmIChwYXJzZUludChyYXRpbmdDdXJyZW50LCAxMCkgPCByYXRpbmdOZXcpe1xyXG5cdFx0cmF0aW5nRmFrdG9yID0gcmF0aW5nTmV3IC0gcGFyc2VJbnQocmF0aW5nQ3VycmVudCwgMTApXHJcblx0fSBlbHNlIHtcclxuXHRcdHJhdGluZ0Zha3RvciA9IDBcclxuXHR9XHJcblxyXG5cdHJldHVybiByYXRpbmdGYWt0b3JcclxufVxyXG5cclxuXHJcblxyXG4gIFxyXG4gIFxyXG5cclxuXHJcblxyXG5cclxuIiwgImltcG9ydCB7IEFwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IGdhbWlmaWNhdGlvbiBmcm9tICcuL21haW4nO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlZmF1bHRTZXR0aW5nczogUGFydGlhbDxJU2V0dGluZ3M+ID0ge1xyXG4gIGVuYWJsZUluaXRDb21tYW5kOiB0cnVlLFxyXG4gIGJpbmRFbnRlcjogdHJ1ZSxcclxuICBiaW5kVGFiOiB0cnVlLFxyXG4gIGF2YXRhclBhZ2VOYW1lOiAnQXZhdGFyIC0gR2FtaWZpY2F0aW9uJyxcclxuICB0YWdzRXhjbHVkZTogJycsXHJcbiAgZm9sZGVyRXhjbHVkZTogJ0V4Y2FsaWRyYXcnLFxyXG4gIHByb2dyZXNzaXZlU3VtTGF5ZXIyOiAnPT0nLFxyXG4gIHByb2dyZXNzaXZlU3VtTGF5ZXIzOiAnKionLFxyXG4gIG51bUFsbEZpbGVzOiAxLFxyXG4gIG51bUFsbEZpbGVzQ291bnQ6IDAsXHJcbiAgY2hhcnRSZWR1emllcnVuZ01vbmF0ZTogMCxcclxuICBzdGF0dXNQb2ludHM6IDAsXHJcbiAgc3RhdHVzTGV2ZWw6IDEsXHJcbiAgeHBGb3JOZXh0TGV2ZWw6IDEwMDAsXHJcbiAgZ2FtaWZpY2F0aW9uU3RhcnREYXRlOiAnMTIuMDguMjAyMycsXHJcbiAgYmFkZ2VCb29zdGVyU3RhdGU6IGZhbHNlLFxyXG4gIGJhZGdlQm9vc3RlckZhY3RvcjogMSxcclxuICBkZWJ1ZzogZmFsc2UsXHJcbiAgZGFpbHlOb3RlQ3JlYXRpb25UYXNrOiAwLFxyXG4gIGRhaWx5Tm90ZUNyZWF0aW9uRGF0ZTogJzEyLjA4LjIwMjMnLFxyXG4gIHdlZWtseU5vdGVDcmVhdGlvblRhc2s6IDAsXHJcbiAgd2Vla2x5Tm90ZUNyZWF0aW9uRGF0ZTogJzEyLjA4LjIwMjMnLFxyXG4gIGJvb3N0ZXJJbmNyZWRpZW50czogJ1doaW1zaWNhbCBXaXNkb20gQ3J5c3RhbHMsQ3VyaW9zaXR5IENvaW5zLEV1cmVrYSBFbmVyZ3kgT3JicyxTZXJlbmRpcGl0eSBTdGFycyxDcmVhdGl2aXR5IENyeXN0YWxzLERpc2NvdmVyeSBEaWNlLE1ldGFwaG9yaWNhbCBNZWRhbHMsQ3VyaW91cyBDYXQgQ29tcGFuaW9uLEFub3RoZXIgT25lJyxcclxuICBuZXh1c05vZGU6IDAsXHJcbiAgY29ubmVjdGlvbkNyeXN0YWw6IDAsXHJcbiAgbWFzdGVyeVNjcm9sbDogMCxcclxuICBpbnNpZ2h0UHJpc206IDAsXHJcbiAgcmVmbGVjdGl2ZUVzc2VuY2U6IDAsXHJcbiAgYW1wbGlmaWNhdGlvbkNyeXN0YWw6IDAsXHJcbiAgY3JlYXRpdmVDYXRhbHlzdDogMCxcclxuICBwcmVjaXNpb25MZW5zOiAwXHJcbn07XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElTZXR0aW5ncyB7XHJcbiAgZW5hYmxlSW5pdENvbW1hbmQ6IGJvb2xlYW47XHJcbiAgYmluZEVudGVyOiBib29sZWFuO1xyXG4gIGJpbmRUYWI6IGJvb2xlYW47XHJcbiAgYXZhdGFyUGFnZU5hbWU6IHN0cmluZztcclxuICB0YWdzRXhjbHVkZTogc3RyaW5nO1xyXG4gIGZvbGRlckV4Y2x1ZGU6IHN0cmluZztcclxuICBwcm9ncmVzc2l2ZVN1bUxheWVyMjogc3RyaW5nO1xyXG4gIHByb2dyZXNzaXZlU3VtTGF5ZXIzOiBzdHJpbmc7XHJcbiAgbnVtQWxsRmlsZXM6IG51bWJlcjtcclxuICBudW1BbGxGaWxlc0NvdW50OiBudW1iZXI7XHJcbiAgY2hhcnRSZWR1emllcnVuZ01vbmF0ZTogbnVtYmVyO1xyXG4gIHN0YXR1c1BvaW50czogbnVtYmVyO1xyXG4gIHN0YXR1c0xldmVsOiBudW1iZXI7XHJcbiAgeHBGb3JOZXh0TGV2ZWw6IG51bWJlcjtcclxuICBnYW1pZmljYXRpb25TdGFydERhdGU6IHN0cmluZztcclxuICBiYWRnZUJvb3N0ZXJTdGF0ZTogYm9vbGVhbjtcclxuICBiYWRnZUJvb3N0ZXJGYWN0b3I6IG51bWJlcjtcclxuICBkZWJ1ZzogYm9vbGVhbjtcclxuICBkYWlseU5vdGVDcmVhdGlvblRhc2s6IG51bWJlcjtcclxuICBkYWlseU5vdGVDcmVhdGlvbkRhdGU6IHN0cmluZztcclxuICB3ZWVrbHlOb3RlQ3JlYXRpb25UYXNrOiBudW1iZXIsXHJcbiAgd2Vla2x5Tm90ZUNyZWF0aW9uRGF0ZTogc3RyaW5nLFxyXG4gIGJvb3N0ZXJJbmNyZWRpZW50czogc3RyaW5nLFxyXG4gIG5leHVzTm9kZTogbnVtYmVyLFxyXG4gIGNvbm5lY3Rpb25DcnlzdGFsOiBudW1iZXIsXHJcbiAgbWFzdGVyeVNjcm9sbDogbnVtYmVyLFxyXG4gIGluc2lnaHRQcmlzbTogbnVtYmVyLFxyXG4gIHJlZmxlY3RpdmVFc3NlbmNlOiBudW1iZXIsXHJcbiAgYW1wbGlmaWNhdGlvbkNyeXN0YWw6IG51bWJlcixcclxuICBjcmVhdGl2ZUNhdGFseXN0OiBudW1iZXIsXHJcbiAgcHJlY2lzaW9uTGVuczogbnVtYmVyLFxyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEdhbWlmaWNhdGlvblBsdWdpblNldHRpbmdzIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XHJcblx0cHJpdmF0ZSByZWFkb25seSBwbHVnaW46IGdhbWlmaWNhdGlvbjtcclxuICBcclxuICBwdWJsaWMgZW5hYmxlSW5pdENvbW1hbmQ6IGJvb2xlYW47XHJcbiAgcHVibGljIGJpbmRFbnRlcjogYm9vbGVhbjtcclxuICBwdWJsaWMgYmluZFRhYjogYm9vbGVhbjtcclxuICBwdWJsaWMgYXZhdGFyUGFnZU5hbWU6IHN0cmluZztcclxuICBwdWJsaWMgdGFnc0V4Y2x1ZGU6IHN0cmluZztcclxuICBwdWJsaWMgZm9sZGVyRXhjbHVkZTogc3RyaW5nO1xyXG4gIHB1YmxpYyBwcm9ncmVzc2l2ZVN1bUxheWVyMjogc3RyaW5nO1xyXG4gIHB1YmxpYyBwcm9ncmVzc2l2ZVN1bUxheWVyMzogc3RyaW5nO1xyXG4gIHB1YmxpYyBudW1BbGxGaWxlczogbnVtYmVyO1xyXG4gIHB1YmxpYyBudW1BbGxGaWxlc0NvdW50OiBudW1iZXI7XHJcbiAgcHVibGljIGNoYXJ0UmVkdXppZXJ1bmdNb25hdGU6IG51bWJlcjtcclxuICBwdWJsaWMgc3RhdHVzUG9pbnRzOiBudW1iZXI7XHJcbiAgcHVibGljIHN0YXR1c0xldmVsOiBudW1iZXI7XHJcbiAgcHVibGljIHhwRm9yTmV4dExldmVsOiBudW1iZXI7XHJcbiAgcHVibGljIGdhbWlmaWNhdGlvblN0YXJ0RGF0ZTogc3RyaW5nO1xyXG4gIHB1YmxpYyBiYWRnZUJvb3N0ZXJTdGF0ZTogYm9vbGVhbjtcclxuICBwdWJsaWMgYmFkZ2VCb29zdGVyRmFjdG9yOiBudW1iZXI7XHJcbiAgcHVibGljIGRlYnVnOiBib29sZWFuO1xyXG4gIHB1YmxpYyBkYWlseU5vdGVDcmVhdGlvblRhc2s6IG51bWJlcjtcclxuICBwdWJsaWMgZGFpbHlOb3RlQ3JlYXRpb25EYXRlOiBzdHJpbmc7XHJcbiAgcHVibGljIHdlZWtseU5vdGVDcmVhdGlvblRhc2s6IG51bWJlcjtcclxuICBwdWJsaWMgd2Vla2x5Tm90ZUNyZWF0aW9uRGF0ZTogc3RyaW5nO1xyXG4gIHB1YmxpYyBib29zdGVySW5jcmVkaWVudHM6IHN0cmluZztcclxuICBwdWJsaWMgbmV4dXNOb2RlOiBudW1iZXI7XHJcbiAgcHVibGljIGNvbm5lY3Rpb25DcnlzdGFsOiBudW1iZXI7XHJcbiAgcHVibGljIG1hc3RlcnlTY3JvbGw6IG51bWJlcjtcclxuICBwdWJsaWMgaW5zaWdodFByaXNtOiBudW1iZXI7XHJcbiAgcHVibGljIHJlZmxlY3RpdmVFc3NlbmNlOiBudW1iZXI7XHJcbiAgcHVibGljIGFtcGxpZmljYXRpb25DcnlzdGFsOiBudW1iZXI7XHJcbiAgcHVibGljIGNyZWF0aXZlQ2F0YWx5c3Q6IG51bWJlcjtcclxuICBwdWJsaWMgcHJlY2lzaW9uTGVuczogbnVtYmVyO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBnYW1pZmljYXRpb24pIHtcclxuXHQgIHN1cGVyKGFwcCwgcGx1Z2luKTtcclxuXHQgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG5cdH1cclxuICBcclxuXHRwdWJsaWMgZGlzcGxheSgpOiB2b2lkIHtcclxuXHRcdGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XHJcblx0XHRjb250YWluZXJFbC5hZGRDbGFzcyhcImV4Y2FsaWRyYXctc2V0dGluZ3NcIik7XHJcblx0XHR0aGlzLmNvbnRhaW5lckVsLmVtcHR5KCk7XHJcblxyXG5cdFx0Y29uc3QgY29mZmVlRGl2ID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KFwiY29mZmVlXCIpO1xyXG5cdFx0Y29mZmVlRGl2LmFkZENsYXNzKFwiZXgtY29mZmVlLWRpdlwiKTtcclxuXHRcdGNvbnN0IGNvZmZlZUxpbmsgPSBjb2ZmZWVEaXYuY3JlYXRlRWwoXCJhXCIsIHtcclxuXHRcdGhyZWY6IFwiaHR0cHM6Ly9rby1maS5jb20vYW5kcmVhc3RyZWJpbmdcIixcclxuXHRcdH0pO1xyXG5cdFx0Y29uc3QgY29mZmVlSW1nID0gY29mZmVlTGluay5jcmVhdGVFbChcImltZ1wiLCB7XHJcblx0XHRhdHRyOiB7XHJcblx0XHRcdHNyYzogXCJodHRwczovL2Nkbi5rby1maS5jb20vY2RuL2tvZmkzLnBuZz92PTNcIixcclxuXHRcdH0sXHJcblx0XHR9KTtcclxuXHRcdGNvZmZlZUltZy5oZWlnaHQgPSA0NTtcclxuXHJcblx0XHQvL2NvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XHJcblx0XHQvL2NvbnRhaW5lckVsLmVtcHR5KCk7XHJcbiAgXHJcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdHYW1pZnkgeW91ciBQS00gLSBTZXR0aW5ncycgfSk7XHJcblx0XHRjb25zb2xlLmxvZygnc2V0dGluZ3MgY2FsbGVkJylcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnI3RhZ3MgdG8gaWdub3JlJylcclxuXHRcdFx0LnNldERlc2MoJ2VudGVyIHRhZ3Mgd2l0aG91dCAjIGFuZCBzZXBhcmF0ZSB3aXRoIFwiLCBcIi5cXG5JbmNsdWRlIG5lc3RlZCB0YWdzLicpXHJcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignRW50ZXIgeW91ciB0YWcxLCB0YWcyL3N1YnRhZywgXHUyMDI2JylcclxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MudGFnc0V4Y2x1ZGUpXHJcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MudGFnc0V4Y2x1ZGUgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pKTtcclxuXHJcblx0XHRcdFx0XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ2ZvbGRlciB0byBpZ25vcmUnKVxyXG5cdFx0XHQuc2V0RGVzYygnZW50ZXIgZm9sZGVyIHdoaWNocyBjb250ZW50IHNoYWxsIGJlIGlnbm9yZWQuIFNlcGFyYXRlIHdpdGggXCIsIFwiLicpXHJcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignRW50ZXIgeW91ciBmb2xkZXIxLCBmb2xkZXIyLCBcdTIwMjYnKVxyXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb2xkZXJFeGNsdWRlKVxyXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKCdmb2xkZXIgdG8gZXhjbHVkZTogJyArIHZhbHVlKTtcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlckV4Y2x1ZGUgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pKTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1Byb2ZpbGUgUGFnZSBOYW1lJylcclxuXHRcdFx0LnNldERlc2MoJ3lvdSBjYW4gY2hhbmdlIGhlcmUgdGhlIG5hbWUgb2YgeW91ciBwcm9maWxlIHBhZ2UgaWYgeW91IGxpa2UuJylcclxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ25hbWUnKVxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZygnZm9sZGVyIHRvIGV4Y2x1ZGU6ICcgKyB2YWx1ZSk7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pKTtcclxuXHRcdFx0XHRcclxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ090aGVyIFNldHRpbmdzJyB9KTtcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnRGlzYWJsZSBJbml0IENvbW1hbmQnKVxyXG5cdFx0XHQuc2V0RGVzYygneW91IGNhbiByZW1vdmUgdGhlIGluaXQgY29tbWFuZCBmcm9tIGNvbW1hbmQgcHJvbXB0IGJ5IHN3aXRjaGluZyBvZmYuXFxucmVzdGFydCBuZWVkZWQuJylcclxuXHRcdFx0LmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiBcclxuXHRcdFx0XHR0b2dnbGVcclxuICAgICAgICAgIFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlSW5pdENvbW1hbmQpXHJcbiAgICAgICAgXHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICBcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVJbml0Q29tbWFuZCA9IHZhbHVlO1xyXG4gICAgICAgICAgICBcdFx0XHR0aGlzLnBsdWdpbi5zYXZlRGF0YSh0aGlzLnBsdWdpbi5zZXR0aW5ncyk7XHJcbiAgICAgICAgICBcdFx0XHR9KSxcclxuXHRcdFx0KTtcclxuXHJcblx0XHRcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnbGltaXQgdGhlIHZpc2libGUgbW9udGggaW4gdGhlIGNoYXJ0IG9uIHlvdXIgYXZhdGFyIHBhZ2U6ICcgKyB0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSlcclxuXHRcdFx0LnNldERlc2MoJ2lmIDAsIGFsbCBtb250aCB3aWxsIGJlIHNob3duLiBFbnRlciBhIG51bWJlciBob3cgbWFueSBtb250aCBzaGFsbCBiZSBzaG93bi4nKVxyXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignTnVtYmVyIG9mIE1vbnRoIHRvIHNob3cnKVxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNoYXJ0UmVkdXppZXJ1bmdNb25hdGUudG9TdHJpbmcoKSlcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuY2hhcnRSZWR1emllcnVuZ01vbmF0ZSA9IHBhcnNlSW50KHZhbHVlKTtcclxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcblx0XHRcdFx0fSkpO1xyXG5cclxuICBcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ1Byb2dyZXNzaXZlIFN1bW1hcml6YXRpb24nKVxyXG5cdFx0XHQuc2V0RGVzYygneW91IGNhbiBjaGFuZ2Ugd2hpY2ggZm9ybWF0dGluZyB5b3UgdXNlIGZvciBMYXllciAyIGFuZCAzLicpXHJcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdMYXllciAyIGlzIHVzdWFsbHkgKionKVxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnByb2dyZXNzaXZlU3VtTGF5ZXIyKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZygnZm9sZGVyIHRvIGV4Y2x1ZGU6ICcgKyB2YWx1ZSk7XHJcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnByb2dyZXNzaXZlU3VtTGF5ZXIyID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pKVxyXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcclxuXHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignTGF5ZXIgMyBpcyB1c3VhbGx5ID09JylcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm9ncmVzc2l2ZVN1bUxheWVyMylcclxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coJ2ZvbGRlciB0byBleGNsdWRlOiAnICsgdmFsdWUpO1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm9ncmVzc2l2ZVN1bUxheWVyMyA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuXHRcdFx0fSkpO1xyXG5cclxuXHR9XHJcbiAgfSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgfSwgX3R5cGVvZihvYmopO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCAiaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNEYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiB2YWx1ZSBhIGRhdGU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIERhdGUuIFRoZSBmdW5jdGlvbiB3b3JrcyBmb3IgZGF0ZXMgdHJhbnNmZXJyZWQgYWNyb3NzIGlmcmFtZXMuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZShOYU4pKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBzb21lIHZhbHVlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKCcyMDE0LTAyLTMxJylcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIG9iamVjdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSh7fSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8IF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBEYXRlXSc7XG59IiwgImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTtcblxuICAvLyBDbG9uZSB0aGUgZGF0ZVxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IF90eXBlb2YoYXJndW1lbnQpID09PSAnb2JqZWN0JyAmJiBhcmdTdHIgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ251bWJlcicgfHwgYXJnU3RyID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgU3RyaW5nXScpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlN0YXJ0aW5nIHdpdGggdjIuMC4wLWJldGEuMSBkYXRlLWZucyBkb2Vzbid0IGFjY2VwdCBzdHJpbmdzIGFzIGRhdGUgYXJndW1lbnRzLiBQbGVhc2UgdXNlIGBwYXJzZUlTT2AgdG8gcGFyc2Ugc3RyaW5ncy4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjc3RyaW5nLWFyZ3VtZW50c1wiKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufSIsICJpbXBvcnQgaXNEYXRlIGZyb20gXCIuLi9pc0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9XG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiBAcGFyYW0geyp9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHZhbGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgyMDE0LCAxLCAzMSkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWx1ZSwgY29udmVydGFibGUgaW50byBhIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKDEzOTM4MDQ4MDAwMDApXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNWYWxpZChkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIGlmICghaXNEYXRlKGRpcnR5RGF0ZSkgJiYgdHlwZW9mIGRpcnR5RGF0ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgcmV0dXJuICFpc05hTihOdW1iZXIoZGF0ZSkpO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0ludGVnZXIoZGlydHlOdW1iZXIpIHtcbiAgaWYgKGRpcnR5TnVtYmVyID09PSBudWxsIHx8IGRpcnR5TnVtYmVyID09PSB0cnVlIHx8IGRpcnR5TnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuICByZXR1cm4gbnVtYmVyIDwgMCA/IE1hdGguY2VpbChudW1iZXIpIDogTWF0aC5mbG9vcihudW1iZXIpO1xufSIsICJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBhZGRNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNzUwIG1pbGxpc2Vjb25kcyB0byAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gYWRkTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MzAuNzUwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59IiwgImltcG9ydCBhZGRNaWxsaXNlY29uZHMgZnJvbSBcIi4uL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN1Yk1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBzdWJ0cmFjdGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBzdWJ0cmFjdGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFN1YnRyYWN0IDc1MCBtaWxsaXNlY29uZHMgZnJvbSAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gc3ViTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MjkuMjUwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1Yk1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIC1hbW91bnQpO1xufSIsICJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0RheU9mWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZZZWFyVGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciBkaWZmZXJlbmNlID0gdGltZXN0YW1wIC0gc3RhcnRPZlllYXJUaW1lc3RhbXA7XG4gIHJldHVybiBNYXRoLmZsb29yKGRpZmZlcmVuY2UgLyBNSUxMSVNFQ09ORFNfSU5fREFZKSArIDE7XG59IiwgImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSAxO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwgImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhcik7XG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCAiaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgeWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwgImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENJU09XZWVrKGRhdGUpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkYXRlKS5nZXRUaW1lKCk7XG5cbiAgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwgInZhciBkZWZhdWx0T3B0aW9ucyA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRPcHRpb25zKCkge1xuICByZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdE9wdGlvbnMobmV3T3B0aW9ucykge1xuICBkZWZhdWx0T3B0aW9ucyA9IG5ld09wdGlvbnM7XG59IiwgImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8ud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAwKTtcblxuICAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsICJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJGZpcnN0V2Vla0NvbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpO1xuXG4gIC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuICB2YXIgZmlyc3RXZWVrT2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZOZXh0WWVhciwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWtPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mVGhpc1llYXIsIG9wdGlvbnMpO1xuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwgImltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpO1xuICB2YXIgeWVhciA9IGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWsgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vlay5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWssIG9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCAiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ1dlZWsoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuICB3aGlsZSAob3V0cHV0Lmxlbmd0aCA8IHRhcmdldExlbmd0aCkge1xuICAgIG91dHB1dCA9ICcwJyArIG91dHB1dDtcbiAgfVxuICByZXR1cm4gc2lnbiArIG91dHB1dDtcbn0iLCAiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24geShkYXRlLCB0b2tlbikge1xuICAgIC8vIEZyb20gaHR0cDovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS0zMS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9Gb3JtYXRfdG9rZW5zXG4gICAgLy8gfCBZZWFyICAgICB8ICAgICB5IHwgeXkgfCAgIHl5eSB8ICB5eXl5IHwgeXl5eXkgfFxuICAgIC8vIHwtLS0tLS0tLS0tfC0tLS0tLS18LS0tLXwtLS0tLS0tfC0tLS0tLS18LS0tLS0tLXxcbiAgICAvLyB8IEFEIDEgICAgIHwgICAgIDEgfCAwMSB8ICAgMDAxIHwgIDAwMDEgfCAwMDAwMSB8XG4gICAgLy8gfCBBRCAxMiAgICB8ICAgIDEyIHwgMTIgfCAgIDAxMiB8ICAwMDEyIHwgMDAwMTIgfFxuICAgIC8vIHwgQUQgMTIzICAgfCAgIDEyMyB8IDIzIHwgICAxMjMgfCAgMDEyMyB8IDAwMTIzIHxcbiAgICAvLyB8IEFEIDEyMzQgIHwgIDEyMzQgfCAzNCB8ICAxMjM0IHwgIDEyMzQgfCAwMTIzNCB8XG4gICAgLy8gfCBBRCAxMjM0NSB8IDEyMzQ1IHwgNDUgfCAxMjM0NSB8IDEyMzQ1IHwgMTIzNDUgfFxuXG4gICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModG9rZW4gPT09ICd5eScgPyB5ZWFyICUgMTAwIDogeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gTShkYXRlLCB0b2tlbikge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICByZXR1cm4gdG9rZW4gPT09ICdNJyA/IFN0cmluZyhtb250aCArIDEpIDogYWRkTGVhZGluZ1plcm9zKG1vbnRoICsgMSwgMik7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gZChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIGEoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF0ZS5nZXRVVENIb3VycygpIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlO1xuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlWzBdO1xuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlID09PSAnYW0nID8gJ2EubS4nIDogJ3AubS4nO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gaChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIEgoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIG0oZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDTWludXRlcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gcyhkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiBTKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIHZhciBmcmFjdGlvbmFsU2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMykpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZnJhY3Rpb25hbFNlY29uZHMsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsICJpbXBvcnQgZ2V0VVRDRGF5T2ZZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuaW1wb3J0IGxpZ2h0Rm9ybWF0dGVycyBmcm9tIFwiLi4vbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG52YXIgZGF5UGVyaW9kRW51bSA9IHtcbiAgYW06ICdhbScsXG4gIHBtOiAncG0nLFxuICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgbm9vbjogJ25vb24nLFxuICBtb3JuaW5nOiAnbW9ybmluZycsXG4gIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgbmlnaHQ6ICduaWdodCdcbn07XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCBNaWxsaXNlY29uZHMgaW4gZGF5ICAgICAgICAgICAgfFxuICogfCAgYiAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgfCAgQiAgfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgfFxuICogfCAgYyAgfCBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2VlayAgfCAgQyogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZSAgfCBMb2NhbCBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgfCAgRSAgfCBEYXkgb2Ygd2VlayAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgRiogfCBEYXkgb2Ygd2VlayBpbiBtb250aCAgICAgICAgICAgfFxuICogfCAgZyogfCBNb2RpZmllZCBKdWxpYW4gZGF5ICAgICAgICAgICAgfCAgRyAgfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaSEgfCBJU08gZGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgfCAgSSEgfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgfFxuICogfCAgaiogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfCAgSiogfCBMb2NhbGl6ZWQgaG91ciB3L28gZGF5IHBlcmlvZCAgfFxuICogfCAgayAgfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgfCAgSyAgfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbCogfCAoZGVwcmVjYXRlZCkgICAgICAgICAgICAgICAgICAgfCAgTCAgfCBTdGFuZC1hbG9uZSBtb250aCAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbyEgfCBPcmRpbmFsIG51bWJlciBtb2RpZmllciAgICAgICAgfCAgTyAgfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgfFxuICogfCAgcCEgfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgfCAgUCEgfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgfFxuICogfCAgcSAgfCBTdGFuZC1hbG9uZSBxdWFydGVyICAgICAgICAgICAgfCAgUSAgfCBRdWFydGVyICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgciogfCBSZWxhdGVkIEdyZWdvcmlhbiB5ZWFyICAgICAgICAgfCAgUiEgfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgdCEgfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgfCAgVCEgfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgfFxuICogfCAgdSAgfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgfCAgVSogfCBDeWNsaWMgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgdiogfCBUaW1lem9uZSAoZ2VuZXJpYyBub24tbG9jYXQuKSAgfCAgViogfCBUaW1lem9uZSAobG9jYXRpb24pICAgICAgICAgICAgfFxuICogfCAgdyAgfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgfCAgVyogfCBXZWVrIG9mIG1vbnRoICAgICAgICAgICAgICAgICAgfFxuICogfCAgeCAgfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgfCAgWCAgfCBUaW1lem9uZSAoSVNPLTg2MDEpICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgfFxuICogfCAgeiAgfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgfCAgWiogfCBUaW1lem9uZSAoYWxpYXNlcykgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAhIGFyZSBub24tc3RhbmRhcmQsIGJ1dCBpbXBsZW1lbnRlZCBieSBkYXRlLWZuczpcbiAqIC0gYG9gIG1vZGlmaWVzIHRoZSBwcmV2aW91cyB0b2tlbiB0byB0dXJuIGl0IGludG8gYW4gb3JkaW5hbCAoc2VlIGBmb3JtYXRgIGRvY3MpXG4gKiAtIGBpYCBpcyBJU08gZGF5IG9mIHdlZWsuIEZvciBgaWAgYW5kIGBpaWAgaXMgcmV0dXJucyBudW1lcmljIElTTyB3ZWVrIGRheXMsXG4gKiAgIGkuZS4gNyBmb3IgU3VuZGF5LCAxIGZvciBNb25kYXksIGV0Yy5cbiAqIC0gYElgIGlzIElTTyB3ZWVrIG9mIHllYXIsIGFzIG9wcG9zZWQgdG8gYHdgIHdoaWNoIGlzIGxvY2FsIHdlZWsgb2YgeWVhci5cbiAqIC0gYFJgIGlzIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLCBhcyBvcHBvc2VkIHRvIGBZYCB3aGljaCBpcyBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICogICBgUmAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBJYCBhbmQgYGlgXG4gKiAgIGZvciB1bml2ZXJzYWwgSVNPIHdlZWstbnVtYmVyaW5nIGRhdGUsIHdoZXJlYXNcbiAqICAgYFlgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgd2AgYW5kIGBlYFxuICogICBmb3Igd2Vlay1udW1iZXJpbmcgZGF0ZSBzcGVjaWZpYyB0byB0aGUgbG9jYWxlLlxuICogLSBgUGAgaXMgbG9uZyBsb2NhbGl6ZWQgZGF0ZSBmb3JtYXRcbiAqIC0gYHBgIGlzIGxvbmcgbG9jYWxpemVkIHRpbWUgZm9ybWF0XG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIEVyYVxuICBHOiBmdW5jdGlvbiBHKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBlcmEgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPiAwID8gMSA6IDA7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gQUQsIEJDXG4gICAgICBjYXNlICdHJzpcbiAgICAgIGNhc2UgJ0dHJzpcbiAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBBLCBCXG4gICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3RcbiAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiB5KGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAneW8nKSB7XG4gICAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnkoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIFkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHNpZ25lZFdlZWtZZWFyID0gZ2V0VVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucyk7XG4gICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICB2YXIgd2Vla1llYXIgPSBzaWduZWRXZWVrWWVhciA+IDAgPyBzaWduZWRXZWVrWWVhciA6IDEgLSBzaWduZWRXZWVrWWVhcjtcblxuICAgIC8vIFR3byBkaWdpdCB5ZWFyXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHR3b0RpZ2l0WWVhciwgMik7XG4gICAgfVxuXG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICdZbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUGFkZGluZ1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIFIoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgaXNvV2Vla1llYXIgPSBnZXRVVENJU09XZWVrWWVhcihkYXRlKTtcblxuICAgIC8vIFBhZGRpbmdcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiB1KGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBRdWFydGVyXG4gIFE6IGZ1bmN0aW9uIFEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAnUSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgY2FzZSAnUVEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG4gICAgICBjYXNlICdRbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuICAgICAgY2FzZSAnUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuICAgICAgY2FzZSAnUVFRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG4gICAgICBjYXNlICdRUVFRJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gcShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdxJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG4gICAgICBjYXNlICdxcSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG4gICAgICBjYXNlICdxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG4gICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gTShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICBjYXNlICdNTSc6XG4gICAgICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG4gICAgICBjYXNlICdNbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcbiAgICAgIGNhc2UgJ01NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAgIGNhc2UgJ01NTU0nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiBmdW5jdGlvbiBMKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMTCc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcbiAgICAgIGNhc2UgJ0xvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG4gICAgICBjYXNlICdMTExMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuICAgICAgY2FzZSAnTExMTCc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIHdlZWsgb2YgeWVhclxuICB3OiBmdW5jdGlvbiB3KGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciB3ZWVrID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKTtcbiAgICBpZiAodG9rZW4gPT09ICd3bycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IGZ1bmN0aW9uIEkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSBnZXRVVENJU09XZWVrKGRhdGUpO1xuICAgIGlmICh0b2tlbiA9PT0gJ0lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvV2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gZChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuZChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIEQoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mWWVhciA9IGdldFVUQ0RheU9mWWVhcihkYXRlKTtcbiAgICBpZiAodG9rZW4gPT09ICdEbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwge1xuICAgICAgICB1bml0OiAnZGF5T2ZZZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiBmdW5jdGlvbiBFKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgJ0VFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgJ0VFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gZShkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKE50aCBkYXkgb2Ygd2VlayB3aXRoIGN1cnJlbnQgbG9jYWxlIG9yIHdlZWtTdGFydHNPbilcbiAgICAgIGNhc2UgJ2UnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcbiAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2VlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdlZWVlJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2Vla1xuICBjOiBmdW5jdGlvbiBjKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG4gICAgICBjYXNlICdjYyc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcbiAgICAgIGNhc2UgJ2NvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdjY2NjJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gaShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgaXNvRGF5T2ZXZWVrID0gZGF5T2ZXZWVrID09PSAwID8gNyA6IGRheU9mV2VlaztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcbiAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29EYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAybmRcbiAgICAgIGNhc2UgJ2lvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnaWlpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiBhKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0sIFBNLCBtaWRuaWdodCwgbm9vblxuICBiOiBmdW5jdGlvbiBiKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYic6XG4gICAgICBjYXNlICdiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYmJiYic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiBCKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuICAgIGlmIChob3VycyA+PSAxNykge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ldmVuaW5nO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uYWZ0ZXJub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gNCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5tb3JuaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5pZ2h0O1xuICAgIH1cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdCJzpcbiAgICAgIGNhc2UgJ0JCJzpcbiAgICAgIGNhc2UgJ0JCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdCQkJCJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiBoKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2hvJykge1xuICAgICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG4gICAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMTI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiBIKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuSChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IGZ1bmN0aW9uIEsoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG4gICAgaWYgKHRva2VuID09PSAnS28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiBmdW5jdGlvbiBrKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG4gICAgaWYgKHRva2VuID09PSAna28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gbShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdtbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDTWludXRlcygpLCB7XG4gICAgICAgIHVuaXQ6ICdtaW51dGUnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIHMoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnc28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ1NlY29uZHMoKSwge1xuICAgICAgICB1bml0OiAnc2Vjb25kJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMucyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiBTKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gWChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIGlmICh0aW1lem9uZU9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuICdaJztcbiAgICB9XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhgXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYWGBcbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGAnKzAwOjAwJ2Agb3IgZXF1aXZhbGVudClcbiAgeDogZnVuY3Rpb24geChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4YFxuICAgICAgY2FzZSAneHh4eCc6XG4gICAgICBjYXNlICd4eCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eHhgXG4gICAgICBjYXNlICd4eHh4eCc6XG4gICAgICBjYXNlICd4eHgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChHTVQpXG4gIE86IGZ1bmN0aW9uIE8oZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuICAgICAgY2FzZSAnT09PTyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXRpb24pXG4gIHo6IGZ1bmN0aW9uIHooZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuICAgICAgY2FzZSAnenp6eic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFNlY29uZHMgdGltZXN0YW1wXG4gIHQ6IGZ1bmN0aW9uIHQoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihvcmlnaW5hbERhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gVChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBvcmlnaW5hbERhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVTaG9ydChvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApO1xuICB2YXIgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyhvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIGlmIChvZmZzZXQgJSA2MCA9PT0gMCkge1xuICAgIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgICByZXR1cm4gc2lnbiArIGFkZExlYWRpbmdaZXJvcyhNYXRoLmFicyhvZmZzZXQpIC8gNjAsIDIpO1xuICB9XG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCksIDIpO1xuICB2YXIgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCAidmFyIGRhdGVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xudmFyIHRpbWVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gdGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgY2FzZSAncHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICBjYXNlICdwcHBwJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xudmFyIGRhdGVUaW1lTG9uZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uIGRhdGVUaW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHZhciBtYXRjaFJlc3VsdCA9IHBhdHRlcm4ubWF0Y2goLyhQKykocCspPy8pIHx8IFtdO1xuICB2YXIgZGF0ZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsxXTtcbiAgdmFyIHRpbWVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMl07XG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuICBzd2l0Y2ggKGRhdGVQYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0LnJlcGxhY2UoJ3t7ZGF0ZX19JywgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKS5yZXBsYWNlKCd7e3RpbWV9fScsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59O1xudmFyIGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9uZ0Zvcm1hdHRlcnM7IiwgIi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSB7XG4gIHZhciB1dGNEYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSwgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSkpO1xuICB1dGNEYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSAtIHV0Y0RhdGUuZ2V0VGltZSgpO1xufSIsICJ2YXIgcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zID0gWydEJywgJ0REJ107XG52YXIgcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMgPSBbJ1lZJywgJ1lZWVknXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgaWYgKHRva2VuID09PSAnWVlZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnRCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnREQnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9XG59IiwgInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xudmFyIGZvcm1hdERpc3RhbmNlID0gZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICBpZiAodHlwZW9mIHRva2VuVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQudG9TdHJpbmcoKSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiAmJiBvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2luICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIGFnbyc7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0RGlzdGFuY2U7IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn0iLCAiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzXCI7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBNTU1NIGRvLCB5JyxcbiAgbG9uZzogJ01NTU0gZG8sIHknLFxuICBtZWRpdW06ICdNTU0gZCwgeScsXG4gIHNob3J0OiAnTU0vZGQveXl5eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdoOm1tOnNzIGEgenp6eicsXG4gIGxvbmc6ICdoOm1tOnNzIGEgeicsXG4gIG1lZGl1bTogJ2g6bW06c3MgYScsXG4gIHNob3J0OiAnaDptbSBhJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwgInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcbnZhciBmb3JtYXRSZWxhdGl2ZSA9IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdFJlbGF0aXZlOyIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5SW5kZXgsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29udGV4dCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuY29udGV4dCA/IFN0cmluZyhvcHRpb25zLmNvbnRleHQpIDogJ3N0YW5kYWxvbmUnO1xuICAgIHZhciB2YWx1ZXNBcnJheTtcbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YXIgX3dpZHRoID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLnZhbHVlc1tfd2lkdGhdIHx8IGFyZ3MudmFsdWVzW19kZWZhdWx0V2lkdGhdO1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4O1xuICAgIC8vIEB0cy1pZ25vcmU6IEZvciBzb21lIHJlYXNvbiBUeXBlU2NyaXB0IGp1c3QgZG9uJ3Qgd2FudCB0byBtYXRjaCBpdCwgbm8gbWF0dGVyIGhvdyBoYXJkIHdlIHRyeS4gSSBjaGFsbGVuZ2UgeW91IHRvIHRyeSB0byByZW1vdmUgaXQhXG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn0iLCAiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanNcIjtcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydCJywgJ0EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnQkMnLCAnQUQnXSxcbiAgd2lkZTogWydCZWZvcmUgQ2hyaXN0JywgJ0Fubm8gRG9taW5pJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUTEnLCAnUTInLCAnUTMnLCAnUTQnXSxcbiAgd2lkZTogWycxc3QgcXVhcnRlcicsICcybmQgcXVhcnRlcicsICczcmQgcXVhcnRlcicsICc0dGggcXVhcnRlciddXG59O1xuXG4vLyBOb3RlOiBpbiBFbmdsaXNoLCB0aGUgbmFtZXMgb2YgZGF5cyBvZiB0aGUgd2VlayBhbmQgbW9udGhzIGFyZSBjYXBpdGFsaXplZC5cbi8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuLy8gR2VuZXJhbGx5LCBmb3JtYXR0ZWQgZGF0ZXMgc2hvdWxkIGxvb2sgbGlrZSB0aGV5IGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc2VudGVuY2UsXG4vLyBlLmcuIGluIFNwYW5pc2ggbGFuZ3VhZ2UgdGhlIHdlZWtkYXlzIGFuZCBtb250aHMgc2hvdWxkIGJlIGluIHRoZSBsb3dlcmNhc2UuXG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydKJywgJ0YnLCAnTScsICdBJywgJ00nLCAnSicsICdKJywgJ0EnLCAnUycsICdPJywgJ04nLCAnRCddLFxuICBhYmJyZXZpYXRlZDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICB3aWRlOiBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ10sXG4gIHNob3J0OiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gIGFiYnJldmlhdGVkOiBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddLFxuICB3aWRlOiBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9XG59O1xudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyLCBfb3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcblxuICAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGAuXG4gIC8vXG4gIC8vIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLlxuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCc7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnbmQnO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bWJlciArICd0aCc7XG59O1xudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIGFyZ3VtZW50Q2FsbGJhY2socXVhcnRlcikge1xuICAgICAgcmV0dXJuIHF1YXJ0ZXIgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucykgPyBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSkgOiBmaW5kS2V5KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhrZXkpIDoga2V5O1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59XG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgJiYgcHJlZGljYXRlKG9iamVjdFtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoUGF0dGVybkZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MubWF0Y2hQYXR0ZXJuKTtcbiAgICBpZiAoIW1hdGNoUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLnBhcnNlUGF0dGVybik7XG4gICAgaWYgKCFwYXJzZVJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHBhcnNlUmVzdWx0WzBdKSA6IHBhcnNlUmVzdWx0WzBdO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59IiwgImltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzXCI7XG5pbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzXCI7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSh0aHxzdHxuZHxyZCk/IHF1YXJ0ZXIvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZlYnxtYXJ8YXByfG1heXxqdW58anVsfGF1Z3xzZXB8b2N0fG5vdnxkZWMpL2ksXG4gIHdpZGU6IC9eKGphbnVhcnl8ZmVicnVhcnl8bWFyY2h8YXByaWx8bWF5fGp1bmV8anVseXxhdWd1c3R8c2VwdGVtYmVyfG9jdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmovaSwgL15mL2ksIC9ebS9pLCAvXmEvaSwgL15tL2ksIC9eai9pLCAvXmovaSwgL15hL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXSxcbiAgYW55OiBbL15qYS9pLCAvXmYvaSwgL15tYXIvaSwgL15hcC9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmF1L2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdHdmXS9pLFxuICBzaG9ydDogL14oc3V8bW98dHV8d2V8dGh8ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW58bW9ufHR1ZXx3ZWR8dGh1fGZyaXxzYXQpL2ksXG4gIHdpZGU6IC9eKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9edy9pLCAvXnQvaSwgL15mL2ksIC9ecy9pXSxcbiAgYW55OiBbL15zdS9pLCAvXm0vaSwgL150dS9pLCAvXncvaSwgL150aC9pLCAvXmYvaSwgL15zYS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGF8cHxtaXxufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaSxcbiAgYW55OiAvXihbYXBdXFwuP1xccz9tXFwuP3xtaWRuaWdodHxub29ufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvXm1pL2ksXG4gICAgbm9vbjogL15uby9pLFxuICAgIG1vcm5pbmc6IC9tb3JuaW5nL2ksXG4gICAgYWZ0ZXJub29uOiAvYWZ0ZXJub29uL2ksXG4gICAgZXZlbmluZzogL2V2ZW5pbmcvaSxcbiAgICBuaWdodDogL25pZ2h0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiB2YWx1ZUNhbGxiYWNrKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIHZhbHVlQ2FsbGJhY2soaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwgImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tIFwiLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tIFwiLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tIFwiLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSBcIi4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoIGZyb20gXCIuL19saWIvbWF0Y2gvaW5kZXguanNcIjtcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnZW4tVVMnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDAgLyogU3VuZGF5ICovLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsICJpbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0TG9jYWxlOyIsICJpbXBvcnQgaXNWYWxpZCBmcm9tIFwiLi4vaXNWYWxpZC9pbmRleC5qc1wiO1xuaW1wb3J0IHN1Yk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9uZ0Zvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tIFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qc1wiOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcbnZhciBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1t5WVFxTUx3SWREZWNpaEhLa21zXW98KFxcdylcXDEqfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xuXG4vLyBUaGlzIFJlZ0V4cCBjYXRjaGVzIHN5bWJvbHMgZXNjYXBlZCBieSBxdW90ZXMsIGFuZCBhbHNvXG4vLyBzZXF1ZW5jZXMgb2Ygc3ltYm9scyBQLCBwLCBhbmQgdGhlIGNvbWJpbmF0aW9ucyBsaWtlIGBQUFBQUFBQcHBwcHBgXG52YXIgbG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvUCtwK3xQK3xwK3wnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcbnZhciBlc2NhcGVkU3RyaW5nUmVnRXhwID0gL14nKFteXSo/KSc/JC87XG52YXIgZG91YmxlUXVvdGVSZWdFeHAgPSAvJycvZztcbnZhciB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG5cbi8qKlxuICogQG5hbWUgZm9ybWF0XG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEZvcm1hdCB0aGUgZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIGluIHRoZSBnaXZlbiBmb3JtYXQuIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqID4gXHUyNkEwXHVGRTBGIFBsZWFzZSBub3RlIHRoYXQgdGhlIGBmb3JtYXRgIHRva2VucyBkaWZmZXIgZnJvbSBNb21lbnQuanMgYW5kIG90aGVyIGxpYnJhcmllcy5cbiAqID4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogVGhlIGNoYXJhY3RlcnMgd3JhcHBlZCBiZXR3ZWVuIHR3byBzaW5nbGUgcXVvdGVzIGNoYXJhY3RlcnMgKCcpIGFyZSBlc2NhcGVkLlxuICogVHdvIHNpbmdsZSBxdW90ZXMgaW4gYSByb3csIHdoZXRoZXIgaW5zaWRlIG9yIG91dHNpZGUgYSBxdW90ZWQgc2VxdWVuY2UsIHJlcHJlc2VudCBhICdyZWFsJyBzaW5nbGUgcXVvdGUuXG4gKiAoc2VlIHRoZSBsYXN0IGV4YW1wbGUpXG4gKlxuICogRm9ybWF0IG9mIHRoZSBzdHJpbmcgaXMgYmFzZWQgb24gVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZVxuICogd2l0aCBhIGZldyBhZGRpdGlvbnMgKHNlZSBub3RlIDcgYmVsb3cgdGhlIHRhYmxlKS5cbiAqXG4gKiBBY2NlcHRlZCBwYXR0ZXJuczpcbiAqIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBhdHRlcm4gfCBSZXN1bHQgZXhhbXBsZXMgICAgICAgICAgICAgICAgICAgfCBOb3RlcyB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tfFxuICogfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRy4uR0dHICB8IEFELCBCQyAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0cgICAgfCBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHRyAgIHwgQSwgQiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBDYWxlbmRhciB5ZWFyICAgICAgICAgICAgICAgICAgIHwgeSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHlvICAgICAgfCA0NHRoLCAxc3QsIDB0aCwgMTd0aCAgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5ICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5eSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgIHwgWSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlvICAgICAgfCA0NHRoLCAxc3QsIDE5MDB0aCwgMjAxN3RoICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZWSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgIHwgUiAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSICAgICAgfCAtNDMsIDAwLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlIgICAgIHwgLTA0MywgMDAwLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUiAgICB8IC0wMDQzLCAwMDAwLCAwMDAxLCAxOTAwLCAyMDE3ICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlJSICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUsNyB8XG4gKiB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICAgfCB1ICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXUgICAgICB8IC00MywgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dSAgICAgfCAtMDQzLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1ICAgIHwgLTAwNDMsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dXUgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgUXVhcnRlciAoZm9ybWF0dGluZykgICAgICAgICAgICB8IFEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUVEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgUXVhcnRlciAoc3RhbmQtYWxvbmUpICAgICAgICAgICB8IHEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcXEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgTW9udGggKGZvcm1hdHRpbmcpICAgICAgICAgICAgICB8IE0gICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU0gICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTSAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTU0gICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTW9udGggKHN0YW5kLWFsb25lKSAgICAgICAgICAgICB8IEwgICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTEwgICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTCAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTEwgICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgICB8IHcgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3byAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd3cgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgICB8IEkgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSUkgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgICB8IGQgICAgICAgfCAxLCAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzFzdCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGQgICAgICB8IDAxLCAwMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgICB8IEQgICAgICAgfCAxLCAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzY1dGgsIDM2NnRoICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREQgICAgICB8IDAxLCAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERERCAgICAgfCAwMDEsIDAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREREICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBEYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgICAgIHwgRS4uRUVFICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUVFICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICB8IGkgICAgICAgfCAxLCAyLCAzLCAuLi4sIDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgN3RoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWkgICAgICB8IDAxLCAwMiwgLi4uLCAwNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWkgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpaSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCA3ICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgfCBlICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW8gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWUgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZWUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoc3RhbmQtYWxvbmUpIHwgYyAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjYyAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2MgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjYyAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2NjICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICB8IGEuLmFhICAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWEgICAgIHwgYW0sIHBtICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYSAgICB8IGEubS4sIHAubS4gICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWFhICAgfCBhLCBwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgfCBiLi5iYiAgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiICAgICB8IGFtLCBwbSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmIgICAgfCBhLm0uLCBwLm0uLCBub29uLCBtaWRuaWdodCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiYiAgIHwgYSwgcCwgbiwgbWkgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgIHwgQi4uQkJCICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkIgICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCQiAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgIHwgaCAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAxMnRoICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBoaCAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgIHwgSCAgICAgICB8IDAsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhvICAgICAgfCAwdGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBISCAgICAgIHwgMDAsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgIHwgSyAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAwdGggICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLSyAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgIHwgayAgICAgICB8IDI0LCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtvICAgICAgfCAyNHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrayAgICAgIHwgMjQsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbSAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1vICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbSAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcyAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNvICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzcyAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgIHwgUyAgICAgICB8IDAsIDEsIC4uLiwgOSAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTICAgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1MgICAgIHwgMDAwLCAwMDEsIC4uLiwgOTk5ICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTUyAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvIFopICAgICAgICB8IFggICAgICAgfCAtMDgsICswNTMwLCBaICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWCAgICAgIHwgLTA4MDAsICswNTMwLCBaICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYICAgICB8IC0wODowMCwgKzA1OjMwLCBaICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFggICAgfCAtMDgwMCwgKzA1MzAsIFosICsxMjM0NTYgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYWCAgIHwgLTA4OjAwLCArMDU6MzAsIFosICsxMjozNDo1NiAgICAgIHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgIHwgeCAgICAgICB8IC0wOCwgKzA1MzAsICswMCAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4ICAgICAgfCAtMDgwMCwgKzA1MzAsICswMDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHggICAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eCAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAsICsxMjM0NTYgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHh4ICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwLCArMTI6MzQ6NTYgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICAgfCBPLi4uT09PIHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgT09PTyAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIgICAgIHxcbiAqIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pICB8IHouLi56enogfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCA2ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB6enp6ICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiw2ICAgfFxuICogfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgIHwgdCAgICAgICB8IDUxMjk2OTUyMCAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHR0ICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgfCBUICAgICAgIHwgNTEyOTY5NTIwOTAwICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVFQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgICB8IFAgICAgICAgfCAwNC8yOS8xNDUzICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUCAgICAgIHwgQXByIDI5LCAxNDUzICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQICAgICB8IEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFAgICAgfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICAgfCBwICAgICAgIHwgMTI6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHAgICAgICB8IDEyOjAwOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcCAgICAgfCAxMjowMDowMCBBTSBHTVQrMiAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHBwICAgIHwgMTI6MDA6MDAgQU0gR01UKzAyOjAwICAgICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBDb21iaW5hdGlvbiBvZiBkYXRlIGFuZCB0aW1lICAgIHwgUHAgICAgICB8IDA0LzI5LzE0NTMsIDEyOjAwIEFNICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQcHAgICAgfCBBcHIgMjksIDE0NTMsIDEyOjAwOjAwIEFNICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBwcHAgIHwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUHBwcHB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICB8IDIsNyAgIHxcbiAqIE5vdGVzOlxuICogMS4gXCJGb3JtYXR0aW5nXCIgdW5pdHMgKGUuZy4gZm9ybWF0dGluZyBxdWFydGVyKSBpbiB0aGUgZGVmYXVsdCBlbi1VUyBsb2NhbGVcbiAqICAgIGFyZSB0aGUgc2FtZSBhcyBcInN0YW5kLWFsb25lXCIgdW5pdHMsIGJ1dCBhcmUgZGlmZmVyZW50IGluIHNvbWUgbGFuZ3VhZ2VzLlxuICogICAgXCJGb3JtYXR0aW5nXCIgdW5pdHMgYXJlIGRlY2xpbmVkIGFjY29yZGluZyB0byB0aGUgcnVsZXMgb2YgdGhlIGxhbmd1YWdlXG4gKiAgICBpbiB0aGUgY29udGV4dCBvZiBhIGRhdGUuIFwiU3RhbmQtYWxvbmVcIiB1bml0cyBhcmUgYWx3YXlzIG5vbWluYXRpdmUgc2luZ3VsYXI6XG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBMTExMJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZCdgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBNTU1NJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZHUnYFxuICpcbiAqIDIuIEFueSBzZXF1ZW5jZSBvZiB0aGUgaWRlbnRpY2FsIGxldHRlcnMgaXMgYSBwYXR0ZXJuLCB1bmxlc3MgaXQgaXMgZXNjYXBlZCBieVxuICogICAgdGhlIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIChzZWUgYmVsb3cpLlxuICogICAgSWYgdGhlIHNlcXVlbmNlIGlzIGxvbmdlciB0aGFuIGxpc3RlZCBpbiB0YWJsZSAoZS5nLiBgRUVFRUVFRUVFRUVgKVxuICogICAgdGhlIG91dHB1dCB3aWxsIGJlIHRoZSBzYW1lIGFzIGRlZmF1bHQgcGF0dGVybiBmb3IgdGhpcyB1bml0LCB1c3VhbGx5XG4gKiAgICB0aGUgbG9uZ2VzdCBvbmUgKGluIGNhc2Ugb2YgSVNPIHdlZWtkYXlzLCBgRUVFRWApLiBEZWZhdWx0IHBhdHRlcm5zIGZvciB1bml0c1xuICogICAgYXJlIG1hcmtlZCB3aXRoIFwiMlwiIGluIHRoZSBsYXN0IGNvbHVtbiBvZiB0aGUgdGFibGUuXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU0nKSAvLz0+ICdOb3YnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NJykgLy89PiAnTidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqIDMuIFNvbWUgcGF0dGVybnMgY291bGQgYmUgdW5saW1pdGVkIGxlbmd0aCAoc3VjaCBhcyBgeXl5eXl5eXlgKS5cbiAqICAgIFRoZSBvdXRwdXQgd2lsbCBiZSBwYWRkZWQgd2l0aCB6ZXJvcyB0byBtYXRjaCB0aGUgbGVuZ3RoIG9mIHRoZSBwYXR0ZXJuLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAneXl5eXl5eXknKSAvLz0+ICcwMDAwMjAxNydgXG4gKlxuICogNC4gYFFRUVFRYCBhbmQgYHFxcXFxYCBjb3VsZCBiZSBub3Qgc3RyaWN0bHkgbnVtZXJpY2FsIGluIHNvbWUgbG9jYWxlcy5cbiAqICAgIFRoZXNlIHRva2VucyByZXByZXNlbnQgdGhlIHNob3J0ZXN0IGZvcm0gb2YgdGhlIHF1YXJ0ZXIuXG4gKlxuICogNS4gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIHBhdHRlcm5zIGFyZSBCLkMuIHllYXJzOlxuICpcbiAqICAgIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICogICAgfCBBQyAxIHwgICAxIHwgICAxIHxcbiAqICAgIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gKiAgICB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICpcbiAqICAgIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAqICAgIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZDpcbiAqXG4gKiAgICB8IFllYXIgfCBgeXlgIHwgYHV1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tLXwtLS0tLS18XG4gKiAgICB8IDEgICAgfCAgIDAxIHwgICAwMSB8XG4gKiAgICB8IDE0ICAgfCAgIDE0IHwgICAxNCB8XG4gKiAgICB8IDM3NiAgfCAgIDc2IHwgIDM3NiB8XG4gKiAgICB8IDE0NTMgfCAgIDUzIHwgMTQ1MyB8XG4gKlxuICogICAgVGhlIHNhbWUgZGlmZmVyZW5jZSBpcyB0cnVlIGZvciBsb2NhbCBhbmQgSVNPIHdlZWstbnVtYmVyaW5nIHllYXJzIChgWWAgYW5kIGBSYCksXG4gKiAgICBleGNlcHQgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhcnMgYXJlIGRlcGVuZGVudCBvbiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gXG4gKiAgICBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAoY29tcGFyZSBbZ2V0SVNPV2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0SVNPV2Vla1llYXJ9XG4gKiAgICBhbmQgW2dldFdlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldFdlZWtZZWFyfSkuXG4gKlxuICogNi4gU3BlY2lmaWMgbm9uLWxvY2F0aW9uIHRpbWV6b25lcyBhcmUgY3VycmVudGx5IHVuYXZhaWxhYmxlIGluIGBkYXRlLWZuc2AsXG4gKiAgICBzbyByaWdodCBub3cgdGhlc2UgdG9rZW5zIGZhbGwgYmFjayB0byBHTVQgdGltZXpvbmVzLlxuICpcbiAqIDcuIFRoZXNlIHBhdHRlcm5zIGFyZSBub3QgaW4gdGhlIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqICAgIC0gYGlgOiBJU08gZGF5IG9mIHdlZWtcbiAqICAgIC0gYElgOiBJU08gd2VlayBvZiB5ZWFyXG4gKiAgICAtIGBSYDogSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqICAgIC0gYHRgOiBzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgVGA6IG1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYG9gOiBvcmRpbmFsIG51bWJlciBtb2RpZmllclxuICogICAgLSBgUGA6IGxvbmcgbG9jYWxpemVkIGRhdGVcbiAqICAgIC0gYHBgOiBsb25nIGxvY2FsaXplZCB0aW1lXG4gKlxuICogOC4gYFlZYCBhbmQgYFlZWVlgIHRva2VucyByZXByZXNlbnQgd2Vlay1udW1iZXJpbmcgeWVhcnMgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggeWVhcnMuXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiA5LiBgRGAgYW5kIGBERGAgdG9rZW5zIHJlcHJlc2VudCBkYXlzIG9mIHRoZSB5ZWFyIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIGRheXMgb2YgdGhlIG1vbnRoLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCAtIHRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU9MV0gLSB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIgdG9rZW5zIGBZWWAgYW5kIGBZWVlZYDtcbiAqICAgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSBkYXkgb2YgeWVhciB0b2tlbnMgYERgIGFuZCBgRERgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmdcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBkYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBsb2NhbGl6ZWAgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBmb3JtYXRMb25nYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgN1xuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxMSBGZWJydWFyeSAyMDE0IGluIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIpLCBcImRvICdkZScgTU1NTSB5eXl5XCIsIHtcbiAqICAgbG9jYWxlOiBlb0xvY2FsZVxuICogfSlcbiAqIC8vPT4gJzItYSBkZSBqdWxpbyAyMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBFc2NhcGUgc3RyaW5nIGJ5IHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzOlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIsIDE1KSwgXCJoICdvJydjbG9jaydcIilcbiAqIC8vPT4gXCIzIG8nY2xvY2tcIlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdChkaXJ0eURhdGUsIGRpcnR5Rm9ybWF0U3RyLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfb3B0aW9ucyRsb2NhbGUsIF9yZWYyLCBfcmVmMywgX3JlZjQsIF9vcHRpb25zJGZpcnN0V2Vla0NvbiwgX29wdGlvbnMkbG9jYWxlMiwgX29wdGlvbnMkbG9jYWxlMiRvcHRpLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIsIF9yZWY1LCBfcmVmNiwgX3JlZjcsIF9vcHRpb25zJHdlZWtTdGFydHNPbiwgX29wdGlvbnMkbG9jYWxlMywgX29wdGlvbnMkbG9jYWxlMyRvcHRpLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwzLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0O1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGZvcm1hdFN0ciA9IFN0cmluZyhkaXJ0eUZvcm1hdFN0cik7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciBsb2NhbGUgPSAoX3JlZiA9IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubG9jYWxlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRsb2NhbGUgIT09IHZvaWQgMCA/IF9vcHRpb25zJGxvY2FsZSA6IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IGRlZmF1bHRMb2NhbGU7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSB0b0ludGVnZXIoKF9yZWYyID0gKF9yZWYzID0gKF9yZWY0ID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMiA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUyID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMiRvcHRpID0gX29wdGlvbnMkbG9jYWxlMi5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUyJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTIkb3B0aS5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWY0ICE9PSB2b2lkIDAgPyBfcmVmNCA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogMSk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWY1ID0gKF9yZWY2ID0gKF9yZWY3ID0gKF9vcHRpb25zJHdlZWtTdGFydHNPbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9vcHRpb25zJHdlZWtTdGFydHNPbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkd2Vla1N0YXJ0c09uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyRvcHRpID0gX29wdGlvbnMkbG9jYWxlMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTMkb3B0aS53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY3ICE9PSB2b2lkIDAgPyBfcmVmNyA6IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjYgIT09IHZvaWQgMCA/IF9yZWY2IDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0LndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjUgIT09IHZvaWQgMCA/IF9yZWY1IDogMCk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG4gIGlmICghbG9jYWxlLmxvY2FsaXplKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gbG9jYWxpemUgcHJvcGVydHknKTtcbiAgfVxuICBpZiAoIWxvY2FsZS5mb3JtYXRMb25nKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gZm9ybWF0TG9uZyBwcm9wZXJ0eScpO1xuICB9XG4gIHZhciBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgaWYgKCFpc1ZhbGlkKG9yaWdpbmFsRGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIH1cblxuICAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG4gIHZhciB0aW1lem9uZU9mZnNldCA9IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlKTtcbiAgdmFyIHV0Y0RhdGUgPSBzdWJNaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlLCB0aW1lem9uZU9mZnNldCk7XG4gIHZhciBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZVxuICB9O1xuICB2YXIgcmVzdWx0ID0gZm9ybWF0U3RyLm1hdGNoKGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICdwJyB8fCBmaXJzdENoYXJhY3RlciA9PT0gJ1AnKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcpO1xuICAgIH1cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIC8vIFJlcGxhY2UgdHdvIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIHdpdGggb25lIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJcbiAgICBpZiAoc3Vic3RyaW5nID09PSBcIicnXCIpIHtcbiAgICAgIHJldHVybiBcIidcIjtcbiAgICB9XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG4gICAgdmFyIGZvcm1hdHRlciA9IGZvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zKSAmJiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIFN0cmluZyhkaXJ0eURhdGUpKTtcbiAgICAgIH1cbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgU3RyaW5nKGRpcnR5RGF0ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcm1hdHRlcih1dGNEYXRlLCBzdWJzdHJpbmcsIGxvY2FsZS5sb2NhbGl6ZSwgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYCcgKyBmaXJzdENoYXJhY3RlciArICdgJyk7XG4gICAgfVxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY2xlYW5Fc2NhcGVkU3RyaW5nKGlucHV0KSB7XG4gIHZhciBtYXRjaGVkID0gaW5wdXQubWF0Y2goZXNjYXBlZFN0cmluZ1JlZ0V4cCk7XG4gIGlmICghbWF0Y2hlZCkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuICByZXR1cm4gbWF0Y2hlZFsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59IiwgImV4cG9ydCBjb25zdCBwb2ludHNOb3RlTWFqdXJpdHkgPSAxMDA7XHJcbmV4cG9ydCBjb25zdCBwb2ludHNNYWp1cml0eSA9IDEwO1xyXG5leHBvcnQgY29uc3QgcG9pbnRzRm9yRGFpbHlDaGFsbGVuZ2UgPSA1MDA7XHJcbmV4cG9ydCBjb25zdCBwb2ludHNGb3JXZWVrbHlDaGFsbGVuZ2UgPSAyMDAwO1xyXG5leHBvcnQgY29uc3QgYXZhdGFySW5pdENvbnRlbnQgPSAgYCMgQXZhdGFyXHJcblxyXG58ICAgICAgICB8ICAgICB8XHJcbnwgLS0tLS0tIHwgLS0tIHxcclxufCBMZXZlbCAgfCAwICAgIHxcclxufCBQb2ludHMgfCAwICAgIHxcclxuXmxldmVsQW5kUG9pbnRzXHRcclxuXFxgXFxgXFxgY2hhcnRcclxudHlwZTogYmFyXHJcbmxhYmVsczogW0V4cHJpcmllbmNlXVxyXG5zZXJpZXM6XHJcbiAgLSB0aXRsZTogcG9pbnRzIHJlYWNoZWRcclxuICAgIGRhdGE6IFswXVxyXG4gIC0gdGl0bGU6IHBvaW50cyB0byBlYXJuIHRvIGxldmVsIHVwXHJcbiAgICBkYXRhOiBbMTAwMF1cclxueE1pbjogMFxyXG54TWF4OiAxMDAwXHJcbnRlbnNpb246IDAuMlxyXG53aWR0aDogNDAlXHJcbmxhYmVsQ29sb3JzOiBmYWxzZVxyXG5maWxsOiBmYWxzZVxyXG5iZWdpbkF0WmVybzogZmFsc2VcclxuYmVzdEZpdDogZmFsc2VcclxuYmVzdEZpdFRpdGxlOiB1bmRlZmluZWRcclxuYmVzdEZpdE51bWJlcjogMFxyXG5zdGFja2VkOiB0cnVlXHJcbmluZGV4QXhpczogeVxyXG54VGl0bGU6IFwicHJvZ3Jlc3NcIlxyXG5sZWdlbmQ6IGZhbHNlXHJcblxcYFxcYFxcYFxyXG5cclxufCAgICAgICAgICAgICB8ICAgICB8ICAgICAgIHxcclxufCAtLS0tLS0tLS0tLSB8IC0tLSB8IC0tLS0tIHxcclxufCAqKmRhaWx5IE5vdGVzKiogfCAqNTAwRVAqIHwgKiowLzIqKiB8XHJcbl5kYWlseU5vdGVzQ2hhbGxlbmdlXHJcbnwgIHwgICAgIHx8XHJcbnwgLS0tLSB8IC0tLSB8IC0tLSB8XHJcbnwgKip3ZWVrbHkgTm90ZXMqKiB8ICoyMDAwRVAqICAgICB8ICAqKjAvNyoqICAgfFxyXG5ed2Vla2x5Tm90ZXNDaGFsbGVuZ2VcclxuXFxgXFxgXFxgY2hhcnRcclxudHlwZTogYmFyXHJcbmxhYmVsczogW05vdGVzXVxyXG5zZXJpZXM6XHJcbiAgLSB0aXRsZTogZGF5cyBkb25lIGluIGEgcm93XHJcbiAgICBkYXRhOiBbMF1cclxuICAtIHRpdGxlOiBkYXlzIHRvIGRvIGluIGEgcm93XHJcbiAgICBkYXRhOiBbN11cclxueE1pbjogMFxyXG54TWF4OiA3XHJcbnRlbnNpb246IDAuMlxyXG53aWR0aDogNDAlXHJcbmxhYmVsQ29sb3JzOiBmYWxzZVxyXG5maWxsOiBmYWxzZVxyXG5iZWdpbkF0WmVybzogZmFsc2VcclxuYmVzdEZpdDogZmFsc2VcclxuYmVzdEZpdFRpdGxlOiB1bmRlZmluZWRcclxuYmVzdEZpdE51bWJlcjogMFxyXG5zdGFja2VkOiB0cnVlXHJcbmluZGV4QXhpczogeVxyXG54VGl0bGU6IFwiZGF5c1wiXHJcbmxlZ2VuZDogZmFsc2VcclxuXFxgXFxgXFxgXHJcblxyXG58IExldmVsIHwgQ291bnQgfFxyXG58IDotLS06IHwgOi0tLTogfFxyXG58IE1hanVyaXR5IDUgfFxcYCQ9ZHYucGFnZXMoKS53aGVyZShwID0+IFs1LCAnNScsICc1XHUyN0ExXHVGRTBGJywgJzVcdTJCMDdcdUZFMEYnLCAnNVx1MkIwNlx1RkUwRiddLmluY2x1ZGVzKHAuZmlsZS5mcm9udG1hdHRlclsnbm90ZS1tYXR1cml0eSddKSkubGVuZ3RoXFxgfFxyXG58IE1hanVyaXR5IDQgfFxcYCQ9ZHYucGFnZXMoKS53aGVyZShwID0+IFs0LCAnNCcsICc0XHUyN0ExXHVGRTBGJywgJzRcdTJCMDdcdUZFMEYnLCAnNFx1MkIwNlx1RkUwRiddLmluY2x1ZGVzKHAuZmlsZS5mcm9udG1hdHRlclsnbm90ZS1tYXR1cml0eSddKSkubGVuZ3RoXFxgfFxyXG58IE1hanVyaXR5IDMgfFxcYCQ9ZHYucGFnZXMoKS53aGVyZShwID0+IFszLCAnMycsICczXHUyN0ExXHVGRTBGJywgJzNcdTJCMDdcdUZFMEYnLCAnM1x1MkIwNlx1RkUwRiddLmluY2x1ZGVzKHAuZmlsZS5mcm9udG1hdHRlclsnbm90ZS1tYXR1cml0eSddKSkubGVuZ3RoXFxgfFxyXG58IE1hanVyaXR5IDIgfFxcYCQ9ZHYucGFnZXMoKS53aGVyZShwID0+IFsyLCAnMicsICcyXHUyN0ExXHVGRTBGJywgJzJcdTJCMDdcdUZFMEYnLCAnMlx1MkIwNlx1RkUwRiddLmluY2x1ZGVzKHAuZmlsZS5mcm9udG1hdHRlclsnbm90ZS1tYXR1cml0eSddKSkubGVuZ3RoXFxgfFxyXG58IE1hanVyaXR5IDEgfFxcYCQ9ZHYucGFnZXMoKS53aGVyZShwID0+IFsxLCAnMScsICcxXHUyN0ExXHVGRTBGJywgJzFcdTJCMDdcdUZFMEYnLCAnMVx1MkIwNlx1RkUwRiddLmluY2x1ZGVzKHAuZmlsZS5mcm9udG1hdHRlclsnbm90ZS1tYXR1cml0eSddKSkubGVuZ3RoXFxgfFxyXG58IE1hanVyaXR5IDAgfFxcYCQ9ZHYucGFnZXMoKS53aGVyZShwID0+IFswLCAnMCcsICcwXHUyN0ExXHVGRTBGJywgJzBcdTJCMDdcdUZFMEYnLCAnMFx1MkIwNlx1RkUwRiddLmluY2x1ZGVzKHAuZmlsZS5mcm9udG1hdHRlclsnbm90ZS1tYXR1cml0eSddKSkubGVuZ3RoXFxgfFxyXG5cclxuXHJcblxcYFxcYFxcYGNoYXJ0XHJcbnR5cGU6IGJhclxyXG5sYWJlbHM6IFswLCAwLCAwXVxyXG5zZXJpZXM6XHJcbiAgLSB0aXRsZTogbW9kaWZpZWRcclxuICAgIGRhdGE6IFswLCAwLCAwXVxyXG50ZW5zaW9uOiAwLjJcclxud2lkdGg6IDgwICVcclxubGFiZWxDb2xvcnM6IGZhbHNlXHJcbmZpbGw6IGZhbHNlXHJcbmJlZ2luQXRaZXJvOiBmYWxzZVxyXG5iZXN0Rml0OiBmYWxzZVxyXG5iZXN0Rml0VGl0bGU6IHVuZGVmaW5lZFxyXG5iZXN0Rml0TnVtYmVyOiAwXHJcbnN0YWNrZWQ6IHRydWVcclxueVRpdGxlOiBcIk51bWJlciBvZiBOb3Rlc1wiXHJcbnhUaXRsZTogXCJNb250aHNcIlxyXG54TWluOiAwXHJcblxcYFxcYFxcYFxyXG5eQ2hhcnRNb250aFxyXG5cclxuXHJcbiMjIyBCYWRnZXNcclxuIyMjIyBhY2hpZXZlZFxyXG5cclxuXHJcbiMjIyMgb3V0c3RhbmRpbmdcclxubGV2ZWwgNTogKkVubGlnaHRlbmVkIE5vdmljZSpcclxubGV2ZWwgMTA6ICpDdXJpb3VzIENvbm5vaXNzZXVyKlxyXG5sZXZlbCAyMDogKkJyYWluaWFjIFRyYWlsYmxhemVyKlxyXG5sZXZlbCAyNzogKlNjaG9sYXJseSBUcmFpbGJsYXplcipcclxubGV2ZWwgMzU6ICpJbmZvIE5pbmphIE1hc3RlcipcclxubGV2ZWwgNDI6ICpXaXNlIE93bCBHdXJ1KlxyXG5sZXZlbCA1MDogKkVpbnN0ZWluIEluY2FybmF0ZSpcclxubGV2ZWwgNjA6ICpNYXN0ZXJtaW5kIFNhZ2UqXHJcbmxldmVsIDc1OiAqQ2VyZWJyYWwgTWFlc3RybypcclxubGV2ZWwgODI6ICpaZW4gS25vd2xlZGdlIEtlZXBlcipcclxubGV2ZWwgOTA6ICpHcmFuZCBBcmNoaXZpc3QgT3ZlcmxvcmQqXHJcbmxldmVsIDEwMDogKk9tbmlzY2llbnQgU2FnZSBvZiBFdmVyeXRoaW5nKlxyXG5cclxuXHJcblxyXG4jIyMgKipub3RlLW1hdHVyaXR5ID0gNSoqXHJcblxcYFxcYFxcYGRhdGF2aWV3XHJcbkxpc3QgTm90ZU1hdHVyaXR5Q291bnRcclxuZnJvbSBcIlwiXHJcbldoZXJlIG5vdGUtbWF0dXJpdHkgPSA1IG9yIG5vdGUtbWF0dXJpdHkgPSBcIjVcIiBvciBub3RlLW1hdHVyaXR5ID0gXCI1XHUyN0ExXHVGRTBGXCIgb3Igbm90ZS1tYXR1cml0eSA9IFwiNVx1MkIwNlx1RkUwRlwiIG9yIG5vdGUtbWF0dXJpdHkgPSBcIjVcdTJCMDdcdUZFMEZcIlxyXG5cXGBcXGBcXGBcclxuXHJcbiMjIyAqKm5vdGUtbWF0dXJpdHkgPSA0KipcclxuXFxgXFxgXFxgZGF0YXZpZXdcclxuTGlzdCBOb3RlTWF0dXJpdHlDb3VudFxyXG5mcm9tIFwiXCJcclxuV2hlcmUgbm90ZS1tYXR1cml0eSA9IDQgb3Igbm90ZS1tYXR1cml0eSA9IFwiNFwiIG9yIG5vdGUtbWF0dXJpdHkgPSBcIjRcdTI3QTFcdUZFMEZcIiBvciBub3RlLW1hdHVyaXR5ID0gXCI0XHUyQjA2XHVGRTBGXCIgb3Igbm90ZS1tYXR1cml0eSA9IFwiNFx1MkIwN1x1RkUwRlwiXHJcblxcYFxcYFxcYFxyXG5cclxuIyMjIG5vdGUtbWF0dXJpdHkgPSAzXHJcblxcYFxcYFxcYGRhdGF2aWV3XHJcbkxpc3QgTm90ZU1hdHVyaXR5Q291bnRcclxuZnJvbSBcIlwiXHJcbldoZXJlIG5vdGUtbWF0dXJpdHkgPSAzIG9yIG5vdGUtbWF0dXJpdHkgPSBcIjNcIiBvciBub3RlLW1hdHVyaXR5ID0gXCIzXHUyN0ExXHVGRTBGXCIgb3Igbm90ZS1tYXR1cml0eSA9IFwiM1x1MkIwNlx1RkUwRlwiIG9yIG5vdGUtbWF0dXJpdHkgPSBcIjNcdTJCMDdcdUZFMEZcIlxyXG5cXGBcXGBcXGBcclxuXHJcbiMjIyBub3RlLW1hdHVyaXR5ID0gMlxyXG5cXGBcXGBcXGBkYXRhdmlld1xyXG5MaXN0IE5vdGVNYXR1cml0eUNvdW50XHJcbmZyb20gXCJcIlxyXG5XaGVyZSBub3RlLW1hdHVyaXR5ID0gMiBvciBub3RlLW1hdHVyaXR5ID0gXCIyXCIgb3Igbm90ZS1tYXR1cml0eSA9IFwiMlx1MjdBMVx1RkUwRlwiIG9yIG5vdGUtbWF0dXJpdHkgPSBcIjJcdTJCMDZcdUZFMEZcIiBvciBub3RlLW1hdHVyaXR5ID0gXCIyXHUyQjA3XHVGRTBGXCJcclxuXFxgXFxgXFxgXHJcblxyXG4jIyMgbm90ZS1tYXR1cml0eSA9IDFcclxuXFxgXFxgXFxgZGF0YXZpZXdcclxuTGlzdCBOb3RlTWF0dXJpdHlDb3VudFxyXG5mcm9tIFwiXCJcclxuV2hlcmUgbm90ZS1tYXR1cml0eSA9IDEgb3Igbm90ZS1tYXR1cml0eSA9IFwiMVwiIG9yIG5vdGUtbWF0dXJpdHkgPSBcIjFcdTI3QTFcdUZFMEZcIiBvciBub3RlLW1hdHVyaXR5ID0gXCIxXHUyQjA2XHVGRTBGXCIgb3Igbm90ZS1tYXR1cml0eSA9IFwiMVx1MkIwN1x1RkUwRlwiXHJcblxcYFxcYFxcYFxyXG5cclxuIyMjIG5vdGUtbWF0dXJpdHkgPSAwXHJcblxcYFxcYFxcYGRhdGF2aWV3XHJcbkxpc3QgTm90ZU1hdHVyaXR5Q291bnRcclxuZnJvbSBcIlwiXHJcbldoZXJlIG5vdGUtbWF0dXJpdHkgPSAwIG9yIG5vdGUtbWF0dXJpdHkgPSBcIjBcIiBvciBub3RlLW1hdHVyaXR5ID0gXCIwXHUyN0ExXHVGRTBGXCIgb3Igbm90ZS1tYXR1cml0eSA9IFwiMFx1MkIwNlx1RkUwRlwiIG9yIG5vdGUtbWF0dXJpdHkgPSBcIjBcdTJCMDdcdUZFMEZcIlxyXG5cXGBcXGBcXGBcclxuYDtcclxuIiwgImltcG9ydCB7IFRGaWxlLCBBcHAsIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XHJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmF0ZVByb2dyZXNzaXZlU3VtbWFyaXphdGlvbihjaGFyQ291bnRUb3RhbDogbnVtYmVyLCBsYXllcjJjb3VudDogbnVtYmVyLCBsYXllcjNjb3VudDogbnVtYmVyKTogbnVtYmVyIHtcclxuXHRjb25zdCBwZXJjZW50TGF5ZXIyID0gbGF5ZXIyY291bnQgKiAxMDAgLyBjaGFyQ291bnRUb3RhbDtcclxuICAgIGNvbnN0IHBlcmNlbnRMYXllcjMgPSBsYXllcjNjb3VudCAqIDEwMCAvIGxheWVyMmNvdW50O1xyXG5cdHZhciBsYXllcjJtYWp1cml0eSA9IDA7XHJcblx0dmFyIGxheWVyM21hanVyaXR5ID0gMDtcclxuXHR2YXIgbWFqdXJpdHkgPSAwO1xyXG5cdGlmIChjaGFyQ291bnRUb3RhbCA8IDMwMDApIHtcclxuXHRcdG1hanVyaXR5ID0gMDtcclxuXHRcdC8vY29uc29sZS5sb2coYE5vdGUgaXMgbm90IGxvbmcgZW5vdWdoIHRvIGdldCBpbnRvIGNhbGN1bGF0aW9uIGZvciBtYWp1cml0eS4gVGhlIHRvdGFsIGNoYXJhY3RlciBjb3VudCBpcyAke2NoYXJDb3VudFRvdGFsfWApO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRpZiAocGVyY2VudExheWVyMiA9PSAwKSB7XHJcblx0XHRcdGxheWVyMm1hanVyaXR5ID0gMDtcclxuXHRcdH0gZWxzZSBpZiAocGVyY2VudExheWVyMiA8PSAxMCkge1xyXG5cdFx0XHRsYXllcjJtYWp1cml0eSA9IDU7XHJcblx0XHR9IGVsc2UgaWYgKHBlcmNlbnRMYXllcjIgPD0gMjApIHtcclxuXHRcdFx0bGF5ZXIybWFqdXJpdHkgPSA0O1xyXG5cdFx0fSBlbHNlIGlmIChwZXJjZW50TGF5ZXIyIDw9IDMwKSB7XHJcblx0XHRcdGxheWVyMm1hanVyaXR5ID0gMztcclxuXHRcdH0gZWxzZSBpZiAocGVyY2VudExheWVyMiA8PSA0MCkge1xyXG5cdFx0XHRsYXllcjJtYWp1cml0eSA9IDI7XHJcblx0XHR9IGVsc2UgaWYgKHBlcmNlbnRMYXllcjIgPD0gNDApIHtcclxuXHRcdFx0bGF5ZXIybWFqdXJpdHkgPSAxO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bGF5ZXIybWFqdXJpdHkgPSAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChsYXllcjNjb3VudCA9PSAwKSB7XHJcblx0XHRcdGxheWVyM21hanVyaXR5ID0gMDtcclxuXHRcdH0gZWxzZSBpZiAocGVyY2VudExheWVyMyA8PSAxMCkge1xyXG5cdFx0XHRsYXllcjNtYWp1cml0eSA9IDU7XHJcblx0XHR9IGVsc2UgaWYgKHBlcmNlbnRMYXllcjMgPD0gMjApIHtcclxuXHRcdFx0bGF5ZXIzbWFqdXJpdHkgPSA0O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bGF5ZXIzbWFqdXJpdHkgPSAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChsYXllcjJtYWp1cml0eSA9PSAxICYmIGxheWVyM21hanVyaXR5ID09IDApIHtcclxuXHRcdFx0bWFqdXJpdHkgPSAxO1xyXG5cdFx0fSBlbHNlIGlmIChsYXllcjJtYWp1cml0eSA9PSAyICYmIGxheWVyM21hanVyaXR5ID09IDApIHtcclxuXHRcdFx0bWFqdXJpdHkgPSAyO1xyXG5cdFx0fSBlbHNlIGlmIChsYXllcjJtYWp1cml0eSA+PSAzICYmIGxheWVyM21hanVyaXR5ID09IDApIHtcclxuXHRcdFx0bWFqdXJpdHkgPSAzO1xyXG5cdFx0fSBlbHNlIGlmICgobGF5ZXIybWFqdXJpdHkgPT0gMyB8fCBsYXllcjJtYWp1cml0eSA9PSA0KSAmJiAobGF5ZXIzbWFqdXJpdHkgPT0gNCB8fCBsYXllcjNtYWp1cml0eSA9PSA1KSkge1xyXG5cdFx0XHRtYWp1cml0eSA9IDQ7XHJcblx0XHR9IGVsc2UgaWYgKGxheWVyMm1hanVyaXR5ID09IDUgJiYgbGF5ZXIzbWFqdXJpdHkgPT0gNSkge1xyXG5cdFx0XHRtYWp1cml0eSA9IDU7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRtYWp1cml0eSA9IDA7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRcclxuXHQvL2NvbnNvbGUubG9nKGBsYXllcjJtYWp1cml0eTogJHtsYXllcjJtYWp1cml0eX0gXFx0bGF5ZXIzbWFqdXJpdHk6ICR7bGF5ZXIzbWFqdXJpdHl9IFxcdG1hanVyaXR5OiAke21hanVyaXR5fWApO1xyXG5cdC8vY29uc29sZS5sb2coYHBlcmNlbnRMYXllcjI6ICR7cGVyY2VudExheWVyMn0gXFx0cGVyY2VudExheWVyMzogJHtwZXJjZW50TGF5ZXIzfSBcXHRtYWp1cml0eTogJHttYWp1cml0eX1gKTtcclxuXHQvL2NvbnNvbGUubG9nKGBjaGFyQ291bnRUb3RhbDogJHtjaGFyQ291bnRUb3RhbH1gKTtcclxuXHRyZXR1cm4gbWFqdXJpdHk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY291bnRMYXllcjJBbmRMYXllcjNDaGFyYWN0ZXJzKGNvbnRlbnQ6IHN0cmluZywgZmlsZW5hbWU6IHN0cmluZywgbGF5ZXIyOiBzdHJpbmcsIGxheWVyMzogc3RyaW5nKTogeyBjaGFyQ291bnQ6IG51bWJlcjsgaGlnaGxpZ2h0ZWRDb3VudDogbnVtYmVyOyBib2xkQ291bnQ6IG51bWJlciB9IHtcclxuICBcclxuXHRjb25zdCBmaWxlbmFtZVdpdGhvdXRFeHRlbnNpb24gPSBmaWxlbmFtZTsgLy8uc2xpY2UoMCwgLWZpbGVuYW1lLmxlbmd0aCk7XHJcblx0Ly8gY29uc29sZS5sb2coYGZpbGVuYW1lV2l0aG91dEV4dGVuc2lvbjogJHtmaWxlbmFtZVdpdGhvdXRFeHRlbnNpb259YCk7XHJcblxyXG5cdC8vIFJlbW92ZSBtYXJrZG93biBmb3JtYXR0aW5nIHN5bWJvbHNcclxuXHRjb25zdCBzdHJpcHBlZENvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoL1sqX35gXS9nLCBcIlwiKTtcclxuXHQvLyBjb25zb2xlLmxvZyhgZmlsZW5hbWVXaXRob3V0RXh0ZW5zaW9uOiAke2ZpbGVuYW1lV2l0aG91dEV4dGVuc2lvbn1gKTtcclxuXHJcblx0Ly8gUmVtb3ZlIG1hcmtkb3duIGhlYWRpbmdzIHRoYXQgbWF0Y2ggdGhlIGZpbGVuYW1lXHJcblx0Y29uc3QgaGVhZGluZ1JlZ2V4ID0gL14oIyspXFxzKC4qKSQvZ207XHJcblx0Y29uc3QgY29udGVudFdpdGhvdXRIZWFkaW5ncyA9IHN0cmlwcGVkQ29udGVudC5yZXBsYWNlKGhlYWRpbmdSZWdleCwgKG1hdGNoLCBwMSwgcDIpID0+IHtcclxuXHRcclxuXHRcdC8vIGNvbnNvbGUubG9nKGBwMjogJHtwMn1gKTtcclxuXHRcdGlmIChwMiA9PT0gZmlsZW5hbWVXaXRob3V0RXh0ZW5zaW9uKSB7XHJcblx0XHRcdHJldHVybiBcIlwiO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG1hdGNoO1xyXG5cdH0pO1xyXG5cdC8vIGNvbnNvbGUubG9nKGBjb250ZW50V2l0aG91dEhlYWRpbmdzOiAke2NvbnRlbnRXaXRob3V0SGVhZGluZ3N9YCk7XHJcblxyXG5cdC8vIFJlbW92ZSBtZXRhZGF0YSBibG9ja3MgZnJvbSBjb3VudFxyXG5cdGNvbnN0IG1ldGFkYXRhUmVnZXggPSAvXi0tLVtcXHNcXFNdKj8tLS0vZ207XHJcblx0Y29uc3QgY29udGVudFdpdGhvdXRNZXRhZGF0YSA9IGNvbnRlbnRXaXRob3V0SGVhZGluZ3MucmVwbGFjZShtZXRhZGF0YVJlZ2V4LCBcIlwiKTtcclxuXHQvLyBjb25zb2xlLmxvZyhgY29udGVudFdpdGhvdXRNZXRhZGF0YTogJHtjb250ZW50V2l0aG91dE1ldGFkYXRhfWApO1xyXG5cclxuXHQvLyBSZW1vdmUgI3RhZ3MgZnJvbSBjb3VudFxyXG5cdGNvbnN0IHRhZ1JlZ2V4ID0gLyNbXlxcc10rL2c7XHJcblx0Y29uc3QgY29udGVudFdpdGhvdXRUYWdzID0gY29udGVudFdpdGhvdXRNZXRhZGF0YS5yZXBsYWNlKHRhZ1JlZ2V4LCBcIlwiKTtcclxuXHQvLyBjb25zb2xlLmxvZyhgY29udGVudFdpdGhvdXRUYWdzOiAke2NvbnRlbnRXaXRob3V0VGFnc31gKTtcclxuXHJcblx0Ly8gUmVtb3ZlIGxpbmtzIGFuZCBXaWtpcGVkaWEtbGlua3MgZnJvbSBjb3VudFxyXG5cdGNvbnN0IGxpbmtSZWdleCA9IC9cXFsuKj9cXF1cXCguKj9cXCl8XFxbXFxbLio/XFxdXFxdL2c7XHJcblx0Y29uc3QgY29udGVudFdpdGhvdXRMaW5rcyA9IGNvbnRlbnRXaXRob3V0VGFncy5yZXBsYWNlKGxpbmtSZWdleCwgXCJcIik7XHJcblx0Ly8gY29uc29sZS5sb2coYGNvbnRlbnRXaXRob3V0TGlua3M6ICR7Y29udGVudFdpdGhvdXRMaW5rc31gKTtcclxuXHJcblx0Ly8gUmVtb3ZlIGJsYW5rIG5ld2xpbmVzXHJcblx0Y29uc3QgZmlsdGVyZWRDb250ZW50OiBzdHJpbmcgPSBjb250ZW50V2l0aG91dExpbmtzXHJcblx0LnNwbGl0KCdcXG4nKSAvLyBTcGxpdCB0aGUgY29udGVudCBpbnRvIGFuIGFycmF5IG9mIGxpbmVzXHJcblx0LmZpbHRlcihsaW5lID0+IGxpbmUudHJpbSgpICE9PSAnJykgLy8gRmlsdGVyIG91dCBsaW5lcyB0aGF0IGFyZSBlbXB0eSBvciBjb250YWluIG9ubHkgd2hpdGVzcGFjZVxyXG5cdC5maWx0ZXIobGluZSA9PiBsaW5lLnRyaW0oKSAhPT0gJy0tLScpIC8vIHJlbW92ZSAtLS0gb24gc2luZ2xlIGxpbmVzXHJcblx0LmpvaW4oJ1xcbicpOyAvLyBKb2luIHRoZSByZW1haW5pbmcgbGluZXMgYmFjayBpbnRvIGEgc3RyaW5nLCBzZXBhcmF0ZWQgYnkgbmV3bGluZXNcclxuXHQvLyBjb25zb2xlLmxvZyhgZmlsdGVyZWRDb250ZW50OiAke2ZpbHRlcmVkQ29udGVudH1gKTtcclxuXHJcblx0Ly8gQ291bnQgdGhlIHJlbWFpbmluZyBjaGFyYWN0ZXJzXHJcblx0Y29uc3QgY2hhckNvdW50ID0gZmlsdGVyZWRDb250ZW50Lmxlbmd0aDtcclxuXHQvLyBjb25zb2xlLmxvZyhgY2hhckNvdW50OiAke2NoYXJDb3VudH1gKTtcclxuXHJcblxyXG5cdC8vIGNhbGN1bGF0ZSBMYXllciAyICYgMyBMZW5ndGhcclxuXHJcblx0Ly8gQ291bnQgdGhlIGhpZ2hsaWdodGVkIGFuZCBib2xkIGNoYXJhY3RlcnNcclxuXHRsZXQgaGlnaGxpZ2h0ZWRDb3VudCA9IDA7XHJcblx0bGV0IGJvbGRDb3VudCA9IDA7XHJcbiAgXHJcblx0dmFyIGxheWVyMmV4Y2x1ZGUgPSAnPSdcclxuXHR2YXIgbGF5ZXIzZXhjbHVkZSA9ICdcXFxcKidcclxuXHQvLyB0byBoYXZlIHRoZSByZWcgZXggY29ycmVjdC4gb3RoZXJ3aXNlIGl0IHdpbGwgZ2V0IHN0dWMgd2l0aCAqKi5cclxuXHRpZihsYXllcjMgPT0gJyoqJyl7XHJcblx0XHRsYXllcjMgPSAnXFxcXCpcXFxcKidcclxuXHRcdGxheWVyM2V4Y2x1ZGUgPSAnXFxcXConXHJcblx0XHRsYXllcjJleGNsdWRlID0gJz0nXHJcblx0fVxyXG5cdGlmKGxheWVyMiA9PSAnKionKXtcclxuXHRcdGxheWVyMiA9ICdcXFxcKlxcXFwqJ1xyXG5cdFx0bGF5ZXIzZXhjbHVkZSA9ICc9J1xyXG5cdFx0bGF5ZXIyZXhjbHVkZSA9ICdcXFxcKidcclxuXHR9XHJcbiAgXHRcclxuXHJcblx0Y29uc3QgaGlnaGxpZ2h0UmVnZXggPSBuZXcgUmVnRXhwKGAke2xheWVyMn1bXiR7bGF5ZXIyZXhjbHVkZX1dKyR7bGF5ZXIyfWAsIFwiZ1wiKTtcclxuICAgIGNvbnN0IGJvbGRSZWdleCA9IG5ldyBSZWdFeHAoYCR7bGF5ZXIzfVteJHtsYXllcjNleGNsdWRlfV0rJHtsYXllcjN9YCwgXCJnXCIpO1xyXG4gIFxyXG5cdC8vIENvdW50IGhpZ2hsaWdodGVkIGNoYXJhY3RlcnNcclxuXHRjb25zdCBoaWdobGlnaHRlZE1hdGNoZXMgPSBjb250ZW50Lm1hdGNoKGhpZ2hsaWdodFJlZ2V4KTtcclxuXHRpZiAoaGlnaGxpZ2h0ZWRNYXRjaGVzKSB7XHJcblx0ICBoaWdobGlnaHRlZENvdW50ID0gaGlnaGxpZ2h0ZWRNYXRjaGVzLmpvaW4oXCJcIikubGVuZ3RoIC0gKGhpZ2hsaWdodGVkTWF0Y2hlcy5sZW5ndGggKiA0KTsgLy8gU3VidHJhY3QgdGhlIGxlbmd0aCBvZiAnPT0nXHJcblx0ICAvLyBmaXJzdCB0YWtlIHRoZSBsYXllcjIgKGhpZ2hsaWdodGVkQ291bnQpIGFuZCBydW4gb24gdGhpcyB0aGUgJ2JvbGRSZWdleCdcclxuXHQgIC8vIENvdW50IGJvbGQgY2hhcmFjdGVyc1xyXG5cdCAgY29uc3QgbGF5ZXIyU3RyaW5nID0gaGlnaGxpZ2h0ZWRNYXRjaGVzLmpvaW4oXCJcIik7XHJcblx0ICBjb25zdCBib2xkTWF0Y2hlcyA9IGxheWVyMlN0cmluZy5tYXRjaChib2xkUmVnZXgpO1xyXG5cdCAgaWYgKGJvbGRNYXRjaGVzKSB7XHJcblx0ICAgIGJvbGRDb3VudCA9IGJvbGRNYXRjaGVzLmpvaW4oXCJcIikubGVuZ3RoIC0gKGJvbGRNYXRjaGVzLmxlbmd0aCAqIDQpOyAvLyBTdWJ0cmFjdCB0aGUgbGVuZ3RoIG9mICcqKidcclxuXHQgIH1cclxuXHR9XHJcbiAgXHJcblx0XHJcblx0XHJcbiAgXHJcblx0cmV0dXJuIHsgY2hhckNvdW50LCBoaWdobGlnaHRlZENvdW50LCBib2xkQ291bnQgfTtcclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmF0ZUxldmVsT2ZNYXR1cml0eShub3RlTGVuZ3RoOiBudW1iZXIsIGxlbmd0aE9mVGl0bGU6IG51bWJlciwgSW5saW5rczogbnVtYmVyLCBvdXRnb2luZ0xpbmtzOiBudW1iZXIsIHByb2dyZXNzaXZlU3VtTWFqdXJpdHk6IG51bWJlcik6IG51bWJlciB7XHJcblx0Ly8gY29uc29sZS5sb2coYG5vdGVMZW5ndGg6ICR7bm90ZUxlbmd0aH1cXHRsZW5ndGhPZlRpdGxlOiAke2xlbmd0aE9mVGl0bGV9XFx0SW5saW5rczogJHtJbmxpbmtzfVxcdG91dGdvaW5nTGlua3M6ICR7b3V0Z29pbmdMaW5rc31gKVxyXG5cdFxyXG5cdC8vIGRlY2lkZSBpZiBub3RlTGVuZ3RoLW1hanVyaXR5IG9yIHByb2dyZXNzaXZlU3VtLW1hanVyaXR5IHNoYWxsIGJlIHVzZWRcclxuXHR2YXIgbGVuZ3RoTWFqdXJpdHkgPSAwO1xyXG5cdGlmKG5vdGVMZW5ndGggPj0gcHJvZ3Jlc3NpdmVTdW1NYWp1cml0eSkge1xyXG5cdFx0bGVuZ3RoTWFqdXJpdHkgPSBub3RlTGVuZ3RoO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRsZW5ndGhNYWp1cml0eSA9IHByb2dyZXNzaXZlU3VtTWFqdXJpdHk7XHJcblx0fVxyXG5cdFxyXG5cdGNvbnN0IHRvdGFsV2VpZ2h0IDogbnVtYmVyID0gbGVuZ3RoTWFqdXJpdHkgKyBsZW5ndGhPZlRpdGxlICsgSW5saW5rcyArIG91dGdvaW5nTGlua3M7XHJcblx0Y29uc3QgYXZlcmFnZVdlaWdodCA9IHRvdGFsV2VpZ2h0IC8gNTtcclxuXHQvLyBjb25zb2xlLmxvZyhgdG90YWxXZWlnaHQ6ICR7dG90YWxXZWlnaHR9XFx0YXZlcmFnZVdlaWdodDogJHthdmVyYWdlV2VpZ2h0fWApXHJcblx0aWYgKGF2ZXJhZ2VXZWlnaHQgPCAwLjUpIHtcclxuXHRcdHJldHVybiAwO1xyXG5cdH0gZWxzZSBpZiAoYXZlcmFnZVdlaWdodCA8PSAxKSB7XHJcblx0XHRyZXR1cm4gMTtcclxuXHR9IGVsc2UgaWYgKGF2ZXJhZ2VXZWlnaHQgPD0gMikge1xyXG5cdFx0cmV0dXJuIDI7XHJcblx0fSBlbHNlIGlmIChhdmVyYWdlV2VpZ2h0IDw9IDMpIHtcclxuXHRcdHJldHVybiAzO1xyXG5cdH0gZWxzZSBpZiAoYXZlcmFnZVdlaWdodCA8PSAzLjUpIHtcclxuXHRcdHJldHVybiA0O1xyXG5cdH0gZWxzZSBpZiAoYXZlcmFnZVdlaWdodCA8PSA0KSB7XHJcblx0XHRyZXR1cm4gNTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0dXJuIDA7XHJcblx0fVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJhdGVPdXRsaW5rcyhvdXRsaW5rczogbnVtYmVyKTogbnVtYmVyIHtcclxuXHQvLyBjb25zb2xlLmxvZyhgb3V0bGlua3M6ICR7b3V0bGlua3N9YClcclxuXHRpZiAob3V0bGlua3MgPCAyKSB7XHJcblx0XHRyZXR1cm4gMDtcclxuXHR9IGVsc2UgaWYgKG91dGxpbmtzIDwgMykge1xyXG5cdFx0cmV0dXJuIDE7XHJcblx0fSBlbHNlIGlmIChvdXRsaW5rcyA8IDUpIHtcclxuXHRcdHJldHVybiA0O1xyXG5cdH0gZWxzZSBpZiAob3V0bGlua3MgPCA5KSB7XHJcblx0XHRyZXR1cm4gNTtcclxuXHR9IGVsc2UgaWYgKG91dGxpbmtzIDwgMTEpIHtcclxuXHRcdHJldHVybiAzO1xyXG5cdH0gZWxzZSBpZiAob3V0bGlua3MgPCAxMikge1xyXG5cdFx0cmV0dXJuIDE7XHJcblx0fSBlbHNlIHtcclxuXHRcdHJldHVybiAwO1xyXG5cdH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByYXRlSW5saW5rcyhudW1JbmxpbmtzOiBudW1iZXIpOiBudW1iZXIge1xyXG5cdC8vdmFyIHByb3plbnRJbmxpbmtzID0gbnVtSW5saW5rcyAqIDEwMCAvIG51bUFsbEZpbGVzO1xyXG5cdC8vY29uc29sZS5sb2coYG51bUlubGlua3M6ICR7bnVtSW5saW5rc31cXHRudW1BbGxGaWxlczogJHtudW1BbGxGaWxlc31cXHRwcm96ZW50SW5saW5rczogJHtwcm96ZW50SW5saW5rc31gKVxyXG5cdC8qaWYgKHByb3plbnRJbmxpbmtzIDwgMC4wMDUgfHwgcHJvemVudElubGlua3MgPiAwLjEpIHtcclxuXHRcdHJldHVybiAwO1xyXG5cdH0gZWxzZSAqLyBpZiAobnVtSW5saW5rcyA9PSAwKSB7XHJcblx0XHRyZXR1cm4gMDtcclxuXHR9IGVsc2UgaWYgKG51bUlubGlua3MgPCA0KSB7XHJcblx0XHRyZXR1cm4gMTtcclxuXHR9IGVsc2UgaWYgKG51bUlubGlua3MgPCA4KSB7XHJcblx0XHRyZXR1cm4gMjtcclxuXHR9IGVsc2UgaWYgKG51bUlubGlua3MgPCAxMSkge1xyXG5cdFx0cmV0dXJuIDM7XHJcblx0fSBlbHNlIGlmIChudW1JbmxpbmtzIDwgMTYpIHtcclxuXHRcdHJldHVybiA0O1xyXG5cdH0gZWxzZSBpZiAobnVtSW5saW5rcyA+PSAxNiAmJiBudW1JbmxpbmtzIDwgNTAwICkge1xyXG5cdFx0cmV0dXJuIDU7XHJcblx0fSBlbHNlIHtcclxuXHRcdHJldHVybiAwO1xyXG5cdH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByYXRlRGlyZWN0aW9uKHJhdGluZ0N1cnJlbnQ6IHN0cmluZywgcmF0aW5nTmV3OiBudW1iZXIpOiBzdHJpbmcge1xyXG5cdGxldCByYXRpbmcgPSBcIlwiXHJcblx0aWYgKHBhcnNlSW50KHJhdGluZ0N1cnJlbnQsIDEwKSA+IHJhdGluZ05ldyl7XHJcblx0XHRyYXRpbmcgPSByYXRpbmdOZXcgKyBcIlx1MkIwN1x1RkUwRlwiXHJcblx0fSBlbHNlIGlmIChwYXJzZUludChyYXRpbmdDdXJyZW50LCAxMCkgPCByYXRpbmdOZXcpe1xyXG5cdFx0cmF0aW5nID0gcmF0aW5nTmV3ICsgXCJcdTJCMDZcdUZFMEZcIlxyXG5cdH0gZWxzZSBpZiAocGFyc2VJbnQocmF0aW5nQ3VycmVudCwgMTApID09IHJhdGluZ05ldyl7XHJcblx0XHRyYXRpbmcgPSByYXRpbmdOZXcgKyBcIlx1MjdBMVx1RkUwRlwiXHJcblx0fSBlbHNlIHtcclxuXHRcdHJhdGluZyA9IHJhdGluZ05ldyArIFwiXCJcclxuXHR9XHJcblxyXG5cdHJldHVybiByYXRpbmdcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByYXRlTGVuZ3RoRmlsZW5hbWUoZmlsZW5hbWU6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgaWYgKGZpbGVuYW1lLmxlbmd0aCA8IDMwKSB7XHJcblx0cmV0dXJuIDA7XHJcbiAgfSBlbHNlIGlmIChmaWxlbmFtZS5sZW5ndGggPCA4MCkge1xyXG5cdHJldHVybiAxO1xyXG4gIH0gZWxzZSBpZiAoZmlsZW5hbWUubGVuZ3RoIDwgMTAwKSB7XHJcblx0cmV0dXJuIDM7XHJcbiAgfSBlbHNlIGlmIChmaWxlbmFtZS5sZW5ndGggPCAxNTApIHtcclxuXHRyZXR1cm4gNTtcclxuICB9IGVsc2UgaWYgKGZpbGVuYW1lLmxlbmd0aCA8IDE5MCkge1xyXG5cdHJldHVybiA0O1xyXG4gIH0gZWxzZSBpZiAoZmlsZW5hbWUubGVuZ3RoIDwgMjEwKSB7XHJcblx0cmV0dXJuIDI7XHJcbiAgfSBlbHNlIGlmIChmaWxlbmFtZS5sZW5ndGggPCAyNTApIHtcclxuXHRyZXR1cm4gMTtcclxuICB9IGVsc2Uge1xyXG5cdHJldHVybiAwO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByYXRlTm90ZUxlbmd0aChjb250ZW5sZW5ndGg6IG51bWJlcik6IG51bWJlciB7XHJcblx0aWYgKGNvbnRlbmxlbmd0aCA8IDIwMCkge1xyXG5cdFx0cmV0dXJuIDA7XHJcblx0fSBlbHNlIGlmIChjb250ZW5sZW5ndGggPCA1NTApIHtcclxuXHRcdHJldHVybiA0O1xyXG5cdH0gZWxzZSBpZiAoY29udGVubGVuZ3RoIDwgMTAwMCkge1xyXG5cdFx0cmV0dXJuIDU7XHJcblx0fSBlbHNlIGlmIChjb250ZW5sZW5ndGggPCAxMjAwKSB7XHJcblx0XHRyZXR1cm4gNDtcclxuXHR9IGVsc2UgaWYgKGNvbnRlbmxlbmd0aCA8IDIwMDApIHtcclxuXHRcdHJldHVybiAzO1xyXG5cdH0gZWxzZSBpZiAoY29udGVubGVuZ3RoIDwgMjUwMCkge1xyXG5cdFx0cmV0dXJuIDI7XHJcblx0fSBlbHNlIGlmIChjb250ZW5sZW5ndGggPCAzMDAwKSB7XHJcblx0XHRyZXR1cm4gMTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0dXJuIDA7XHJcblx0fVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE51bWJlck9mT3V0bGlua3MoYWN0aXZlRmlsZTogVEZpbGUpOiBudW1iZXIge1xyXG5cdC8vIGNvbnN0IGFjdGl2ZUZpbGU6IFRGaWxlIHwgbnVsbCA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG5cdGlmICghYWN0aXZlRmlsZSkge1xyXG5cdFx0cmV0dXJuIDA7XHJcblx0fVxyXG5cdGNvbnN0IGlubGlua3MgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYWN0aXZlRmlsZSk/LmxpbmtzO1xyXG5cdHJldHVybiBpbmxpbmtzID8gT2JqZWN0LmtleXMoaW5saW5rcykubGVuZ3RoIDogMDtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3VudENoYXJhY3RlcnNJbkFjdGl2ZUZpbGUoY29udGVudDogc3RyaW5nLCBmaWxlbmFtZTogc3RyaW5nKTogbnVtYmVyIHtcclxuICBcclxuXHRjb25zdCBmaWxlbmFtZVdpdGhvdXRFeHRlbnNpb24gPSBmaWxlbmFtZTsgLy8uc2xpY2UoMCwgLWZpbGVuYW1lLmxlbmd0aCk7XHJcblx0Ly8gY29uc29sZS5sb2coYGZpbGVuYW1lV2l0aG91dEV4dGVuc2lvbjogJHtmaWxlbmFtZVdpdGhvdXRFeHRlbnNpb259YCk7XHJcblxyXG5cdC8vIFJlbW92ZSBtYXJrZG93biBmb3JtYXR0aW5nIHN5bWJvbHNcclxuXHRjb25zdCBzdHJpcHBlZENvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoL1sqX35gXS9nLCBcIlwiKTtcclxuXHQvLyBjb25zb2xlLmxvZyhgZmlsZW5hbWVXaXRob3V0RXh0ZW5zaW9uOiAke2ZpbGVuYW1lV2l0aG91dEV4dGVuc2lvbn1gKTtcclxuXHJcblx0Ly8gUmVtb3ZlIG1hcmtkb3duIGhlYWRpbmdzIHRoYXQgbWF0Y2ggdGhlIGZpbGVuYW1lXHJcblx0Y29uc3QgaGVhZGluZ1JlZ2V4ID0gL14oIyspXFxzKC4qKSQvZ207XHJcblx0Y29uc3QgY29udGVudFdpdGhvdXRIZWFkaW5ncyA9IHN0cmlwcGVkQ29udGVudC5yZXBsYWNlKGhlYWRpbmdSZWdleCwgKG1hdGNoLCBwMSwgcDIpID0+IHtcclxuXHRcclxuXHRcdC8vIGNvbnNvbGUubG9nKGBwMjogJHtwMn1gKTtcclxuXHRcdGlmIChwMiA9PT0gZmlsZW5hbWVXaXRob3V0RXh0ZW5zaW9uKSB7XHJcblx0XHRcdHJldHVybiBcIlwiO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG1hdGNoO1xyXG5cdH0pO1xyXG5cdC8vIGNvbnNvbGUubG9nKGBjb250ZW50V2l0aG91dEhlYWRpbmdzOiAke2NvbnRlbnRXaXRob3V0SGVhZGluZ3N9YCk7XHJcblxyXG5cdC8vIFJlbW92ZSBtZXRhZGF0YSBibG9ja3MgZnJvbSBjb3VudFxyXG5cdGNvbnN0IG1ldGFkYXRhUmVnZXggPSAvXi0tLVtcXHNcXFNdKj8tLS0vZ207XHJcblx0Y29uc3QgY29udGVudFdpdGhvdXRNZXRhZGF0YSA9IGNvbnRlbnRXaXRob3V0SGVhZGluZ3MucmVwbGFjZShtZXRhZGF0YVJlZ2V4LCBcIlwiKTtcclxuXHQvLyBjb25zb2xlLmxvZyhgY29udGVudFdpdGhvdXRNZXRhZGF0YTogJHtjb250ZW50V2l0aG91dE1ldGFkYXRhfWApO1xyXG5cclxuXHQvLyBSZW1vdmUgI3RhZ3MgZnJvbSBjb3VudFxyXG5cdGNvbnN0IHRhZ1JlZ2V4ID0gLyNbXlxcc10rL2c7XHJcblx0Y29uc3QgY29udGVudFdpdGhvdXRUYWdzID0gY29udGVudFdpdGhvdXRNZXRhZGF0YS5yZXBsYWNlKHRhZ1JlZ2V4LCBcIlwiKTtcclxuXHQvLyBjb25zb2xlLmxvZyhgY29udGVudFdpdGhvdXRUYWdzOiAke2NvbnRlbnRXaXRob3V0VGFnc31gKTtcclxuXHJcblx0Ly8gUmVtb3ZlIGxpbmtzIGFuZCBXaWtpcGVkaWEtbGlua3MgZnJvbSBjb3VudFxyXG5cdGNvbnN0IGxpbmtSZWdleCA9IC9cXFsuKj9cXF1cXCguKj9cXCl8XFxbXFxbLio/XFxdXFxdL2c7XHJcblx0Y29uc3QgY29udGVudFdpdGhvdXRMaW5rcyA9IGNvbnRlbnRXaXRob3V0VGFncy5yZXBsYWNlKGxpbmtSZWdleCwgXCJcIik7XHJcblx0Ly8gY29uc29sZS5sb2coYGNvbnRlbnRXaXRob3V0TGlua3M6ICR7Y29udGVudFdpdGhvdXRMaW5rc31gKTtcclxuXHJcblx0Ly8gUmVtb3ZlIGJsYW5rIG5ld2xpbmVzXHJcblx0Y29uc3QgZmlsdGVyZWRDb250ZW50OiBzdHJpbmcgPSBjb250ZW50V2l0aG91dExpbmtzXHJcblx0LnNwbGl0KCdcXG4nKSAvLyBTcGxpdCB0aGUgY29udGVudCBpbnRvIGFuIGFycmF5IG9mIGxpbmVzXHJcblx0LmZpbHRlcihsaW5lID0+IGxpbmUudHJpbSgpICE9PSAnJykgLy8gRmlsdGVyIG91dCBsaW5lcyB0aGF0IGFyZSBlbXB0eSBvciBjb250YWluIG9ubHkgd2hpdGVzcGFjZVxyXG5cdC5maWx0ZXIobGluZSA9PiBsaW5lLnRyaW0oKSAhPT0gJy0tLScpIC8vIHJlbW92ZSAtLS0gb24gc2luZ2xlIGxpbmVzXHJcblx0LmpvaW4oJ1xcbicpOyAvLyBKb2luIHRoZSByZW1haW5pbmcgbGluZXMgYmFjayBpbnRvIGEgc3RyaW5nLCBzZXBhcmF0ZWQgYnkgbmV3bGluZXNcclxuXHQvLyBjb25zb2xlLmxvZyhgZmlsdGVyZWRDb250ZW50OiAke2ZpbHRlcmVkQ29udGVudH1gKTtcclxuXHJcblx0Ly8gQ291bnQgdGhlIHJlbWFpbmluZyBjaGFyYWN0ZXJzXHJcblx0Y29uc3QgY2hhckNvdW50ID0gZmlsdGVyZWRDb250ZW50Lmxlbmd0aDtcclxuXHQvLyBjb25zb2xlLmxvZyhgY2hhckNvdW50OiAke2NoYXJDb3VudH1gKTtcclxuXHJcblx0cmV0dXJuIGNoYXJDb3VudDtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3VudF9pbmxpbmtzX3NpbmdsZShmaWxlX3BhdGg6IHN0cmluZywgdmF1bHRfcGF0aDogc3RyaW5nKTogbnVtYmVyIHtcclxuXHQvLyBHZXQgdGhlIGZpbGVuYW1lIGFuZCBkaXJlY3Rvcnkgb2YgdGhlIGZpbGUgd2UncmUgY291bnRpbmcgbGlua3MgdG9cclxuXHRjb25zdCBmaWxlbmFtZSA9IHBhdGguYmFzZW5hbWUoZmlsZV9wYXRoKTtcclxuXHRjb25zdCBkaXJlY3RvcnkgPSBwYXRoLmRpcm5hbWUoZmlsZV9wYXRoKTtcclxuXHJcblx0Ly8gQ3JlYXRlIGEgc2V0IHRvIGhvbGQgYWxsIHRoZSBmaWxlcyB0aGF0IGxpbmsgdG8gb3VyIHRhcmdldCBmaWxlXHJcblx0Y29uc3QgbGlua2luZ19maWxlczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XHJcblxyXG5cdC8vIFJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgZmlsZXMgaW4gdGhlIHZhdWx0IGRpcmVjdG9yeSB0aGF0IGxpbmsgdG8gb3VyIHRhcmdldCBmaWxlXHJcblx0Y29uc3Qgd2Fsa1N5bmMgPSAoZGlyOiBzdHJpbmcsIGZpbGVsaXN0OiBzdHJpbmdbXSkgPT4ge1xyXG5cdFx0Y29uc3QgZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhkaXIpO1xyXG5cdFx0ZmlsZWxpc3QgPSBmaWxlbGlzdCB8fCBbXTtcclxuXHRcdGZpbGVzLmZvckVhY2goKGZpbGU6IHN0cmluZykgPT4ge1xyXG5cdFx0XHRpZiAoZnMuc3RhdFN5bmMocGF0aC5qb2luKGRpciwgZmlsZSkpLmlzRGlyZWN0b3J5KCkpIHtcclxuXHRcdFx0XHRmaWxlbGlzdCA9IHdhbGtTeW5jKHBhdGguam9pbihkaXIsIGZpbGUpLCBmaWxlbGlzdCk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0Ly8gSWdub3JlIG5vbi1tZCBmaWxlcyBhbmQgZmlsZXMgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG91ciB0YXJnZXQgZmlsZVxyXG5cdFx0XHRcdGlmICghZmlsZS5lbmRzV2l0aChcIi5tZFwiKSB8fCBmaWxlID09PSBmaWxlbmFtZSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gUmVhZCB0aGUgZmlsZSBhbmQgbG9vayBmb3IgbGlua3MgdG8gb3VyIHRhcmdldCBmaWxlXHJcblx0XHRcdFx0Y29uc3QgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oZGlyLCBmaWxlKSwgXCJ1dGYtOFwiKTtcclxuXHRcdFx0XHRkYXRhLnNwbGl0KCdcXG4nKS5mb3JFYWNoKChsaW5lOiBzdHJpbmcpID0+IHtcclxuXHRcdFx0XHRcdGlmIChsaW5lLmluY2x1ZGVzKGBbWyR7ZmlsZW5hbWUuc2xpY2UoMCwgLTMpfV1dYCkgfHwgbGluZS5pbmNsdWRlcyhgWyR7ZmlsZW5hbWUuc2xpY2UoMCwgLTMpfV1gKSkge1xyXG5cdFx0XHRcdFx0XHQvLyBXZSBmb3VuZCBhIGxpbmsgdG8gb3VyIHRhcmdldCBmaWxlIVxyXG5cdFx0XHRcdFx0XHRsaW5raW5nX2ZpbGVzLmFkZChwYXRoLnJlbGF0aXZlKGRpcmVjdG9yeSwgcGF0aC5qb2luKGRpciwgZmlsZSkpKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gZmlsZWxpc3Q7XHJcblx0fTtcclxuXHJcblx0d2Fsa1N5bmModmF1bHRfcGF0aCwgW10pO1xyXG5cclxuXHQvLyBjb3VudCBob3cgbWFueSBmaWxlcyBhcmUgbWVudGlvbmluZyB0aGUgaW5wdXQgZmlsZVxyXG5cdHJldHVybiBsaW5raW5nX2ZpbGVzLnNpemU7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY291bnRfaW5saW5rcyhmaWxlOiBURmlsZSk6IG51bWJlciB7XHJcbiAgICBjb25zdCB7IGFwcDogeyBtZXRhZGF0YUNhY2hlOiB7IHJlc29sdmVkTGlua3MgfSB9IH0gPSB0aGlzO1xyXG4gICAgY29uc3QgeyBwYXRoIH0gPSBmaWxlO1xyXG5cclxuICAgIGNvbnN0IHN1bUlubGlua3MgPSBPYmplY3QudmFsdWVzKHJlc29sdmVkTGlua3MpXHJcbiAgICAgICAgLm1hcCgodmFsOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9KSA9PiB2YWxbcGF0aF0gPz8gMClcclxuICAgICAgICAucmVkdWNlKChsZWZ0LCByaWdodCkgPT4gbGVmdCArIHJpZ2h0LCAwKTtcclxuXHJcbiAgICByZXR1cm4gc3VtSW5saW5rcztcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRGaWxlQ291bnRNYXAgPSBhc3luYyAoYXBwOiBBcHAsIGV4Y2x1ZGVUYWc6IHN0cmluZywgZXhjbHVkZUZvbGRlcjogc3RyaW5nKTogUHJvbWlzZTxNYXA8c3RyaW5nLCBudW1iZXI+PiA9PiB7XHJcblxyXG4gICAgY29uc3QgeyB2YXVsdCB9ID0gYXBwO1xyXG5cclxuXHRcclxuXHQvLyBmaWxlcyB3aXRoIHRoaXMgI3RhZ3MgaW4gdG8gaWdub3JlXHJcblx0bGV0IGV4Y2x1ZGVkU3Vic3RyaW5ncyA6IHN0cmluZ1tdID0gW11cclxuXHRpZiAoZXhjbHVkZVRhZyA9PSB1bmRlZmluZWQpIHtcclxuXHRcdGV4Y2x1ZGVkU3Vic3RyaW5ncyA9IFtdXHJcblx0fSBlbHNlIHtcclxuXHRcdGV4Y2x1ZGVkU3Vic3RyaW5ncyA9IGV4Y2x1ZGVUYWcuc3BsaXQoJywgJyk7XHJcblx0fVxyXG5cdFxyXG5cclxuXHQvLyBmb2xkZXJzIHRvIGlnbm9yZSAubWQtZmlsZXMgaW5cclxuXHRsZXQgZXhjbHVkZWRGb2xkZXJzIDogc3RyaW5nW10gPSBbXVxyXG5cdGlmIChleGNsdWRlRm9sZGVyID09IHVuZGVmaW5lZCkge1xyXG5cdFx0ZXhjbHVkZWRGb2xkZXJzID0gW11cclxuXHR9IGVsc2Uge1xyXG5cdFx0ZXhjbHVkZWRGb2xkZXJzID0gZXhjbHVkZUZvbGRlci5zcGxpdCgnLCAnKTtcclxuXHR9XHJcblx0ZXhjbHVkZWRGb2xkZXJzLnB1c2goJy5vYnNpZGlhbicsICcudHJhc2gnKTsgLy8gaGFyZGNvZGUgdGhlIGJhc2ljIGZvbGRlcnNcclxuXHRcclxuICAgIGNvbnN0IGZpbGVDb3VudE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7XHJcblxyXG4gICAgY29uc3QgZmlsZXMgPSBhd2FpdCB2YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XHJcblxyXG4gICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XHJcblxyXG5cdFx0Y29uc3QgZmlsZU5hbWUgPSBmaWxlLmJhc2VuYW1lO1xyXG5cclxuICAgICAgICBjb25zdCBjdXJyZW50Q291bnQgPSBmaWxlQ291bnRNYXAuZ2V0KGZpbGVOYW1lKSB8fCAwO1xyXG5cclxuICAgICAgICBmaWxlQ291bnRNYXAuc2V0KGZpbGVOYW1lLCBjdXJyZW50Q291bnQgKyAxKTtcclxuXHJcblx0XHRjb25zdCBmaWxlQ29udGVudHMgPSBhd2FpdCBhcHAudmF1bHQucmVhZChmaWxlKTtcclxuXHJcbiAgICAgICAgaWYgKCFleGNsdWRlZFN1YnN0cmluZ3Muc29tZShzdWJzdHJpbmcgPT4gZmlsZUNvbnRlbnRzLmluY2x1ZGVzKHN1YnN0cmluZykpICYmIFxyXG4gICAgICAgICAgICAhZXhjbHVkZWRGb2xkZXJzLnNvbWUoZm9sZGVyID0+IGZpbGUucGF0aC5pbmNsdWRlcyhmb2xkZXIpKSkge1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBmaWxlLmJhc2VuYW1lO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY3VycmVudENvdW50ID0gZmlsZUNvdW50TWFwLmdldChmaWxlTmFtZSkgfHwgMDtcclxuXHJcbiAgICAgICAgICAgIGZpbGVDb3VudE1hcC5zZXQoZmlsZU5hbWUsIGN1cnJlbnRDb3VudCArIDEpO1xyXG4gICAgICAgIH1cclxuXHRcdFxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmaWxlQ291bnRNYXA7XHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGdldEZpbGVNYXAgPSBhc3luYyAoYXBwOiBBcHAsIGV4Y2x1ZGVUYWc6IHN0cmluZywgZXhjbHVkZUZvbGRlcjogc3RyaW5nKTogUHJvbWlzZTxURmlsZVtdPiA9PiB7XHJcblxyXG4gICAgY29uc3QgeyB2YXVsdCB9ID0gYXBwO1xyXG5cclxuXHQvLyBmaWxlcyB3aXRoIHRoaXMgI3RhZ3MgaW4gdG8gaWdub3JlXHJcblx0bGV0IGV4Y2x1ZGVkU3Vic3RyaW5ncyA6IHN0cmluZ1tdID0gW11cclxuXHRpZiAoZXhjbHVkZVRhZyA9PSB1bmRlZmluZWQpIHtcclxuXHRcdGV4Y2x1ZGVkU3Vic3RyaW5ncyA9IFtdXHJcblx0fSBlbHNlIHtcclxuXHRcdGV4Y2x1ZGVkU3Vic3RyaW5ncyA9IGV4Y2x1ZGVUYWcuc3BsaXQoJywgJyk7XHJcblx0fVxyXG5cdC8vY29uc29sZS5sb2coYGV4Y2x1ZGVkU3Vic3RyaW5nczogJHtleGNsdWRlZFN1YnN0cmluZ3N9YClcclxuXHQvLyBmb2xkZXJzIHRvIGlnbm9yZSAubWQtZmlsZXMgaW5cclxuXHRsZXQgZXhjbHVkZWRGb2xkZXJzIDogc3RyaW5nW10gPSBbXVxyXG5cdGlmIChleGNsdWRlRm9sZGVyID09IHVuZGVmaW5lZCkge1xyXG5cdFx0ZXhjbHVkZWRGb2xkZXJzID0gW11cclxuXHR9IGVsc2Uge1xyXG5cdFx0ZXhjbHVkZWRGb2xkZXJzID0gZXhjbHVkZUZvbGRlci5zcGxpdCgnLCAnKTtcclxuXHR9XHJcblx0ZXhjbHVkZWRGb2xkZXJzLnB1c2goJy5vYnNpZGlhbicsICcudHJhc2gnKTsgLy8gaGFyZGNvZGUgdGhlIGJhc2ljIGZvbGRlcnNcclxuXHQvL2NvbnNvbGUubG9nKGBleGNsdWRlZEZvbGRlcnM6ICR7ZXhjbHVkZWRGb2xkZXJzfWApXHRcclxuICAgIGxldCBmaWxlQXJyYXk6IFRGaWxlW10gPSBbXTtcclxuICAgIGNvbnN0IGZpbGVzID0gYXdhaXQgdmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xyXG4gICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGZpbGVDb250ZW50cyA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGZpbGUpO1xyXG5cdFx0Ly9jb25zb2xlLmxvZyhgZmlsZS5wYXRoOiAke2ZpbGUucGF0aH1gKVxyXG5cdFx0aWYgKCghZXhjbHVkZWRTdWJzdHJpbmdzLnNvbWUoc3Vic3RyaW5nID0+IGZpbGVDb250ZW50cy5pbmNsdWRlcyhzdWJzdHJpbmcpKSB8fCBleGNsdWRlVGFnLmxlbmd0aCA9PT0gMCkgJiYgXHJcbiAgICAgICAgICAgICFleGNsdWRlZEZvbGRlcnMuc29tZShmb2xkZXIgPT4gZmlsZS5wYXRoLmluY2x1ZGVzKGZvbGRlcikpKSB7XHJcblx0XHRcdC8vY29uc29sZS5sb2coYGZpbGUgJHtmaWxlfSBnZXQncyBhZGRlZC5gKVxyXG5cdFx0XHRmaWxlQXJyYXkucHVzaChmaWxlKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmaWxlQXJyYXk7XHJcbn07XHJcbiIsICJpbXBvcnQge1RGaWxlfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmluZEVhcmxpZXN0Q3JlYXRlZEZpbGUoZmlsZXM6IFRGaWxlW10pOiBURmlsZSB7XHJcblx0bGV0IGVhcmxpZXN0Q3JlYXRlZEZpbGU6IFRGaWxlID0gZmlsZXNbMF07XHJcblx0Zm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XHJcblx0XHRpZiAoZmlsZS5zdGF0LmN0aW1lIDwgZWFybGllc3RDcmVhdGVkRmlsZS5zdGF0LmN0aW1lKSB7XHJcblx0XHRcdGVhcmxpZXN0Q3JlYXRlZEZpbGUgPSBmaWxlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gZWFybGllc3RDcmVhdGVkRmlsZTtcclxufVxyXG5cclxuICBcclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRFYXJsaWVzdE1vZGlmaWVkRmlsZShmaWxlczogVEZpbGVbXSk6IFRGaWxlIHtcclxuXHRsZXQgZWFybGllc3RNb2RpZmllZEZpbGU6IFRGaWxlID0gZmlsZXNbMF07XHJcblx0Zm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XHJcblx0XHRpZiAoZmlsZS5zdGF0Lm10aW1lIDwgZWFybGllc3RNb2RpZmllZEZpbGUuc3RhdC5tdGltZSkge1xyXG5cdFx0XHRlYXJsaWVzdE1vZGlmaWVkRmlsZSA9IGZpbGU7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBlYXJsaWVzdE1vZGlmaWVkRmlsZTtcclxufSAgXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRFYXJsaWVzdERhdGVGaWxlKGZpbGVzOiBURmlsZVtdKTogVEZpbGUge1xyXG5cdGxldCBlYXJsaWVzdENyZWF0ZWRGaWxlOiBURmlsZSA9IGZpbGVzWzBdO1xyXG5cdGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xyXG5cdFx0aWYgKGZpbGUuc3RhdC5jdGltZSA8IGVhcmxpZXN0Q3JlYXRlZEZpbGUuc3RhdC5jdGltZSkge1xyXG5cdFx0XHRlYXJsaWVzdENyZWF0ZWRGaWxlID0gZmlsZTtcclxuXHRcdH1cclxuXHRcdGlmIChmaWxlLnN0YXQubXRpbWUgPCBlYXJsaWVzdENyZWF0ZWRGaWxlLnN0YXQuY3RpbWUpIHtcclxuXHRcdFx0ZWFybGllc3RDcmVhdGVkRmlsZSA9IGZpbGU7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBlYXJsaWVzdENyZWF0ZWRGaWxlO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1vbnRoc0JldHdlZW4oc3RhcnRNb250aDogRGF0ZSwgZW5kTW9udGg6IERhdGUpOiBudW1iZXIge1xyXG5cdGxldCBtb250aHMgPSAoZW5kTW9udGguZ2V0TW9udGgoKSAtIHN0YXJ0TW9udGguZ2V0TW9udGgoKSkgKyAxO1xyXG5cdGlmIChlbmRNb250aC5nZXRGdWxsWWVhcigpID4gc3RhcnRNb250aC5nZXRGdWxsWWVhcigpKSB7XHJcblx0XHRtb250aHMgKz0gKGVuZE1vbnRoLmdldEZ1bGxZZWFyKCkgLSBzdGFydE1vbnRoLmdldEZ1bGxZZWFyKCkpKjEyO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9udGhzO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENyZWF0aW9uRGF0ZXMoZmlsZXM6IFRGaWxlW10pOiBBcnJheTxEYXRlPiB7XHJcblx0Y29uc3QgY3JlYXRpb25EYXRlczogQXJyYXk8RGF0ZT4gPSBbXTtcclxuICBcclxuXHRmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcclxuXHRcdGNyZWF0aW9uRGF0ZXMucHVzaChuZXcgRGF0ZShmaWxlLnN0YXQuY3RpbWUpKTtcclxuXHR9XHJcbiAgXHJcblx0cmV0dXJuIGNyZWF0aW9uRGF0ZXM7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9kaWZpY2F0aW9uRGF0ZXMoZmlsZXM6IFRGaWxlW10pOiBBcnJheTxEYXRlPiB7XHJcblx0Y29uc3QgY3JlYXRpb25EYXRlczogQXJyYXk8RGF0ZT4gPSBbXTtcclxuICBcclxuXHRmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcclxuXHRcdGNyZWF0aW9uRGF0ZXMucHVzaChuZXcgRGF0ZShmaWxlLnN0YXQubXRpbWUpKTtcclxuXHR9XHJcbiAgXHJcblx0cmV0dXJuIGNyZWF0aW9uRGF0ZXM7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2hhcnRGb3JtYXQoeV9heGlzOiBzdHJpbmcsIGNvdW50c1N0cmluZ01vZDogc3RyaW5nLCBjaGFydFJlZHV6aWVydW5nTW9uYXRlOiBudW1iZXIpOiBzdHJpbmcge1xyXG5cdGxldCBtb25hdHNiZWdyZW56dW5nID0gbnVsbFxyXG5cdGlmIChjaGFydFJlZHV6aWVydW5nTW9uYXRlID09IDApe1xyXG5cdFx0bW9uYXRzYmVncmVuenVuZyA9IDBcclxuXHR9IGVsc2Uge1xyXG5cdFx0bW9uYXRzYmVncmVuenVuZyA9IGNvdW50c1N0cmluZ01vZC5zcGxpdCgnLCcpLmxlbmd0aCAtIGNoYXJ0UmVkdXppZXJ1bmdNb25hdGVcclxuXHR9XHJcblx0XHJcblx0Ly9jb25zdCBtb25hdHNiZWdyZW56dW5nID0gbGVuZ3RoY291bnRzU3RyaW5nQ3JlYXRlIC0gdGhpcy5zZXR0aW5ncy5jaGFydFJlZHV6aWVydW5nTW9uYXRlXHJcblx0cmV0dXJuIFwiYGBgY2hhcnRcXG50eXBlOiBiYXJcXG5sYWJlbHM6IFtcIiArIHlfYXhpcyArIFwiXVxcbnNlcmllczpcXG4gIC0gdGl0bGU6IG1vZGlmaWVkXFxuICAgIGRhdGE6IFtcIiArIGNvdW50c1N0cmluZ01vZCArIFwiXVxcbnRlbnNpb246IDAuMlxcbndpZHRoOiA4MCAlXFxubGFiZWxDb2xvcnM6IGZhbHNlXFxuZmlsbDogZmFsc2VcXG5iZWdpbkF0WmVybzogZmFsc2VcXG5iZXN0Rml0OiBmYWxzZVxcbmJlc3RGaXRUaXRsZTogdW5kZWZpbmVkXFxuYmVzdEZpdE51bWJlcjogMFxcbnN0YWNrZWQ6IHRydWVcXG55VGl0bGU6IFxcXCJOdW1iZXIgb2YgTm90ZXNcXFwiXFxueFRpdGxlOiBcXFwiTW9udGhzXFxcIlxcbnhNaW46IFwiICsgbW9uYXRzYmVncmVuenVuZyArIFwiXFxuYGBgXCI7XHJcbn1cclxuXHJcbiAgXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXBsYWNlQ2hhcnRDb250ZW50IChhdmF0YXJQYWdlTmFtZTogc3RyaW5nLCBuZXdDb250ZW50OiBzdHJpbmcpIHtcclxuXHRjb25zdCBleGlzdGluZ0ZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGAke2F2YXRhclBhZ2VOYW1lfS5tZGApO1xyXG5cdGlmIChleGlzdGluZ0ZpbGUgPT0gbnVsbCkge1xyXG5cdFx0Y29uc29sZS5sb2coYEZpbGUgJHthdmF0YXJQYWdlTmFtZX0ubWQgZG9lcyBub3QgZXhpc3RgKTtcclxuXHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRjb25zdCBmaWxlID0gZXhpc3RpbmdGaWxlIGFzIFRGaWxlO1xyXG5cclxuXHRjb25zdCBjb250ZW50ID0gYXdhaXQgYXBwLnZhdWx0LnJlYWQoZmlsZSk7XHJcblx0bGV0IHJlZmVyZW5jZTogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcblx0bGV0IGVuZDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcblx0bGV0IHN0YXJ0OiBudW1iZXIgfCBudWxsID0gbnVsbDtcclxuXHJcblx0Y29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KFwiXFxuXCIpO1xyXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdGNvbnN0IGxpbmUgPSBsaW5lc1tpXS50cmltKCk7XHJcblx0XHRpZiAobGluZSA9PT0gXCJeQ2hhcnRNb250aFwiKSB7XHJcblx0XHRcdGlmIChyZWZlcmVuY2UgPT09IG51bGwpIHtcclxuXHRcdFx0XHRyZWZlcmVuY2UgPSBpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdGlmIChyZWZlcmVuY2UgIT0gbnVsbCl7XHJcblx0XHRlbmQgPSByZWZlcmVuY2U7XHJcblx0XHRzdGFydCA9IHJlZmVyZW5jZSAtIDE5O1xyXG5cdFx0Y29uc3QgbmV3TGluZXMgPSBbLi4ubGluZXMuc2xpY2UoMCwgc3RhcnQpLCBuZXdDb250ZW50LCAuLi5saW5lcy5zbGljZShlbmQpXTtcclxuXHRcdGF3YWl0IGFwcC52YXVsdC5tb2RpZnkoZmlsZSwgbmV3TGluZXMuam9pbihcIlxcblwiKSk7XHJcblx0fVxyXG59XHJcblxyXG5cclxuIiwgImV4cG9ydCBpbnRlcmZhY2UgQmFkZ2Uge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICAgIGxldmVsOiBzdHJpbmc7XHJcbiAgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrSWZSZWNlaXZlQUJhZGdlKGxldmVsT2xkOiBudW1iZXIsIGxldmVsTmV3OiBudW1iZXIpOiBib29sZWFuIHtcclxuICBjb25zdCBiYWRnZUxldmVsczogbnVtYmVyW10gPSBbNSwgMTAsIDIwLCAyNywgMzUsIDQyLCA1MCwgNjAsIDc1LCA4MiwgOTAsIDEwMF07XHJcbiAgbGV0IHJlY2VpdmVCYWRnZSA9IGZhbHNlXHJcbiAgZm9yIChsZXQgaT0wOyBpIDwgYmFkZ2VMZXZlbHMubGVuZ3RoOyBpKyspe1xyXG4gICAgaWYgKGxldmVsT2xkIDwgYmFkZ2VMZXZlbHNbaV0gJiYgbGV2ZWxOZXcgPj0gYmFkZ2VMZXZlbHNbaV0pe1xyXG4gICAgICByZWNlaXZlQmFkZ2UgPSB0cnVlXHJcbiAgICB9IFxyXG4gIH1cclxuICByZXR1cm4gcmVjZWl2ZUJhZGdlXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRCYWRnZUZvckxldmVsKGxldmVsOiBudW1iZXIsIGluZm9ybTogYm9vbGVhbik6IEJhZGdlIHtcclxuICAgIGNvbnN0IGJhZGdlTGV2ZWxzOiBudW1iZXJbXSA9IFs1LCAxMCwgMjAsIDI3LCAzNSwgNDIsIDUwLCA2MCwgNzUsIDgyLCA5MCwgMTAwXTtcclxuICAgIGNvbnN0IGJhZGdlTmFtZXM6IEJhZGdlW10gPSBbXHJcbiAgICAgIHsgbmFtZTogXCJFbmxpZ2h0ZW5lZCBOb3ZpY2VcIiwgZGVzY3JpcHRpb246IFwiSHV6emFoISBZb3UndmUgZW1iYXJrZWQgb24gdGhlIHBhdGggb2Yga25vd2xlZGdlIGFuZCBlYXJuZWQgdGhlIHRpdGxlIG9mICdFbmxpZ2h0ZW5lZCBOb3ZpY2UuJyBUaGUgam91cm5leSBoYXMganVzdCBiZWd1biwgYW5kIHlvdSdyZSBhbHJlYWR5IHJhZGlhdGluZyB3aXNkb20gbGlrZSBhIGJhYnkgc3VuIVwiLCBsZXZlbDogXCJsZXZlbCA1XCIgfSxcclxuICAgICAgeyBuYW1lOiBcIkN1cmlvdXMgQ29ubm9pc3NldXJcIiwgZGVzY3JpcHRpb246IFwiRmFudGFzdGljISBZb3UndmUgZW1icmFjZWQgdGhlIHdvbmRlcnMgb2YgbGVhcm5pbmcgYW5kIGJlY29tZSBhICdDdXJpb3VzIENvbm5vaXNzZXVyLicgWW91ciBhcHBldGl0ZSBmb3Iga25vd2xlZGdlIGlzIGluc2F0aWFibGUsIGxpa2UgYSBib3R0b21sZXNzIGJvd2wgb2YgaWNlIGNyZWFtIVwiICwgbGV2ZWw6IFwibGV2ZWwgMTBcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiQnJhaW5pYWMgVHJhaWxibGF6ZXJcIiwgZGVzY3JpcHRpb246IFwiQnJhdm8hIEFzIGEgJ0JyYWluaWFjIFRyYWlsYmxhemVyLCcgeW91J3ZlIGNhcnZlZCB5b3VyIHdheSB0aHJvdWdoIGEganVuZ2xlIG9mIGluZm9ybWF0aW9uIGFuZCBlbWVyZ2VkIHZpY3RvcmlvdXMuIFlvdXIgaW50ZWxsZWN0IGlzIGEgYmVhY29uIHNoaW5pbmcgYnJpZ2h0bHkgZm9yIG90aGVycyB0byBmb2xsb3chXCIgLCBsZXZlbDogXCJsZXZlbCAyMFwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJTY2hvbGFybHkgVHJhaWxibGF6ZXJcIiwgZGVzY3JpcHRpb246IFwiSW1wcmVzc2l2ZSEgWW91J3JlIG5vdyBhICdTY2hvbGFybHkgVHJhaWxibGF6ZXIsJyBib2xkbHkgdmVudHVyaW5nIHRocm91Z2ggYSBzZWEgb2Yga25vd2xlZGdlIHdpdGggYSBjb21wYXNzIG9mIGN1cmlvc2l0eSBhbmQgYSBtYXAgb2YgaW50ZWxsZWN0IVwiICwgbGV2ZWw6IFwibGV2ZWwgMjdcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiSW5mbyBOaW5qYSBNYXN0ZXJcIiwgZGVzY3JpcHRpb246IFwiSW5jcmVkaWJsZSEgWW91J3ZlIHJlYWNoZWQgdGhlIHBpbm5hY2xlIG9mIHN0ZWFsdGh5IGtub3dsZWRnZSBtYW5hZ2VtZW50LiBBcyBhbiAnSW5mbyBOaW5qYSBNYXN0ZXIsJyB5b3UgY2FuIHNuYXRjaCBpbmZvcm1hdGlvbiBmcm9tIHRoZSBzaGFkb3dzIGxpa2UgYSBkaWdpdGFsIG5pbmphIVwiICwgbGV2ZWw6IFwibGV2ZWwgMzVcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiV2lzZSBPd2wgR3VydVwiLCBkZXNjcmlwdGlvbjogXCJXaG9vLWhvbyEgWW91J3ZlIGFjaGlldmVkICdXaXNlIE93bCBHdXJ1JyBzdGF0dXMuIFlvdXIgd2lzZG9tIGlzIGxlZ2VuZGFyeSwgYW5kIHlvdXIgaG9vdHMgb2Yga25vd2xlZGdlIGVjaG8gdGhyb3VnaCB0aGUgZm9yZXN0IG9mIGlnbm9yYW5jZSFcIiAsIGxldmVsOiBcImxldmVsIDQyXCIgfSxcclxuICAgICAgeyBuYW1lOiBcIkVpbnN0ZWluIEluY2FybmF0ZVwiLCBkZXNjcmlwdGlvbjogXCJFdXJla2EhIFlvdSd2ZSBiZWNvbWUgYW4gJ0VpbnN0ZWluIEluY2FybmF0ZSwnIHB1c2hpbmcgdGhlIGJvdW5kYXJpZXMgb2YgdW5kZXJzdGFuZGluZyBhbmQgYmVuZGluZyB0aGUgZmFicmljIG9mIGtub3dsZWRnZSB0byB5b3VyIHdpbGwhXCIgLCBsZXZlbDogXCJsZXZlbCA1MFwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJNYXN0ZXJtaW5kIFNhZ2VcIiwgZGVzY3JpcHRpb246IFwiTWFnbmlmaWNlbnQhIFlvdSd2ZSBhc2NlbmRlZCB0byB0aGUgcmFuayBvZiAnTWFzdGVybWluZCBTYWdlLCcgZ3VpZGluZyB0aGUgcml2ZXJzIG9mIGluZm9ybWF0aW9uIGFuZCBlbmxpZ2h0ZW5pbmcgYWxsIHdobyBzZWVrIHdpc2RvbSFcIiAsIGxldmVsOiBcImxldmVsIDYwXCIgfSxcclxuICAgICAgeyBuYW1lOiBcIkNlcmVicmFsIE1hZXN0cm9cIiwgZGVzY3JpcHRpb246IFwiQnJhdmlzc2ltbyEgWW91J3JlIG5vdyBhICdDZXJlYnJhbCBNYWVzdHJvLCcgY29uZHVjdGluZyB0aGUgc3ltcGhvbnkgb2Yga25vd2xlZGdlIHdpdGggdGhlIGZpbmVzc2Ugb2YgYSB2aXJ0dW9zbyBjb25kdWN0b3IhXCIgLCBsZXZlbDogXCJsZXZlbCA3NVwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJaZW4gS25vd2xlZGdlIEtlZXBlclwiLCBkZXNjcmlwdGlvbjogXCJTZXJlbml0eSBhY2hpZXZlZCEgQXMgYSAnWmVuIEtub3dsZWRnZSBLZWVwZXIsJyB5b3UgbWFpbnRhaW4gYSB0cmFucXVpbCBtaW5kIHdoaWxlIG1hbmFnaW5nIHZhc3QgcG9vbHMgb2Yga25vd2xlZGdlIHdpdGggZ3JhY2UgYW5kIHBvaXNlLlwiICwgbGV2ZWw6IFwibGV2ZWwgODJcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiR3JhbmQgQXJjaGl2aXN0IE92ZXJsb3JkXCIsIGRlc2NyaXB0aW9uOiBcIkFsbCBoYWlsIHRoZSAnR3JhbmQgQXJjaGl2aXN0IE92ZXJsb3JkIScgWW91IHdpZWxkIHRoZSBrbm93bGVkZ2Ugb2YgYWdlcyBhbmQgaG9sZCB0aGUga2V5cyB0byB1bmxvY2sgdGhlIGdhdGVzIG9mIHdpc2RvbSFcIiAsIGxldmVsOiBcImxldmVsIDkwXCIgfSxcclxuICAgICAgeyBuYW1lOiBcIk9tbmlzY2llbnQgU2FnZSBvZiBFdmVyeXRoaW5nXCIsIGRlc2NyaXB0aW9uOiBcIkNvbmdyYXR1bGF0aW9ucywgb2ggd2lzZSBvbmUhIFlvdSd2ZSBhdHRhaW5lZCB0aGUgaGlnaGVzdCBsZXZlbCBvZiBlbmxpZ2h0ZW5tZW50IGFzIHRoZSAnT21uaXNjaWVudCBTYWdlIG9mIEV2ZXJ5dGhpbmcuJyBZb3VyIHVuZGVyc3RhbmRpbmcga25vd3Mgbm8gYm91bmRzLCBhbmQgeW91ciB3aXNkb20gaXMgYXMgdmFzdCBhcyB0aGUgY29zbW9zIGl0c2VsZiFcIiwgbGV2ZWw6IFwibGV2ZWwgMTAwXCIgIH0sXHJcbiAgICBdO1xyXG4gIFxyXG4gICAgbGV0IGluZGV4ID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmFkZ2VMZXZlbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKGxldmVsID49IGJhZGdlTGV2ZWxzW2ldKSB7XHJcbiAgICAgICAgaW5kZXggPSBpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYmFkZ2VOYW1lc1tpbmRleF1cclxuICB9XHJcbiAgXHJcblxyXG5cclxuICBleHBvcnQgIGZ1bmN0aW9uIGdldEJhZGdlRm9ySW5pdExldmVsKGxldmVsOiBudW1iZXIpOiBCYWRnZSB7XHJcbiAgICBjb25zdCBiYWRnZUxldmVsczogbnVtYmVyW10gPSBbMCwgMywgNywgMTUsIDIzLCAzMCwgMzUsIDQyLCA1MCwgNjAsIDc1LCA4MiwgOTAsIDEwMF07XHJcbiAgICBjb25zdCBiYWRnZU5hbWVzSW5pdDogQmFkZ2VbXSA9IFtcclxuICAgICAgeyBuYW1lOiBcIkxvcmUgU2Vla2VyIEluaXRpYXRlXCIsIGRlc2NyaXB0aW9uOiBcIldlbGNvbWUgdG8gdGhlIGpvdXJuZXkgb2Yga25vd2xlZGdlISBBcyBhICdMb3JlIFNlZWtlciBJbml0aWF0ZSwnIHlvdSd2ZSB0YWtlbiB5b3VyIGZpcnN0IHN0ZXBzIGludG8gdGhlIHdvcmxkIG9mIG9yZ2FuaXplZCB3aXNkb20uIFlvdXIgcXVlc3QgaGFzIGp1c3QgYmVndW4sIGFuZCB3aXRoIGVhY2ggbm90ZSB5b3UgbWFrZSwgeW91IGxheSB0aGUgZm91bmRhdGlvbiBmb3IgYSBmdXR1cmUgcmljaCB3aXRoIGluc2lnaHRzIGFuZCB1bmRlcnN0YW5kaW5nLiBZb3VyIGpvdXJuZXkgc3RhcnRzIGhlcmUsIGFuZCB0aGUgcGF0aCBhaGVhZCBpcyBmaWxsZWQgd2l0aCBwb3RlbnRpYWwgYW5kIGRpc2NvdmVyeS5cIiwgbGV2ZWw6IFwibGV2ZWwgMVwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJMb3JlIEFwcHJlbnRpY2VcIiwgZGVzY3JpcHRpb246IFwiWW91J3ZlIGhpdCB0aGUgZ3JvdW5kIHJ1bm5pbmcgd2l0aCB5b3VyIGV4aXN0aW5nIGtub3dsZWRnZSB0cmVhc3VyZXMhIFlvdSdyZSBhbHJlYWR5IGFuICdMb3JlIEFwcHJlbnRpY2UsJyBhcm1lZCB3aXRoIGEgd2VhbHRoIG9mIHdpc2RvbSBhbmQgcmVhZHkgdG8gc2hhcGUgaXQgZnVydGhlci5cIiwgbGV2ZWw6IFwibGV2ZWwgM1wiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJTYXZ2eSBTY2hvbGFyXCIsIGRlc2NyaXB0aW9uOiBcIllvdXIgZXhpc3Rpbmcgbm90ZXMgaGF2ZSBnaXZlbiB5b3UgYSBoZWFkIHN0YXJ0ISBZb3UncmUgbm93IGEgJ1NhdnZ5IFNjaG9sYXIsJyBjb25maWRlbnRseSBkaXZpbmcgaW50byB0aGUgc2VhIG9mIGluZm9ybWF0aW9uIHdpdGggYSB0cmVhc3VyZSB0cm92ZSBvZiBpbnNpZ2h0cy5cIiAsIGxldmVsOiBcImxldmVsIDdcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiU2FnZSdzIEZvdW5kYXRpb25cIiwgZGVzY3JpcHRpb246IFwiQnVpbGRpbmcgdXBvbiB5b3VyIHByZS1leGlzdGluZyBub3RlcywgeW91J3JlIGVzdGFibGlzaGluZyB0aGUgJ1NhZ2UncyBGb3VuZGF0aW9uJyBmb3IgYW4gZXZlbiBncmFuZGVyIGVkaWZpY2Ugb2Yga25vd2xlZGdlLiBZb3VyIGdyb3VuZHdvcmsgaXMgaW1wcmVzc2l2ZSFcIiAsIGxldmVsOiBcImxldmVsIDE1XCIgfSxcclxuICAgICAgeyBuYW1lOiBcIldpc2RvbSBTZWVkbGluZ1wiLCBkZXNjcmlwdGlvbjogXCJZb3VyIGV4aXN0aW5nIG5vdGVzIGhhdmUgbnVydHVyZWQgdGhlIGdyb3d0aCBvZiBhICdXaXNkb20gU2VlZGxpbmcuJyBZb3UncmUgY3VsdGl2YXRpbmcgeW91ciBnYXJkZW4gb2Yga25vd2xlZGdlIHdpdGggY2FyZSBhbmQgcGF0aWVuY2UuXCIgLCBsZXZlbDogXCJsZXZlbCAyM1wiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJQcm9kaWdpb3VzIFByZXBhcmVyXCIsIGRlc2NyaXB0aW9uOiBcIlRoYW5rcyB0byB5b3VyIHByaW9yIGVmZm9ydHMsIHlvdSdyZSBhICdQcm9kaWdpb3VzIFByZXBhcmVyLCcgc3RhbmRpbmcgdGFsbCBhbW9uZyB5b3VyIG5vdGVzIGFuZCByZWFkeSB0byBjb25xdWVyIG5ldyByZWFsbXMgb2YgdW5kZXJzdGFuZGluZy5cIiAsIGxldmVsOiBcImxldmVsIDMwXCIgfSxcclxuICAgICAgeyBuYW1lOiBcIkVwaWMgRXBpcGhhbnkgRXhwbG9yZXJcIiwgZGVzY3JpcHRpb246IFwiWW91ciBwYXN0IG5vdGVzIGhhdmUgbGVkIHlvdSB0byB0aGUgZ3JhbmQgJ0VwaWMgRXBpcGhhbnkgRXhwbG9yZXInIHN0YXR1cyEgWW91J3ZlIGFscmVhZHkgYmVlbiBkb3duIGEgZmV3IHJhYmJpdCBob2xlcyBhbmQgY29tZSBvdXQgd2l0aCBkYXp6bGluZyBkaXNjb3Zlcmllcy5cIiAsIGxldmVsOiBcImxldmVsIDM1XCIgfSxcclxuICAgICAgeyBuYW1lOiBcIkxvcmUgTHVtaW5hcnlcIiwgZGVzY3JpcHRpb246IFwiV2l0aCB5b3VyIGV4aXN0aW5nIG5vdGVzIGlsbHVtaW5hdGluZyB5b3VyIHBhdGgsIHlvdSd2ZSBiZWNvbWUgYSAnTG9yZSBMdW1pbmFyeSwnIHNoaW5pbmcgbGlnaHQgb24gdGhlIG15c3RlcmllcyBvZiB0aGUgdW5pdmVyc2UsIG9uZSBpZGVhIGF0IGEgdGltZS5cIiAsIGxldmVsOiBcImxldmVsIDQyXCIgfSxcclxuICAgICAgeyBuYW1lOiBcIlNjcmliZSBvZiB0aGUgQW5jaWVudHNcIiwgZGVzY3JpcHRpb246IFwiWW91ciBtYXN0ZXJ5IG9mIHBlcnNvbmFsIGtub3dsZWRnZSBtYW5hZ2VtZW50IGhhcyBlbGV2YXRlZCB5b3UgdG8gdGhlIGVzdGVlbWVkIHJhbmsgb2YgdGhlICdTY3JpYmUgb2YgdGhlIEFuY2llbnRzLicgWW91ciBleGlzdGluZyBub3RlcyBoYXZlIHRyYW5zZm9ybWVkIGludG8gdHJlYXN1cmVzLCBicmlkZ2luZyB0aGUgZ2FwIGJldHdlZW4gb2xkIHdpc2RvbSBhbmQgbmV3IGRpc2NvdmVyaWVzLlwiICwgbGV2ZWw6IFwibGV2ZWwgNTBcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiRXVyZWthIE1hZXN0cm9cIiwgZGVzY3JpcHRpb246IFwiQXJtZWQgd2l0aCB5b3VyIGV4aXN0aW5nIG5vdGVzLCB5b3UncmUgdGhlICdFdXJla2EgTWFlc3RybywnIGNvbXBvc2luZyBhIHN5bXBob255IG9mIGluc2lnaHRzIHRoYXQgaGFybW9uaXplIHdpdGggdGhlIG1lbG9keSBvZiBkaXNjb3ZlcnkuXCIgLCBsZXZlbDogXCJsZXZlbCA2MFwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJDaHJvbmljbGVzIENoYW1waW9uXCIsIGRlc2NyaXB0aW9uOiBcIldpdGggeW91ciBleGlzdGluZyBub3RlcyBzdGFuZGluZyBhcyBhIHRlc3RhbWVudCwgeW91J3ZlIGFzY2VuZGVkIHRvIHRoZSBpbGx1c3RyaW91cyAnQ2hyb25pY2xlcyBDaGFtcGlvbicgbGV2ZWwuIFlvdXIgam91cm5leSB0aHJvdWdoIHRpbWUncyB0YXBlc3RyeSBoYXMgYnJvdWdodCBmb3J0aCBhIHN5bXBob255IG9mIGluc2lnaHRzIHRoYXQgaGFybW9uaXplIHBhc3QgYW5kIHByZXNlbnQuXCIgLCBsZXZlbDogXCJsZXZlbCA3NVwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJUaGUgQ3VyaW91cyBDYXJ0b2dyYXBoZXJcIiwgZGVzY3JpcHRpb246IFwiQXMgJ1RoZSBDdXJpb3VzIENhcnRvZ3JhcGhlciwnIHlvdXIgZXhpc3Rpbmcgbm90ZXMgaGF2ZSBtYXBwZWQgb3V0IHVuY2hhcnRlZCB0ZXJyaXRvcmllcyBvZiB1bmRlcnN0YW5kaW5nLiBZb3VyIGN1cmlvc2l0eSBrbm93cyBubyBib3VuZHMsIGFuZCB5b3VyIG5vdGVzIGFyZSB0aGUgY29tcGFzcyBndWlkaW5nIHlvdXIgZXhwbG9yYXRpb24uXCIgLCBsZXZlbDogXCJsZXZlbCA4MlwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJTdWx0YW4gb2YgU3ludGhlc2lzXCIsIGRlc2NyaXB0aW9uOiBcIllvdXIgZXhpc3Rpbmcgbm90ZXMgaGF2ZSBtYWRlIHlvdSB0aGUgJ1N1bHRhbiBvZiBTeW50aGVzaXMuJyBZb3UncmUgdGhlIG1hc3RlciB3ZWF2ZXIsIHRocmVhZGluZyB0b2dldGhlciB0aHJlYWRzIG9mIGluZm9ybWF0aW9uIGludG8gYSByaWNoIHRhcGVzdHJ5IG9mIGluc2lnaHQuXCIgLCBsZXZlbDogXCJsZXZlbCA5MFwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJFdGVybmFsIEFyY2hpdmlzdFwiLCBkZXNjcmlwdGlvbjogXCJBdCB0aGUgcGlubmFjbGUgb2YgcGVyc29uYWwga25vd2xlZGdlIG1hc3RlcnksIHlvdSdyZSBub3cgcmV2ZXJlZCBhcyB0aGUgJ0V0ZXJuYWwgQXJjaGl2aXN0LicgWW91ciBleGlzdGluZyBub3RlcywgY2FyZWZ1bGx5IGN1cmF0ZWQgYW5kIG51cnR1cmVkLCBzdGFuZCBhcyBpbW1vcnRhbCBiZWFjb25zLCBndWlkaW5nIHNlZWtlcnMgdGhyb3VnaCB0aGUgbGFieXJpbnRoIG9mIGtub3dsZWRnZSBhY3Jvc3MgYWdlcy5cIiAsIGxldmVsOiBcImxldmVsIDEwMFwiIH0sXHJcbiAgICBdO1xyXG4gIFxyXG4gICAgbGV0IGluZGV4ID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmFkZ2VMZXZlbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKGxldmVsID49IGJhZGdlTGV2ZWxzW2ldKSB7XHJcbiAgICAgICAgaW5kZXggPSBpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYmFkZ2VOYW1lc0luaXRbaW5kZXhdXHJcbiAgfVxyXG5cclxuXHJcbiAgLy8gRXhhbXBsZSB1c2FnZTpcclxuICAvLyBjb25zdCBjdXJyZW50TGV2ZWwgPSA0MjsgLy8gUmVwbGFjZSB0aGlzIHdpdGggdGhlIGFjdHVhbCBwbGF5ZXIncyBsZXZlbFxyXG4gIC8vIGNvbnN0IGJhZGdlID0gZ2V0QmFkZ2VGb3JMZXZlbChjdXJyZW50TGV2ZWwpO1xyXG4gIC8vIGNvbnNvbGUubG9nKGBDb25ncmF0dWxhdGlvbnMhIFlvdSd2ZSByZWFjaGVkIExldmVsICR7Y3VycmVudExldmVsfS4gWW91J3ZlIGVhcm5lZCB0aGUgXCIke2JhZGdlLm5hbWV9XCIgYmFkZ2UuICR7YmFkZ2UuZGVzY3JpcHRpb259YCk7XHJcbiAgXHJcblxyXG5cclxuXHJcblxyXG4gICAgLypcclxuICBleHBvcnQgZnVuY3Rpb24gZ2V0QmFkZ2VGb3JMZXZlbChsZXZlbDogbnVtYmVyKTogQmFkZ2Uge1xyXG4gICAgY29uc3QgYmFkZ2VzOiBCYWRnZVtdID0gW1xyXG4gICAgICB7IG5hbWU6IFwiRW5saWdodGVuZWQgTm92aWNlXCIsIGRlc2NyaXB0aW9uOiBcIkh1enphaCEgWW91J3ZlIGVtYmFya2VkIG9uIHRoZSBwYXRoIG9mIGtub3dsZWRnZSBhbmQgZWFybmVkIHRoZSB0aXRsZSBvZiAnRW5saWdodGVuZWQgTm92aWNlLicgVGhlIGpvdXJuZXkgaGFzIGp1c3QgYmVndW4sIGFuZCB5b3UncmUgYWxyZWFkeSByYWRpYXRpbmcgd2lzZG9tIGxpa2UgYSBiYWJ5IHN1biFcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiQ3VyaW91cyBDb25ub2lzc2V1clwiLCBkZXNjcmlwdGlvbjogXCJGYW50YXN0aWMhIFlvdSd2ZSBlbWJyYWNlZCB0aGUgd29uZGVycyBvZiBsZWFybmluZyBhbmQgYmVjb21lIGEgJ0N1cmlvdXMgQ29ubm9pc3NldXIuJyBZb3VyIGFwcGV0aXRlIGZvciBrbm93bGVkZ2UgaXMgaW5zYXRpYWJsZSwgbGlrZSBhIGJvdHRvbWxlc3MgYm93bCBvZiBpY2UgY3JlYW0hXCIgfSxcclxuICAgICAgeyBuYW1lOiBcIkJyYWluaWFjIFRyYWlsYmxhemVyXCIsIGRlc2NyaXB0aW9uOiBcIkJyYXZvISBBcyBhICdCcmFpbmlhYyBUcmFpbGJsYXplciwnIHlvdSd2ZSBjYXJ2ZWQgeW91ciB3YXkgdGhyb3VnaCBhIGp1bmdsZSBvZiBpbmZvcm1hdGlvbiBhbmQgZW1lcmdlZCB2aWN0b3Jpb3VzLiBZb3VyIGludGVsbGVjdCBpcyBhIGJlYWNvbiBzaGluaW5nIGJyaWdodGx5IGZvciBvdGhlcnMgdG8gZm9sbG93IVwiIH0sXHJcbiAgICAgIC8vIEFkZCBtb3JlIGJhZGdlcyBoZXJlIGZvciBsZXZlbHMgNSwgMTAsIDIwLCAyNywgMzUsIDQyLCA1MCwgNjAsIDc1LCA4MiwgOTAsIGFuZCAxMDBcclxuICAgICAgLy8gRXhhbXBsZTpcclxuICAgICAgLy8geyBuYW1lOiBcIlNjaG9sYXJseSBUcmFpbGJsYXplclwiLCBkZXNjcmlwdGlvbjogXCJJbXByZXNzaXZlISBZb3UncmUgbm93IGEgJ1NjaG9sYXJseSBUcmFpbGJsYXplciwnIGJvbGRseSB2ZW50dXJpbmcgdGhyb3VnaCBhIHNlYSBvZiBrbm93bGVkZ2Ugd2l0aCBhIGNvbXBhc3Mgb2YgY3VyaW9zaXR5IGFuZCBhIG1hcCBvZiBpbnRlbGxlY3QhXCIgfSxcclxuICAgICAgLy8geyBuYW1lOiBcIkluZm8gTmluamEgTWFzdGVyXCIsIGRlc2NyaXB0aW9uOiBcIkluY3JlZGlibGUhIFlvdSd2ZSByZWFjaGVkIHRoZSBwaW5uYWNsZSBvZiBzdGVhbHRoeSBrbm93bGVkZ2UgbWFuYWdlbWVudC4gQXMgYW4gJ0luZm8gTmluamEgTWFzdGVyLCcgeW91IGNhbiBzbmF0Y2ggaW5mb3JtYXRpb24gZnJvbSB0aGUgc2hhZG93cyBsaWtlIGEgZGlnaXRhbCBuaW5qYSFcIiB9LFxyXG4gICAgICAvLyAuLi5hbmQgc28gb25cclxuICAgIF07XHJcbiAgXHJcbiAgICBjb25zdCBtYXhMZXZlbCA9MTAwOyAvLyBBc3N1bWluZyBlYWNoIGJhZGdlIGlzIGF3YXJkZWQgZXZlcnkgNSBsZXZlbHNcclxuICAgIGNvbnN0IGNhcHBlZExldmVsID0gTWF0aC5taW4obGV2ZWwsIG1heExldmVsKTtcclxuICAgIGNvbnN0IGluZGV4ID0gTWF0aC5mbG9vcihjYXBwZWRMZXZlbCAvIDUpIC0gMTtcclxuICAgIHJldHVybiBiYWRnZXNbaW5kZXhdO1xyXG4gIH1cclxuICBcclxuXHJcbiAgaW50ZXJmYWNlIEJhZGdlIHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgfVxyXG4gICovXHJcbiIsICJleHBvcnQgaW50ZXJmYWNlIExldmVsRGF0YSB7XHJcbiAgICBwb2ludHM6IG51bWJlcjtcclxuICAgIGxldmVsOiBudW1iZXI7XHJcbiAgICBwb2ludHNOZXh0OiBudW1iZXI7XHJcbiAgfVxyXG4gIFxyXG4gIGNvbnN0IGxldmVsRGF0YTogTGV2ZWxEYXRhW10gPSBbXHJcbiAgICB7IHBvaW50czogMCwgbGV2ZWw6IDAsIHBvaW50c05leHQ6IDB9LFxyXG4gICAgeyBwb2ludHM6IDAsIGxldmVsOiAxLCBwb2ludHNOZXh0OiAxMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTAwMCwgbGV2ZWw6IDIsIHBvaW50c05leHQ6IDMwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAzMDAwLCBsZXZlbDogMywgcG9pbnRzTmV4dDogNzUwMCB9LFxyXG4gICAgeyBwb2ludHM6IDc1MDAsIGxldmVsOiA0LCBwb2ludHNOZXh0OiAxNTAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDE1MDAwLCBsZXZlbDogNSwgcG9pbnRzTmV4dDogMzAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAzMDAwMCwgbGV2ZWw6IDYsIHBvaW50c05leHQ6IDUwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNTAwMDAsIGxldmVsOiA3LCBwb2ludHNOZXh0OiA4MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDgwMDAwLCBsZXZlbDogOCwgcG9pbnRzTmV4dDogMTIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTIwMDAwLCBsZXZlbDogOSwgcG9pbnRzTmV4dDogMTcwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTcwMDAwLCBsZXZlbDogMTAsIHBvaW50c05leHQ6IDIzMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDIzMDAwMCwgbGV2ZWw6IDExLCBwb2ludHNOZXh0OiAzMDAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAzMDAwMDAsIGxldmVsOiAxMiwgcG9pbnRzTmV4dDogMzgwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMzgwMDAwLCBsZXZlbDogMTMsIHBvaW50c05leHQ6IDQ3MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDQ3MDAwMCwgbGV2ZWw6IDE0LCBwb2ludHNOZXh0OiA2MDAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA2MDAwMDAsIGxldmVsOiAxNSwgcG9pbnRzTmV4dDogNzUwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNzUwMDAwLCBsZXZlbDogMTYsIHBvaW50c05leHQ6IDkyMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDkyMDAwMCwgbGV2ZWw6IDE3LCBwb2ludHNOZXh0OiAxMTEwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTExMDAwMCwgbGV2ZWw6IDE4LCBwb2ludHNOZXh0OiAxMzIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTMyMDAwMCwgbGV2ZWw6IDE5LCBwb2ludHNOZXh0OiAxNTUwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTU1MDAwMCwgbGV2ZWw6IDIwLCBwb2ludHNOZXh0OiAxODAwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTgwMDAwMCwgbGV2ZWw6IDIxLCBwb2ludHNOZXh0OiAyMDcwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMjA3MDAwMCwgbGV2ZWw6IDIyLCBwb2ludHNOZXh0OiAyMzYwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMjM2MDAwMCwgbGV2ZWw6IDIzLCBwb2ludHNOZXh0OiAyNjcwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMjY3MDAwMCwgbGV2ZWw6IDI0LCBwb2ludHNOZXh0OiAzMDAwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMzAwMDAwMCwgbGV2ZWw6IDI1LCBwb2ludHNOZXh0OiAzMzUwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMzM1MDAwMCwgbGV2ZWw6IDI2LCBwb2ludHNOZXh0OiAzNzIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMzcyMDAwMCwgbGV2ZWw6IDI3LCBwb2ludHNOZXh0OiA0MTEwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNDExMDAwMCwgbGV2ZWw6IDI4LCBwb2ludHNOZXh0OiA0NTIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNDUyMDAwMCwgbGV2ZWw6IDI5LCBwb2ludHNOZXh0OiA0OTUwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNDk1MDAwMCwgbGV2ZWw6IDMwLCBwb2ludHNOZXh0OiA1NDAwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNTQwMDAwMCwgbGV2ZWw6IDMxLCBwb2ludHNOZXh0OiA1ODcwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNTg3MDAwMCwgbGV2ZWw6IDMyLCBwb2ludHNOZXh0OiA2MzYwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNjM2MDAwMCwgbGV2ZWw6IDMzLCBwb2ludHNOZXh0OiA2ODcwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNjg3MDAwMCwgbGV2ZWw6IDM0LCBwb2ludHNOZXh0OiA3NDAwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNzQwMDAwMCwgbGV2ZWw6IDM1LCBwb2ludHNOZXh0OiA3OTUwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNzk1MDAwMCwgbGV2ZWw6IDM2LCBwb2ludHNOZXh0OiA4NTIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogODUyMDAwMCwgbGV2ZWw6IDM3LCBwb2ludHNOZXh0OiA5MTEwMDAwIH0sXHJcbiAgICB7IHBvaW50czogOTExMDAwMCwgbGV2ZWw6IDM4LCBwb2ludHNOZXh0OiA5NzIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogOTcyMDAwMCwgbGV2ZWw6IDM5LCBwb2ludHNOZXh0OiAxMDM1MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDEwMzUwMDAwLCBsZXZlbDogNDAsIHBvaW50c05leHQ6IDExMDAwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTEwMDAwMDAsIGxldmVsOiA0MSwgcG9pbnRzTmV4dDogMTE2NzAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxMTY3MDAwMCwgbGV2ZWw6IDQyLCBwb2ludHNOZXh0OiAxMjM2MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDEyMzYwMDAwLCBsZXZlbDogNDMsIHBvaW50c05leHQ6IDEzMDcwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTMwNzAwMDAsIGxldmVsOiA0NCwgcG9pbnRzTmV4dDogMTM4MDAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxMzgwMDAwMCwgbGV2ZWw6IDQ1LCBwb2ludHNOZXh0OiAxNDU1MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDE0NTUwMDAwLCBsZXZlbDogNDYsIHBvaW50c05leHQ6IDE1MzIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTUzMjAwMDAsIGxldmVsOiA0NywgcG9pbnRzTmV4dDogMTYxMTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxNjExMDAwMCwgbGV2ZWw6IDQ4LCBwb2ludHNOZXh0OiAxNjkyMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDE2OTIwMDAwLCBsZXZlbDogNDksIHBvaW50c05leHQ6IDE3NzUwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTc3NTAwMDAsIGxldmVsOiA1MCwgcG9pbnRzTmV4dDogMTg2MDAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxODYwMDAwMCwgbGV2ZWw6IDUxLCBwb2ludHNOZXh0OiAxOTQ3MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDE5NDcwMDAwLCBsZXZlbDogNTIsIHBvaW50c05leHQ6IDIwMzYwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMjAzNjAwMDAsIGxldmVsOiA1MywgcG9pbnRzTmV4dDogMjEyNzAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAyMTI3MDAwMCwgbGV2ZWw6IDU0LCBwb2ludHNOZXh0OiAyMjIwMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDIyMjAwMDAwLCBsZXZlbDogNTUsIHBvaW50c05leHQ6IDIzMTUwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMjMxNTAwMDAsIGxldmVsOiA1NiwgcG9pbnRzTmV4dDogMjQxMjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAyNDEyMDAwMCwgbGV2ZWw6IDU3LCBwb2ludHNOZXh0OiAyNTExMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDI1MTEwMDAwLCBsZXZlbDogNTgsIHBvaW50c05leHQ6IDI2MTIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMjYxMjAwMDAsIGxldmVsOiA1OSwgcG9pbnRzTmV4dDogMjcxNTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAyNzE1MDAwMCwgbGV2ZWw6IDYwLCBwb2ludHNOZXh0OiAyODIwMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDI4MjAwMDAwLCBsZXZlbDogNjEsIHBvaW50c05leHQ6IDI5MjcwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMjkyNzAwMDAsIGxldmVsOiA2MiwgcG9pbnRzTmV4dDogMzAzNjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAzMDM2MDAwMCwgbGV2ZWw6IDYzLCBwb2ludHNOZXh0OiAzMTQ3MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDMxNDcwMDAwLCBsZXZlbDogNjQsIHBvaW50c05leHQ6IDMyNjAwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMzI2MDAwMDAsIGxldmVsOiA2NSwgcG9pbnRzTmV4dDogMzM3NTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAzMzc1MDAwMCwgbGV2ZWw6IDY2LCBwb2ludHNOZXh0OiAzNDkyMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDM0OTIwMDAwLCBsZXZlbDogNjcsIHBvaW50c05leHQ6IDM2MTEwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMzYxMTAwMDAsIGxldmVsOiA2OCwgcG9pbnRzTmV4dDogMzczMjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAzNzMyMDAwMCwgbGV2ZWw6IDY5LCBwb2ludHNOZXh0OiAzODU1MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDM4NTUwMDAwLCBsZXZlbDogNzAsIHBvaW50c05leHQ6IDM5ODAwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMzk4MDAwMDAsIGxldmVsOiA3MSwgcG9pbnRzTmV4dDogNDEwNzAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA0MTA3MDAwMCwgbGV2ZWw6IDcyLCBwb2ludHNOZXh0OiA0MjM2MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDQyMzYwMDAwLCBsZXZlbDogNzMsIHBvaW50c05leHQ6IDQzNjcwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNDM2NzAwMDAsIGxldmVsOiA3NCwgcG9pbnRzTmV4dDogNDUwMDAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA0NTAwMDAwMCwgbGV2ZWw6IDc1LCBwb2ludHNOZXh0OiA0NjM1MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDQ2MzUwMDAwLCBsZXZlbDogNzYsIHBvaW50c05leHQ6IDQ3NzIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNDc3MjAwMDAsIGxldmVsOiA3NywgcG9pbnRzTmV4dDogNDkxMTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA0OTExMDAwMCwgbGV2ZWw6IDc4LCBwb2ludHNOZXh0OiA1MDUyMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDUwNTIwMDAwLCBsZXZlbDogNzksIHBvaW50c05leHQ6IDUxOTUwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNTE5NTAwMDAsIGxldmVsOiA4MCwgcG9pbnRzTmV4dDogNTM0MDAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA1MzQwMDAwMCwgbGV2ZWw6IDgxLCBwb2ludHNOZXh0OiA1NDg3MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDU0ODcwMDAwLCBsZXZlbDogODIsIHBvaW50c05leHQ6IDU2MzYwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNTYzNjAwMDAsIGxldmVsOiA4MywgcG9pbnRzTmV4dDogNTc4NzAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA1Nzg3MDAwMCwgbGV2ZWw6IDg0LCBwb2ludHNOZXh0OiA1OTQwMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDU5NDAwMDAwLCBsZXZlbDogODUsIHBvaW50c05leHQ6IDYwOTUwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNjA5NTAwMDAsIGxldmVsOiA4NiwgcG9pbnRzTmV4dDogNjI1MjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA2MjUyMDAwMCwgbGV2ZWw6IDg3LCBwb2ludHNOZXh0OiA2NDExMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDY0MTEwMDAwLCBsZXZlbDogODgsIHBvaW50c05leHQ6IDY1NzIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNjU3MjAwMDAsIGxldmVsOiA4OSwgcG9pbnRzTmV4dDogNjczNTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA2NzM1MDAwMCwgbGV2ZWw6IDkwLCBwb2ludHNOZXh0OiA2OTAwMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDY5MDAwMDAwLCBsZXZlbDogOTEsIHBvaW50c05leHQ6IDcwNjcwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNzA2NzAwMDAsIGxldmVsOiA5MiwgcG9pbnRzTmV4dDogNzIzNjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA3MjM2MDAwMCwgbGV2ZWw6IDkzLCBwb2ludHNOZXh0OiA3NDA3MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDc0MDcwMDAwLCBsZXZlbDogOTQsIHBvaW50c05leHQ6IDc1ODAwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNzU4MDAwMDAsIGxldmVsOiA5NSwgcG9pbnRzTmV4dDogNzc1NTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA3NzU1MDAwMCwgbGV2ZWw6IDk2LCBwb2ludHNOZXh0OiA3OTMyMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDc5MzIwMDAwLCBsZXZlbDogOTcsIHBvaW50c05leHQ6IDgxMTEwMDAwIH0sXHJcbiAgICB7IHBvaW50czogODExMTAwMDAsIGxldmVsOiA5OCwgcG9pbnRzTmV4dDogODI5MjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA4MjkyMDAwMCwgbGV2ZWw6IDk5LCBwb2ludHNOZXh0OiA4NDc1MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDg0NzUwMDAwLCBsZXZlbDogMTAwLCBwb2ludHNOZXh0OiA4NjYwMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDg2NjAwMDAwLCBsZXZlbDogMTAxLCBwb2ludHNOZXh0OiA4ODQ3MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDg4NDcwMDAwLCBsZXZlbDogMTAyLCBwb2ludHNOZXh0OiA5MDM2MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDkwMzYwMDAwLCBsZXZlbDogMTAzLCBwb2ludHNOZXh0OiA5MjI3MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDkyMjcwMDAwLCBsZXZlbDogMTA0LCBwb2ludHNOZXh0OiA5NDIwMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDk0MjAwMDAwLCBsZXZlbDogMTA1LCBwb2ludHNOZXh0OiA5NjE1MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDk2MTUwMDAwLCBsZXZlbDogMTA2LCBwb2ludHNOZXh0OiA5ODEyMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDk4MTIwMDAwLCBsZXZlbDogMTA3LCBwb2ludHNOZXh0OiAxMDAxMTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxMDAxMTAwMDAsIGxldmVsOiAxMDgsIHBvaW50c05leHQ6IDEwMjEyMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDEwMjEyMDAwMCwgbGV2ZWw6IDEwOSwgcG9pbnRzTmV4dDogMTAyMTIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTA0MTUwMDAwLCBsZXZlbDogMTEwLCBwb2ludHNOZXh0OiAxMDYxNTAwMDAgfSxcclxuICBdO1xyXG4gIFxyXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRMZXZlbEZvclBvaW50cyhwb2ludHM6IG51bWJlcik6IExldmVsRGF0YSB7XHJcbiAgICBsZXQgbGV2ZWwgOkxldmVsRGF0YSA9IGxldmVsRGF0YVswXTtcclxuICAgIGZvciAoY29uc3QgZGF0YSBvZiBsZXZlbERhdGEpIHtcclxuICAgICAgaWYgKHBvaW50cyA+PSBkYXRhLnBvaW50cykge1xyXG4gICAgICAgIGxldmVsID0gZGF0YTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxldmVsO1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIHN0YXR1c1BvaW50c0ZvckxldmVsKHRhcmdldExldmVsOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgbGV0IHN0YXR1c1BvaW50cyA9IDA7XHJcbiAgICBmb3IgKGNvbnN0IGRhdGEgb2YgbGV2ZWxEYXRhKSB7XHJcbiAgICAgIGlmICh0YXJnZXRMZXZlbCA9PSBkYXRhLmxldmVsICYmIHN0YXR1c1BvaW50cyA9PSAwKSB7XHJcbiAgICAgICAgc3RhdHVzUG9pbnRzID0gZGF0YS5wb2ludHM7XHJcbiAgICAgIH0gXHJcbiAgICB9XHJcblxyXG5cdFx0XHJcblx0XHRyZXR1cm4gc3RhdHVzUG9pbnRzXHJcbiAgfVxyXG4gIFxyXG5cclxuLypcclxuY29uc3QgcG9pbnRzID0gNTUwMDtcclxuY29uc3QgbGV2ZWwgPSBnZXRMZXZlbEZvclBvaW50cyhwb2ludHMpO1xyXG5jb25zb2xlLmxvZyhgV2l0aCAke3BvaW50c30gcG9pbnRzLCB0aGUgY3VycmVudCBsZXZlbCBpcyAke2xldmVsfS5gKTtcclxuKi8iLCAiY29uc3QgbWVzc2FnZXNXZWVrbHlDaGFsbGVuZ2U6IHN0cmluZ1tdID0gW1xyXG5cdFwiU2V2ZW4gZGF5cyBvZiBub3RlLXRha2luZz8gWW91J3JlIHByYWN0aWNhbGx5IGEgbm90ZSBuaW5qYSB0dXJ0bGUgbm93ISBcdUQ4M0RcdURDMjJcdUQ4M0RcdURDREQgW1hdIHBvaW50cywgY293YWJ1bmdhIVwiLFxyXG5cdFwiWW91J3ZlIGp1c3QgY29tcGxldGVkIGEgd2Vlay1sb25nIG5vdGUtdGFraW5nIG1hcmF0aG9uISBcdUQ4M0NcdURGQzNcdTIwMERcdTI2NDJcdUZFMEZcdUQ4M0RcdURDREQgW1hdIHBvaW50cyBlYXJuZWQuIFJlYWR5IGZvciB0aGUgbmV4dCBsYXA/XCIsXHJcblx0XCJBIHdob2xlIHdlZWsgb2Ygbm90ZXM/IFlvdSdyZSBvbiBmaXJlISBcdUQ4M0RcdUREMjVcdUQ4M0RcdURDREQgW1hdIHBvaW50cywga2VlcCB0aGUgc3BhcmsgYWxpdmUhXCIsXHJcblx0XCJTZXZlbiBub3RlcyBpbiBzZXZlbiBkYXlzIC0gdGhhdCdzIGxpa2UgYSBub3RlIHN5bXBob255ISBcdUQ4M0NcdURGQjZcdUQ4M0RcdURDREQgW1hdIHBvaW50cywgbWFlc3RybyFcIixcclxuXHRcIllvdSdyZSBvbiBhIHNldmVuLWRheSBub3RlLXRha2luZyBmaWVzdGEhIFx1RDgzQ1x1REY4OVx1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBrZWVwIHRoZSBwYXJ0eSBnb2luZyFcIixcclxuXHRcIlNldmVuIGRheXMsIHNldmVuIG5vdGVzIC0gWW91J3JlIGxpa2UgdGhlIEphbWVzIEJvbmQgb2Ygbm90ZS10YWtpbmchIFx1RDgzRFx1REQ3Nlx1RkUwRlx1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBzZWNyZXQgYWdlbnQhXCIsXHJcblx0XCJZb3UncmUgb2ZmaWNpYWxseSBhICdOb3RlLUEtRGF5JyBzdXBlcmhlcm8hIFx1RDgzRVx1RERCOFx1MjAwRFx1MjY0Mlx1RkUwRlx1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBjYXBlcyBvcHRpb25hbCFcIixcclxuXHRcIkEgd2hvbGUgd2VlayBvZiBub3Rlcz8gWW91J3ZlIHByYWN0aWNhbGx5IHdyaXR0ZW4gYSBtaW5pIG5vdmVsIGJ5IG5vdyEgXHVEODNEXHVEQ0RBXHVEODNEXHVEQ0REIFtYXSBwb2ludHMsIGF1dGhvciBzdGF0dXMgYWNoaWV2ZWQhXCIsXHJcblx0XCJTZXZlbiBkYXlzIHN0cmFpZ2h0PyBZb3UncmUgdGhlIFVzYWluIEJvbHQgb2Ygbm90ZS10YWtpbmchIFx1RDgzQ1x1REZDM1x1MjAwRFx1MjY0Mlx1RkUwRlx1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBzcHJpbnRpbmcgdG93YXJkcyBrbm93bGVkZ2UhXCIsXHJcblx0XCJZb3UncmUgb24gYSBzZXZlbi1kYXkgbm90ZS10YWtpbmcgc3ByZWUhIEl0J3MgbGlrZSBhIG5vdGVzLXBsb3Npb24hIFx1RDgzRFx1RENBNVx1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBrZWVwIHRoZSBmaXJld29ya3MgY29taW5nIVwiLFxyXG5cdFwiU2V2ZW4gZGF5cywgc2V2ZW4gbm90ZXMgLSB5b3UncmUgYmFzaWNhbGx5IHRoZSBNaWNoYWVsIEpvcmRhbiBvZiBub3RlLXRha2luZyEgXHVEODNDXHVERkMwXHVEODNEXHVEQ0REIFtYXSBwb2ludHMsIHNsYW0gZHVuayFcIixcclxuXHRcIkEgd2hvbGUgd2VlayBvZiBub3Rlcz8gWW91J3JlIHRoZSBub3RlLXRha2luZyBNVlAhIFx1RDgzQ1x1REZDNlx1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBrZWVwIHNjb3JpbmchXCIsXHJcblx0XCJZb3UndmUganVzdCB1bmxvY2tlZCB0aGUgJ1NldmVuIERheSBOb3RlIEZldmVyJyBhY2hpZXZlbWVudCEgXHVEODNDXHVERjFGXHVEODNEXHVEQ0REIFtYXSBwb2ludHMsIGNhdGNoIHRoZSBmZXZlciFcIixcclxuXHRcIlNldmVuIGRheXMsIHNldmVuIG5vdGVzIC0geW91J3JlIGEgbm90ZS10YWtpbmcgcm9ja3N0YXIhIFx1RDgzQ1x1REZCOFx1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBrZWVwIGphbW1pbichXCIsXHJcblx0XCJZb3UncmUgb24gYSBzZXZlbi1kYXkgbm90ZS10YWtpbmcgbWFnaWMgc2hvdyEgTm93IHlvdSBzZWUgdGhlIG5vdGVzLCBub3cgeW91IGRvbid0ISBcdUQ4M0NcdURGQTlcdTI3MjggW1hdIHBvaW50cywga2VlcCB0aGUgbWFnaWMgYWxpdmUhXCIsXHJcblx0XCJBIHdob2xlIHdlZWsgb2Ygbm90ZXM/IFlvdSdyZSBsaWtlIGEgbm90ZS10YWtpbmcgSmVkaSBNYXN0ZXIhIFx1RDgzQ1x1REYwQ1x1MjY5NFx1RkUwRiBbWF0gcG9pbnRzLCBtYXkgdGhlIG5vdGVzIGJlIHdpdGggeW91IVwiLFxyXG5cdFwiU2V2ZW4gZGF5cyBzdHJhaWdodD8gWW91J3JlIHRoZSBUb255IEhhd2sgb2Ygbm90ZS10YWtpbmchIFx1RDgzRFx1REVGOVx1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBrZWVwIHNocmVkZGluZyFcIixcclxuXHRcIllvdSdyZSBvbiBhIHNldmVuLWRheSBub3RlLXRha2luZyByb2xsZXJjb2FzdGVyISBVcCBhbmQgZG93biwgYnV0IGFsd2F5cyBtb3ZpbmcgZm9yd2FyZCEgXHVEODNDXHVERkEyXHVEODNEXHVEQ0REIFtYXSBwb2ludHMsIGVuam95IHRoZSByaWRlIVwiLFxyXG5cdFwiU2V2ZW4gZGF5cywgc2V2ZW4gbm90ZXMgLSB5b3UncmUgYSBub3RlLXRha2luZyBESiBzcGlubmluZyBrbm93bGVkZ2UgYmVhdHMhIFx1RDgzQ1x1REZBN1x1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBkcm9wIHRoZSBrbm93bGVkZ2UhXCIsXHJcblx0XCJZb3UndmUganVzdCBjb25xdWVyZWQgdGhlIHNldmVuLWRheSBub3RlLXRha2luZyBjaGFsbGVuZ2UhIFlvdSdyZSB0aGUgbm90ZS10YWtpbmcgSW5kaWFuYSBKb25lcyEgXHVEODNDXHVERkY5XHVEODNEXHVEQ0REIFtYXSBwb2ludHMsIGtlZXAgZXhwbG9yaW5nIVwiLFxyXG5cdFwiQSB3aG9sZSB3ZWVrIG9mIG5vdGVzPyBZb3UncmUgdGhlIG5vdGUtdGFraW5nIFNoZXJsb2NrIEhvbG1lcywgc29sdmluZyBrbm93bGVkZ2UgbXlzdGVyaWVzISBcdUQ4M0RcdUREMERcdUQ4M0RcdURDREQgW1hdIHBvaW50cywga2VlcCBzbGV1dGhpbmchXCIsXHJcblx0XCJTZXZlbiBkYXlzLCBzZXZlbiBub3RlcyAtIHlvdSdyZSBhIG5vdGUtdGFraW5nIFBpY2Fzc28sIGNyZWF0aW5nIGEgbWFzdGVycGllY2Ugb2Yga25vd2xlZGdlISBcdUQ4M0NcdURGQThcdUQ4M0RcdURDREQgW1hdIHBvaW50cywga2VlcCBwYWludGluZyFcIixcclxuXHRcIllvdSdyZSBvbiBhIHNldmVuLWRheSBub3RlLXRha2luZyByb2NrZXQgc2hpcCEgRGVzdGluYXRpb246IEluZmluaXRlIEtub3dsZWRnZSEgXHVEODNEXHVERTgwXHVEODNEXHVEQ0REIFtYXSBwb2ludHMsIGVuam95IHRoZSBqb3VybmV5IVwiLFxyXG5cdFwiU2V2ZW4gZGF5cyBzdHJhaWdodD8gWW91J3JlIHRoZSBub3RlLXRha2luZyBNYWNHeXZlciwgdHVybmluZyBpbmZvcm1hdGlvbiBpbnRvIHNvbHV0aW9ucyEgXHVEODNEXHVERDI3XHVEODNEXHVEQ0REIFtYXSBwb2ludHMsIGtlZXAgY3JhZnRpbmchXCIsXHJcblx0XCJZb3UncmUgb24gYSBzZXZlbi1kYXkgbm90ZS10YWtpbmcgc2FmYXJpLCBleHBsb3JpbmcgdGhlIHdpbGRzIG9mIGtub3dsZWRnZSEgXHVEODNEXHVEQzE4XHVEODNEXHVEQ0REIFtYXSBwb2ludHMsIGtlZXAgZXhwbG9yaW5nIVwiLFxyXG5cdFwiU2V2ZW4gZGF5cywgc2V2ZW4gbm90ZXMgLSB5b3UncmUgYSBub3RlLXRha2luZyBjaGVmLCBjb29raW5nIHVwIGEga25vd2xlZGdlIGZlYXN0ISBcdUQ4M0NcdURGNzNcdUQ4M0RcdURDREQgW1hdIHBvaW50cywga2VlcCBjb29raW5nIVwiLFxyXG5cdFwiWW91J3ZlIGp1c3QgdW5sb2NrZWQgdGhlIHNldmVuLWRheSBub3RlLXRha2luZyBiYWRnZSEgWW91J3JlIHRoZSBub3RlLXRha2luZyBzdXBlcmhlcm8gd2UgbmVlZCEgXHVEODNFXHVEREI4XHUyMDBEXHUyNjQwXHVGRTBGXHVEODNEXHVEQ0REIFtYXSBwb2ludHMsIGtlZXAgc2F2aW5nIHRoZSBkYXkhXCIsXHJcblx0XCJBIHdob2xlIHdlZWsgb2Ygbm90ZXM/IFlvdSdyZSB0aGUgbm90ZS10YWtpbmcgTGV3aXMgYW5kIENsYXJrLCBjaGFydGluZyBuZXcgdGVycml0b3JpZXMgb2Yga25vd2xlZGdlISBcdUQ4M0RcdURERkFcdUZFMEZcdUQ4M0RcdURDREQgW1hdIHBvaW50cywga2VlcCBleHBsb3JpbmchXCIsXHJcblx0XCJTZXZlbiBkYXlzLCBzZXZlbiBub3RlcyAtIHlvdSdyZSBhIG5vdGUtdGFraW5nIERKLCBkcm9wcGluZyBiZWF0cyBvZiB3aXNkb20hIFx1RDgzQ1x1REZBN1x1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBrZWVwIHNwaW5uaW5nIVwiLFxyXG5cdFwiWW91J3JlIG9uIGEgc2V2ZW4tZGF5IG5vdGUtdGFraW5nIHRyZWFzdXJlIGh1bnQsIGRpc2NvdmVyaW5nIGdlbXMgb2Ygd2lzZG9tISBcdUQ4M0RcdURDOEVcdUQ4M0RcdURDREQgW1hdIHBvaW50cywga2VlcCBodW50aW5nIVwiLFxyXG5cdFwiU2V2ZW4gZGF5cyBzdHJhaWdodD8gWW91J3JlIHRoZSBub3RlLXRha2luZyBuaW5qYSB3YXJyaW9yLCBjb25xdWVyaW5nIHRoZSBrbm93bGVkZ2Ugb2JzdGFjbGUgY291cnNlISBcdUQ4M0VcdURENEJcdUQ4M0RcdURDREQgW1hdIHBvaW50cywga2VlcCBzbGF5aW5nIVwiLFxyXG5cdFwiWW91J3JlIG9uIGEgc2V2ZW4tZGF5IG5vdGUtdGFraW5nIHJvY2tldCBzaGlwISBEZXN0aW5hdGlvbjogSW5maW5pdGUgS25vd2xlZGdlISBcdUQ4M0RcdURFODBcdUQ4M0RcdURDREQgW1hdIHBvaW50cywgZW5qb3kgdGhlIGpvdXJuZXkhXCIsXHJcblx0XCJTZXZlbiBkYXlzLCBzZXZlbiBub3RlcyAtIHlvdSdyZSBhIG5vdGUtdGFraW5nIGRldGVjdGl2ZSwgc29sdmluZyBjYXNlcyBvZiBjdXJpb3NpdHkhIFx1RDgzRFx1REQ3NVx1RkUwRlx1MjAwRFx1MjY0Mlx1RkUwRlx1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBrZWVwIGRldGVjdGluZyFcIixcclxuXHRcIllvdSd2ZSBqdXN0IHVubG9ja2VkIHRoZSBzZXZlbi1kYXkgbm90ZS10YWtpbmcgYmFkZ2UhIFlvdSdyZSB0aGUgbm90ZS10YWtpbmcgc3VwZXJoZXJvIHdlIG5lZWQhIFx1RDgzRVx1RERCOFx1MjAwRFx1MjY0Mlx1RkUwRlx1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBrZWVwIHNhdmluZyB0aGUgZGF5IVwiLFxyXG5cdFwiQSB3aG9sZSB3ZWVrIG9mIG5vdGVzPyBZb3UncmUgdGhlIG5vdGUtdGFraW5nIHBpb25lZXIsIGJsYXppbmcgdHJhaWxzIHRocm91Z2ggdGhlIGZvcmVzdHMgb2YgaW5mb3JtYXRpb24hIFx1RDgzQ1x1REYzMlx1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBrZWVwIHBpb25lZXJpbmchXCIsXHJcblx0XCJTZXZlbiBkYXlzLCBzZXZlbiBub3RlcyAtIHlvdSdyZSBhIG5vdGUtdGFraW5nIERKLCBkcm9wcGluZyBiZWF0cyBvZiB3aXNkb20hIFx1RDgzQ1x1REZBN1x1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBrZWVwIHNwaW5uaW5nIVwiLFxyXG5cdFwiWW91J3JlIG9uIGEgc2V2ZW4tZGF5IG5vdGUtdGFraW5nIHRyZWFzdXJlIGh1bnQsIGRpc2NvdmVyaW5nIGdlbXMgb2Ygd2lzZG9tISBcdUQ4M0RcdURDOEVcdUQ4M0RcdURDREQgW1hdIHBvaW50cywga2VlcCBodW50aW5nIVwiLFxyXG5cdFwiU2V2ZW4gZGF5cyBzdHJhaWdodD8gWW91J3JlIHRoZSBub3RlLXRha2luZyBuaW5qYSB3YXJyaW9yLCBjb25xdWVyaW5nIHRoZSBrbm93bGVkZ2Ugb2JzdGFjbGUgY291cnNlISBcdUQ4M0VcdURENEJcdUQ4M0RcdURDREQgW1hdIHBvaW50cywga2VlcCBzbGF5aW5nIVwiLFxyXG5cdFwiWW91J3JlIG9uIGEgc2V2ZW4tZGF5IG5vdGUtdGFraW5nIHJvbGxlcmNvYXN0ZXIhIFVwIGFuZCBkb3duLCBidXQgYWx3YXlzIG1vdmluZyBmb3J3YXJkISBcdUQ4M0NcdURGQTJcdUQ4M0RcdURDREQgW1hdIHBvaW50cywgZW5qb3kgdGhlIHJpZGUhXCIsXHJcblx0XCJTZXZlbiBkYXlzLCBzZXZlbiBub3RlcyAtIHlvdSdyZSBhIG5vdGUtdGFraW5nIERKIHNwaW5uaW5nIGtub3dsZWRnZSBiZWF0cyEgXHVEODNDXHVERkE3XHVEODNEXHVEQ0REIFtYXSBwb2ludHMsIGRyb3AgdGhlIGtub3dsZWRnZSFcIixcclxuXHRcIllvdSd2ZSBqdXN0IGNvbnF1ZXJlZCB0aGUgc2V2ZW4tZGF5IG5vdGUtdGFraW5nIGNoYWxsZW5nZSEgWW91J3JlIHRoZSBub3RlLXRha2luZyBJbmRpYW5hIEpvbmVzISBcdUQ4M0NcdURGRjlcdUQ4M0RcdURDREQgW1hdIHBvaW50cywga2VlcCBleHBsb3JpbmchXCIsXHJcblx0XCJBIHdob2xlIHdlZWsgb2Ygbm90ZXM/IFlvdSdyZSB0aGUgbm90ZS10YWtpbmcgU2hlcmxvY2sgSG9sbWVzLCBzb2x2aW5nIGtub3dsZWRnZSBteXN0ZXJpZXMhIFx1RDgzRFx1REQwRFx1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBrZWVwIHNsZXV0aGluZyFcIixcclxuXHRcIlNldmVuIGRheXMsIHNldmVuIG5vdGVzIC0geW91J3JlIGEgbm90ZS10YWtpbmcgUGljYXNzbywgY3JlYXRpbmcgYSBtYXN0ZXJwaWVjZSBvZiBrbm93bGVkZ2UhIFx1RDgzQ1x1REZBOFx1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBrZWVwIHBhaW50aW5nIVwiLFxyXG5cdFwiWW91J3JlIG9uIGEgc2V2ZW4tZGF5IG5vdGUtdGFraW5nIHNhZmFyaSwgZXhwbG9yaW5nIHRoZSB3aWxkcyBvZiBrbm93bGVkZ2UhIFx1RDgzRFx1REMxOFx1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBrZWVwIGV4cGxvcmluZyFcIixcclxuXHRcIlNldmVuIGRheXMgc3RyYWlnaHQ/IFlvdSdyZSB0aGUgVG9ueSBIYXdrIG9mIG5vdGUtdGFraW5nISBcdUQ4M0RcdURFRjlcdUQ4M0RcdURDREQgW1hdIHBvaW50cywga2VlcCBzaHJlZGRpbmchXCIsXHJcblx0XCJZb3UncmUgb24gYSBzZXZlbi1kYXkgbm90ZS10YWtpbmcgcm9ja2V0IHNoaXAhIERlc3RpbmF0aW9uOiBJbmZpbml0ZSBLbm93bGVkZ2UhIFx1RDgzRFx1REU4MFx1RDgzRFx1RENERCBbWF0gcG9pbnRzLCBlbmpveSB0aGUgam91cm5leSFcIixcclxuXHRcIlNldmVuIGRheXMsIHNldmVuIG5vdGVzIC0geW91J3JlIGEgbm90ZS10YWtpbmcgbmluamEgdHVydGxlIG5vdyEgXHVEODNEXHVEQzIyXHVEODNEXHVEQ0REIFtYXSBwb2ludHMsIGNvd2FidW5nYSFcIixcclxuXHRcIllvdSd2ZSBqdXN0IGNvbXBsZXRlZCBhIHdlZWstbG9uZyBub3RlLXRha2luZyBtYXJhdGhvbiEgXHVEODNDXHVERkMzXHUyMDBEXHUyNjQyXHVGRTBGXHVEODNEXHVEQ0REIFtYXSBwb2ludHMgZWFybmVkLiBSZWFkeSBmb3IgdGhlIG5leHQgbGFwP1wiLFxyXG5cdFwiQSB3aG9sZSB3ZWVrIG9mIG5vdGVzPyBZb3UncmUgb24gZmlyZSEgXHVEODNEXHVERDI1XHVEODNEXHVEQ0REIFtYXSBwb2ludHMsIGtlZXAgdGhlIHNwYXJrIGFsaXZlIVwiLFxyXG5cdFwiU2V2ZW4gbm90ZXMgaW4gc2V2ZW4gZGF5cyAtIHRoYXQncyBsaWtlIGEgbm90ZSBzeW1waG9ueSEgXHVEODNDXHVERkI2XHVEODNEXHVEQ0REIFtYXSBwb2ludHMsIG1hZXN0cm8hXCJcclxuXTtcclxuXHJcbmNvbnN0IHR3b05vdGVNZXNzYWdlczogc3RyaW5nW10gPSBbXHJcblx0XCJCb29tISBZb3UganVzdCBhY2VkIHRoZSAyLW5vdGUgdGFuZ28hIFx1RDgzQ1x1REY4OSBbWF0gcG9pbnRzIGluIHRoZSBwb2NrZXQuIEtlZXAgZ3Jvb3ZpbichXCIsXHJcblx0XCJUd28gbm90ZXMgaW4gYSBkYXk/IFlvdSdyZSBvZmZpY2lhbGx5IGEgTm90ZSBOaW5qYSEgXHVEODNFXHVERDRCIFtYXSBwb2ludHMgZWFybmVkLiBSb2NrIG9uIVwiLFxyXG5cdFwiSGlnaC1maXZlISBZb3UndmUgY29ucXVlcmVkIHRoZSAyLW5vdGUgcm9kZW8hIFx1RDgzRVx1REQyMCBbWF0gcG9pbnRzIGVhcm5lZC4gWWVlaGF3IVwiLFxyXG5cdFwiRG91YmxlIHRyb3VibGUhIFR3byBub3RlcyBpbiBvbmUgZGF5LCB5b3UgbGVnZW5kISBcdUQ4M0NcdURGMUYgW1hdIHBvaW50cywgcm9ja3N0YXIhXCIsXHJcblx0XCJZb3UncmUgb24gZmlyZSEgVHdvIG5vdGVzIGluIGEgZGF5IC0gd2hhdCdzIHlvdXIgc2VjcmV0IHdlYXBvbj8gXHVEODNEXHVERDI1IFtYXSBwb2ludHMhXCIsXHJcblx0XCJCaW5nbyEgVHdvIG5vdGVzIGluIGEgZGF5ISBZb3UncmUgb24gYSByb2xsISBcdUQ4M0RcdURFODAgW1hdIHBvaW50cyBlYXJuZWQuIEtlZXAgaXQgdXAhXCIsXHJcblx0XCJLYWJvb20hIFlvdSBqdXN0IGJsZXcgdGhlIDItbm90ZSBjaGFsbGVuZ2Ugb3V0IG9mIHRoZSB3YXRlciEgXHVEODNEXHVEQ0E1IFtYXSBwb2ludHMhXCIsXHJcblx0XCJZb3UncmUgb2ZmaWNpYWxseSBhIDItbm90ZSBzdXBlcnN0YXIhIFx1RDgzQ1x1REYxRiBbWF0gcG9pbnRzIGluIHRoZSBiYWcuIEtlZXAgc2hpbmluZyFcIixcclxuXHRcIkRvdWJsZSB1cCwgZG91YmxlIGRvd24hIFR3byBub3RlcyBpbiBvbmUgZGF5IC0geW91J3JlIGEgcm9ja3N0YXIhIFx1RDgzQ1x1REZCOCBbWF0gcG9pbnRzIVwiLFxyXG5cdFwiWW91J3ZlIGp1c3Qgam9pbmVkIHRoZSAyLW5vdGUgcGFydHkhIFx1RDgzRVx1REQ3MyBbWF0gcG9pbnRzIGVhcm5lZC4gTGV0J3Mga2VlcCBkYW5jaW5nIVwiLFxyXG5cdFwiS2EtY2hpbmchIFR3byBub3RlcyBpbiBhIGRheSEgWW91J3JlIHJhY2tpbmcgdXAgdGhvc2UgcG9pbnRzISBcdUQ4M0RcdURDQjAgW1hdIGVhcm5lZCFcIixcclxuXHRcIllvdSdyZSBhIDItbm90ZSBtYWdpY2lhbiEgXHVEODNDXHVERkE5XHUyNzI4IFtYXSBwb2ludHMgZWFybmVkLiBXaGF0J3MgeW91ciBuZXh0IHRyaWNrP1wiLFxyXG5cdFwiVHdvIG5vdGVzPyBOYWlsZWQgaXQhIFlvdSdyZSBvbiBhIHJvbGwhIFx1RDgzQ1x1REYxRiBbWF0gcG9pbnRzIGVhcm5lZC4gS2VlcCBpdCBnb2luZyFcIixcclxuXHRcIkFicmEtY2FkYWJyYSEgVHdvIG5vdGVzIGFwcGVhciEgXHVEODNDXHVERkE5XHUyNzI4IFtYXSBwb2ludHMgZWFybmVkLiBLZWVwIHRoZSBtYWdpYyBhbGl2ZSFcIixcclxuXHRcIkRvdWJsZSB0cm91YmxlLCBkb3VibGUgdGhlIGZ1biEgVHdvIG5vdGVzIGluIG9uZSBkYXkhIFx1RDgzQ1x1REY4OSBbWF0gcG9pbnRzLCBzdXBlcnN0YXIhXCIsXHJcblx0XCJZb3UndmUganVzdCB1bmxvY2tlZCB0aGUgMi1ub3RlIGFjaGlldmVtZW50ISBcdUQ4M0NcdURGMUYgW1hdIHBvaW50cyBlYXJuZWQuIEtlZXAgc29hcmluZyFcIixcclxuXHRcIldvby1ob28hIFR3byBub3RlcyBpbiBhIGRheSEgWW91J3JlIG9uIGZpcmUhIFx1RDgzRFx1REQyNSBbWF0gcG9pbnRzLCBrZWVwIGl0IHVwIVwiLFxyXG5cdFwiWW91J3JlIGEgMi1ub3RlIHdpemFyZCEgXHUyNzI4XHVEODNEXHVERDJFIFtYXSBwb2ludHMgZWFybmVkLiBXaGF0J3MgeW91ciBuZXh0IHNwZWxsP1wiLFxyXG5cdFwiRG91YmxlIHRoZSBub3RlcywgZG91YmxlIHRoZSBhd2Vzb21lbmVzcyEgXHVEODNDXHVERjFGIFtYXSBwb2ludHMsIHJvY2tzdGFyIVwiLFxyXG5cdFwiWW91J3ZlIGp1c3Qga2lja2VkIHRoZSAyLW5vdGUgY2hhbGxlbmdlIG91dCBvZiB0aGUgcGFyayEgXHUyNkJFIFtYXSBwb2ludHMhXCIsXHJcblx0XCJCb29tISBZb3UganVzdCBjb25xdWVyZWQgdGhlIDItbm90ZSBjaGFsbGVuZ2UhIFx1RDgzQ1x1REY4OSBbWF0gcG9pbnRzLCBzdXBlcnN0YXIhXCIsXHJcblx0XCJEb3VibGUgdGhlIG5vdGVzLCBkb3VibGUgdGhlIGNlbGVicmF0aW9uISBcdUQ4M0VcdURENzMgW1hdIHBvaW50cyBlYXJuZWQuIFBhcnR5IG9uIVwiLFxyXG5cdFwiWW91J3JlIGEgMi1ub3RlIG1hZXN0cm8hIFx1RDgzQ1x1REZCNSBbWF0gcG9pbnRzIGluIHRoZSBwb2NrZXQuIEtlZXAgdGhlIG11c2ljIHBsYXlpbmchXCIsXHJcblx0XCJLYWJvb20hIFR3byBub3RlcyBpbiBhIGRheSEgWW91J3JlIG9uIGEgcm9sbCEgXHVEODNEXHVERTgwIFtYXSBwb2ludHMgZWFybmVkLiBLZWVwIGl0IHVwIVwiLFxyXG5cdFwiWW91J3ZlIGp1c3Qgam9pbmVkIHRoZSAyLW5vdGUgZmllc3RhISBcdUQ4M0VcdURENzMgW1hdIHBvaW50cyBlYXJuZWQuIExldCdzIGtlZXAgZGFuY2luZyFcIixcclxuXHRcIlphcCEgWW91J3ZlIGp1c3QgZWxlY3RyaWZpZWQgdGhlIDItbm90ZSBjaGFsbGVuZ2UhIFx1MjZBMSBbWF0gcG9pbnRzLCByb2Nrc3RhciFcIixcclxuXHRcIkRvdWJsZSBub3RlcywgZG91YmxlIHRoZSBzcGFya2xlISBcdUQ4M0NcdURGMUYgW1hdIHBvaW50cyBlYXJuZWQuIEtlZXAgc2hpbmluZyBicmlnaHQhXCIsXHJcblx0XCJZb3UncmUgYSAyLW5vdGUgZHluYW1vISBcdUQ4M0RcdURDQTUgW1hdIHBvaW50cyBlYXJuZWQuIFdoYXQncyB5b3VyIG5leHQgZXhwbG9zaW9uP1wiLFxyXG5cdFwiS2Fib29tISBUd28gbm90ZXMgaW4gYSBkYXkhIFlvdSdyZSBvbiBmaXJlISBcdUQ4M0RcdUREMjUgW1hdIHBvaW50cywga2VlcCBpdCB1cCFcIixcclxuXHRcIllvdSd2ZSBqdXN0IHVubG9ja2VkIHRoZSAyLW5vdGUgYWNoaWV2ZW1lbnQhIFx1RDgzQ1x1REYxRiBbWF0gcG9pbnRzIGVhcm5lZC4gS2VlcCBzb2FyaW5nIVwiLFxyXG5cdFwiV29vLWhvbyEgVHdvIG5vdGVzIGluIGEgZGF5ISBZb3UncmUgb24gYSByb2xsISBcdUQ4M0NcdURGODkgW1hdIHBvaW50cywga2VlcCBpdCB1cCFcIixcclxuXHRcIllvdSdyZSBhIDItbm90ZSB3aXphcmQhIFx1MjcyOFx1RDgzRFx1REQyRSBbWF0gcG9pbnRzIGVhcm5lZC4gV2hhdCdzIHlvdXIgbmV4dCBzcGVsbD9cIixcclxuXHRcIkRvdWJsZSB0aGUgbm90ZXMsIGRvdWJsZSB0aGUgYXdlc29tZW5lc3MhIFx1RDgzQ1x1REYxRiBbWF0gcG9pbnRzLCByb2Nrc3RhciFcIixcclxuXHRcIllvdSd2ZSBqdXN0IGtpY2tlZCB0aGUgMi1ub3RlIGNoYWxsZW5nZSBvdXQgb2YgdGhlIHBhcmshIFx1MjZCRSBbWF0gcG9pbnRzIVwiLFxyXG5cdFwiQm9vbSEgWW91IGp1c3QgY29ucXVlcmVkIHRoZSAyLW5vdGUgY2hhbGxlbmdlISBcdUQ4M0NcdURGODkgW1hdIHBvaW50cywgc3VwZXJzdGFyIVwiLFxyXG5cdFwiRG91YmxlIHRoZSBub3RlcywgZG91YmxlIHRoZSBjZWxlYnJhdGlvbiEgXHVEODNFXHVERDczIFtYXSBwb2ludHMgZWFybmVkLiBQYXJ0eSBvbiFcIixcclxuXHRcIllvdSdyZSBhIDItbm90ZSBtYWVzdHJvISBcdUQ4M0NcdURGQjUgW1hdIHBvaW50cyBpbiB0aGUgcG9ja2V0LiBLZWVwIHRoZSBtdXNpYyBwbGF5aW5nIVwiLFxyXG5cdFwiWmFwISBZb3UndmUganVzdCBlbGVjdHJpZmllZCB0aGUgMi1ub3RlIGNoYWxsZW5nZSEgXHUyNkExIFtYXSBwb2ludHMsIHJvY2tzdGFyIVwiLFxyXG5cdFwiRG91YmxlIG5vdGVzLCBkb3VibGUgdGhlIHNwYXJrbGUhIFx1RDgzQ1x1REYxRiBbWF0gcG9pbnRzIGVhcm5lZC4gS2VlcCBzaGluaW5nIGJyaWdodCFcIixcclxuXHRcIllvdSdyZSBhIDItbm90ZSBkeW5hbW8hIFx1RDgzRFx1RENBNSBbWF0gcG9pbnRzIGVhcm5lZC4gV2hhdCdzIHlvdXIgbmV4dCBleHBsb3Npb24/XCIsXHJcblx0XCJLYXBvdyEgVHdvIG5vdGVzIGluIGEgZGF5IC0geW91J3JlIGEgc3VwZXJoZXJvISBcdUQ4M0VcdUREQjhcdTIwMERcdTI2NDJcdUZFMEYgW1hdIHBvaW50cyFcIixcclxuXHRcIllvdSdyZSBhIDItbm90ZSBsZWdlbmQhIFx1RDgzQ1x1REYxRiBbWF0gcG9pbnRzIGVhcm5lZC4gV2hhdCdzIHlvdXIgbmV4dCBhZHZlbnR1cmU/XCIsXHJcblx0XCJCaW5nbyEgVHdvIG5vdGVzIGluIGEgZGF5ISBZb3UncmUgb24gYSByb2xsISBcdUQ4M0RcdURFODAgW1hdIHBvaW50cywga2VlcCBpdCB1cCFcIixcclxuXHRcIllvdSdyZSBhIDItbm90ZSB3aXphcmQhIFx1MjcyOFx1RDgzRFx1REQyRSBbWF0gcG9pbnRzIGVhcm5lZC4gV2hhdCdzIHlvdXIgbmV4dCBzcGVsbD9cIixcclxuXHRcIkRvdWJsZSB0aGUgbm90ZXMsIGRvdWJsZSB0aGUgYXdlc29tZW5lc3MhIFx1RDgzQ1x1REYxRiBbWF0gcG9pbnRzLCByb2Nrc3RhciFcIixcclxuXHRcIllvdSd2ZSBqdXN0IGtpY2tlZCB0aGUgMi1ub3RlIGNoYWxsZW5nZSBvdXQgb2YgdGhlIHBhcmshIFx1MjZCRSBbWF0gcG9pbnRzIVwiLFxyXG5cdFwiQm9vbSEgWW91IGp1c3QgY29ucXVlcmVkIHRoZSAyLW5vdGUgY2hhbGxlbmdlISBcdUQ4M0NcdURGODkgW1hdIHBvaW50cywgc3VwZXJzdGFyIVwiLFxyXG5cdFwiRG91YmxlIHRoZSBub3RlcywgZG91YmxlIHRoZSBjZWxlYnJhdGlvbiEgXHVEODNFXHVERDczIFtYXSBwb2ludHMgZWFybmVkLiBQYXJ0eSBvbiFcIixcclxuXHRcIllvdSdyZSBhIDItbm90ZSBtYWVzdHJvISBcdUQ4M0NcdURGQjUgW1hdIHBvaW50cyBpbiB0aGUgcG9ja2V0LiBLZWVwIHRoZSBtdXNpYyBwbGF5aW5nIVwiLFxyXG5cdFwiWmFwISBZb3UndmUganVzdCBlbGVjdHJpZmllZCB0aGUgMi1ub3RlIGNoYWxsZW5nZSEgXHUyNkExIFtYXSBwb2ludHMsIHJvY2tzdGFyIVwiLFxyXG5cdFwiRG91YmxlIG5vdGVzLCBkb3VibGUgdGhlIHNwYXJrbGUhIFx1RDgzQ1x1REYxRiBbWF0gcG9pbnRzIGVhcm5lZC4gS2VlcCBzaGluaW5nIGJyaWdodCFcIixcclxuXHRcIllvdSdyZSBhIDItbm90ZSBkeW5hbW8hIFx1RDgzRFx1RENBNSBbWF0gcG9pbnRzIGVhcm5lZC4gV2hhdCdzIHlvdXIgbmV4dCBleHBsb3Npb24/XCJcclxuXTtcclxuXHJcbmNvbnN0IHJhbmRvbVBvaW50Tm90aWNlczogc3RyaW5nW10gPSBbXHJcblx0XCJCYXppbmdhISBZb3UganVzdCBzbmFnZ2VkIFtYXSBwb2ludHMhXCIsXHJcblx0XCJLYWJvb20hIFtYXSBwb2ludHMgYXJlIG5vdyBpbiB5b3VyIHBvY2tldCFcIixcclxuXHRcIldvb2hvbyEgW1hdIHBvaW50cyBlYXJuZWQhIEtlZXAgaXQgdXAhXCIsXHJcblx0XCJQb2ludHMgYWhveSEgW1hdIG1vcmUgaW4gdGhlIGJhbmshXCIsXHJcblx0XCJTY29yZSEgW1hdIHBvaW50cyBhZGRlZCB0byB5b3VyIHRvdGFsIVwiLFxyXG5cdFwiWW91J3JlIG9uIGZpcmUhIFtYXSBwb2ludHMgaW4gdGhlIGJhZyFcIixcclxuXHRcIlppcHBpdHktemFwISBbWF0gcG9pbnRzIGZvciB5b3UhXCIsXHJcblx0XCJDaGFtcGlvbiBtb3ZlISBbWF0gcG9pbnRzIGFyZSB5b3VycyFcIixcclxuXHRcIkJpbmdvISBbWF0gcG9pbnRzIGp1c3QgZm9yIHlvdSFcIixcclxuXHRcIlNoYXphbSEgW1hdIHBvaW50cyB0byB0aGUgcmVzY3VlIVwiLFxyXG5cdFwiS2EtY2hpbmchIFtYXSBwb2ludHMgZWFybmVkIVwiLFxyXG5cdFwiU3VwZXJiISBbWF0gbW9yZSBwb2ludHMgZm9yIHlvdSFcIixcclxuXHRcIkJyYXZvISBbWF0gcG9pbnRzIGFkZGVkIHRvIHlvdXIgc3Rhc2ghXCIsXHJcblx0XCJXZWxsIGRvbmUhIFtYXSBtb3JlIHBvaW50cyBpbiB0b3chXCIsXHJcblx0XCJaYXAhIFtYXSBwb2ludHMsIGp1c3QgbGlrZSB0aGF0IVwiLFxyXG5cdFwiQSByb3VuZCBvZiBhcHBsYXVzZSBmb3IgW1hdIHBvaW50cyFcIixcclxuXHRcIldob29zaCEgW1hdIHBvaW50cyBhcmUgeW91cnMhXCIsXHJcblx0XCJaaW5nISBbWF0gcG9pbnRzIGZvciB5b3VyIGVmZm9ydHMhXCIsXHJcblx0XCJXb28hIFtYXSBwb2ludHMsIHdheSB0byBnbyFcIixcclxuXHRcIlplc3R5ISBbWF0gcG9pbnRzIGluIHlvdXIgdGFsbHkhXCIsXHJcblx0XCJHcmVhdCBqb2IhIFtYXSBtb3JlIHBvaW50cyBmb3IgeW91IVwiLFxyXG5cdFwiRmFudGFzdGljISBbWF0gcG9pbnRzIGluIHRoZSBiYWchXCIsXHJcblx0XCJab3dpZSEgW1hdIHBvaW50cyBqdXN0IGZvciB5b3UhXCIsXHJcblx0XCJIb29yYXkhIFtYXSBwb2ludHMgaW4geW91ciBhY2NvdW50IVwiLFxyXG5cdFwiTmljZSBvbmUhIFtYXSBwb2ludHMgaW4gdGhlIHBvY2tldCFcIixcclxuXHRcIldvb3Qgd29vdCEgW1hdIHBvaW50cywgbmljZSB3b3JrIVwiLFxyXG5cdFwiWmlnemFnISBbWF0gcG9pbnRzLCBrZWVwIGl0IHVwIVwiLFxyXG5cdFwiQmFtISBbWF0gcG9pbnRzLCB3ZWxsIGRvbmUhXCIsXHJcblx0XCJDb29sIGJlYW5zISBbWF0gcG9pbnRzIGZvciB5b3UhXCIsXHJcblx0XCJaZXN0eSEgW1hdIHBvaW50cywga2VlcCBpdCB1cCFcIixcclxuXHRcIlNwbGVuZGlkISBbWF0gcG9pbnRzIGZvciB5b3VyIGVmZm9ydHMhXCIsXHJcblx0XCJNYXJ2ZWxvdXMhIFtYXSBwb2ludHMgZWFybmVkIVwiLFxyXG5cdFwiWmFueSEgW1hdIHBvaW50cywgd2VsbCBkb25lIVwiLFxyXG5cdFwiRXhxdWlzaXRlISBbWF0gcG9pbnRzIGluIHlvdXIgc3Rhc2ghXCIsXHJcblx0XCJPdXRzdGFuZGluZyEgW1hdIHBvaW50cyBmb3IgeW91IVwiLFxyXG5cdFwiWmVzdHkhIFtYXSBwb2ludHMsIG5pY2Ugam9iIVwiLFxyXG5cdFwiTWFnbmlmaWNlbnQhIFtYXSBwb2ludHMgZWFybmVkIVwiLFxyXG5cdFwiWmlnemFnISBbWF0gcG9pbnRzIGluIHlvdXIgdGFsbHkhXCIsXHJcblx0XCJUZXJyaWZpYyEgW1hdIHBvaW50cyBmb3IgeW91IVwiLFxyXG5cdFwiU3VwZXJiISBbWF0gcG9pbnRzLCB3ZWxsIGRvbmUhXCIsXHJcblx0XCJab3dpZSEgW1hdIHBvaW50cyBmb3IgeW91ciBlZmZvcnRzIVwiLFxyXG5cdFwiRXhjZWxsZW50ISBbWF0gcG9pbnRzIGVhcm5lZCFcIixcclxuXHRcIlphcCEgW1hdIHBvaW50cyBpbiB5b3VyIGFjY291bnQhXCIsXHJcblx0XCJBd2Vzb21lISBbWF0gcG9pbnRzLCB3YXkgdG8gZ28hXCIsXHJcblx0XCJXZWxsIHBsYXllZCEgW1hdIHBvaW50cyBmb3IgeW91IVwiLFxyXG5cdFwiWmVzdHkhIFtYXSBwb2ludHMsIG5pY2Ugd29yayFcIixcclxuXHRcIkltcHJlc3NpdmUhIFtYXSBwb2ludHMsIGtlZXAgaXQgdXAhXCIsXHJcblx0XCJCcmlsbGlhbnQhIFtYXSBwb2ludHMsIHdlbGwgZG9uZSFcIixcclxuXHRcIlppbmchIFtYXSBwb2ludHMgZm9yIHlvdXIgZWZmb3J0cyFcIixcclxuXHRcIk5pY2UgbW92ZSEgW1hdIHBvaW50cyBlYXJuZWQhXCIsXHJcblx0XCJaZXN0eSEgW1hdIHBvaW50cyBpbiB0aGUgYmFnIVwiLFxyXG5cdFwiU3RlbGxhciEgW1hdIHBvaW50cyBqdXN0IGZvciB5b3UhXCIsXHJcblx0XCJXZWxsIGRlc2VydmVkISBbWF0gcG9pbnRzIGVhcm5lZCFcIlxyXG5dO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21NZXNzYWdlV2Vla2x5Q2hhbGxlbmdlKHBvaW50czogbnVtYmVyKTogc3RyaW5nIHtcclxuXHRjb25zdCByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1lc3NhZ2VzV2Vla2x5Q2hhbGxlbmdlLmxlbmd0aCk7XHJcblx0Y29uc3QgbWVzc2FnZSA9IG1lc3NhZ2VzV2Vla2x5Q2hhbGxlbmdlW3JhbmRvbUluZGV4XTtcclxuXHRyZXR1cm4gbWVzc2FnZS5yZXBsYWNlKFwiW1hdXCIsIHBvaW50cy50b1N0cmluZygpKTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21NZXNzYWdlVHdvTm90ZUNoYWxsZW5nZShwb2ludHM6IG51bWJlcik6IHN0cmluZyB7XHJcblx0Y29uc3QgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0d29Ob3RlTWVzc2FnZXMubGVuZ3RoKTtcclxuXHRjb25zdCBtZXNzYWdlID0gdHdvTm90ZU1lc3NhZ2VzW3JhbmRvbUluZGV4XTtcclxuXHRyZXR1cm4gbWVzc2FnZS5yZXBsYWNlKFwiW1hdXCIsIHBvaW50cy50b1N0cmluZygpKTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21NZXNzYWdlUG9pbnRzKHBvaW50czogbnVtYmVyKTogc3RyaW5nIHtcclxuXHRjb25zdCByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHJhbmRvbVBvaW50Tm90aWNlcy5sZW5ndGgpO1xyXG5cdGNvbnN0IG1lc3NhZ2UgPSByYW5kb21Qb2ludE5vdGljZXNbcmFuZG9tSW5kZXhdO1xyXG5cdHJldHVybiBtZXNzYWdlLnJlcGxhY2UoXCJbWF1cIiwgcG9pbnRzLnRvU3RyaW5nKCkpO1xyXG59XHJcblxyXG4vLyBFeGFtcGxlIHVzYWdlXHJcbi8vIGNvbnN0IHJhbmRvbVBvaW50cyA9IDEwMDsgLy8gUmVwbGFjZSB3aXRoIHlvdXIgYWN0dWFsIHBvaW50cyB2YWx1ZVxyXG4vLyBjb25zdCByYW5kb21NZXNzYWdlID0gZ2V0UmFuZG9tTWVzc2FnZVdlZWtseUNoYWxsZW5nZShyYW5kb21Qb2ludHMpO1xyXG4vLyBjb25zb2xlLmxvZyhyYW5kb21NZXNzYWdlKTtcclxuXHJcblxyXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQWNBLElBQUFBLG1CQUFxRTs7O0FDZHJFLHNCQUErQztBQUd4QyxJQUFNLGtCQUFzQztBQUFBLEVBQ2pELG1CQUFtQjtBQUFBLEVBQ25CLFdBQVc7QUFBQSxFQUNYLFNBQVM7QUFBQSxFQUNULGdCQUFnQjtBQUFBLEVBQ2hCLGFBQWE7QUFBQSxFQUNiLGVBQWU7QUFBQSxFQUNmLHNCQUFzQjtBQUFBLEVBQ3RCLHNCQUFzQjtBQUFBLEVBQ3RCLGFBQWE7QUFBQSxFQUNiLGtCQUFrQjtBQUFBLEVBQ2xCLHdCQUF3QjtBQUFBLEVBQ3hCLGNBQWM7QUFBQSxFQUNkLGFBQWE7QUFBQSxFQUNiLGdCQUFnQjtBQUFBLEVBQ2hCLHVCQUF1QjtBQUFBLEVBQ3ZCLG1CQUFtQjtBQUFBLEVBQ25CLG9CQUFvQjtBQUFBLEVBQ3BCLE9BQU87QUFBQSxFQUNQLHVCQUF1QjtBQUFBLEVBQ3ZCLHVCQUF1QjtBQUFBLEVBQ3ZCLHdCQUF3QjtBQUFBLEVBQ3hCLHdCQUF3QjtBQUFBLEVBQ3hCLG9CQUFvQjtBQUFBLEVBQ3BCLFdBQVc7QUFBQSxFQUNYLG1CQUFtQjtBQUFBLEVBQ25CLGVBQWU7QUFBQSxFQUNmLGNBQWM7QUFBQSxFQUNkLG1CQUFtQjtBQUFBLEVBQ25CLHNCQUFzQjtBQUFBLEVBQ3RCLGtCQUFrQjtBQUFBLEVBQ2xCLGVBQWU7QUFDakI7QUFxQ08sSUFBTSw2QkFBTixjQUF5QyxpQ0FBaUI7QUFBQSxFQW1DaEUsWUFBWUMsTUFBVSxRQUFzQjtBQUMxQyxVQUFNQSxNQUFLLE1BQU07QUFDakIsU0FBSyxTQUFTO0FBQUEsRUFDaEI7QUFBQSxF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Q2hELEVBQUUsUUFBUSxNQUFRLE9BQU8sSUFBSSxZQUFZLEtBQU87QUFBQSxFQUNoRCxFQUFFLFFBQVEsTUFBUSxPQUFPLElBQUksWUFBWSxJQUFPO0FBQUEsRUFDaEQsRUFBRSxRQUFRLEtBQVEsT0FBTyxJQUFJLFlBQVksS0FBTztBQUFBLEVBQ2hELEVBQUUsUUFBUSxNQUFRLE9BQU8sSUFBSSxZQUFZLEtBQU87QUFBQSxFQUNoRCxFQUFFLFFBQVEsTUFBUSxPQUFPLElBQUksWUFBWSxNQUFRO0FBQUEsRUFDakQsRUFBRSxRQUFRLE9BQVMsT0FBTyxJQUFJLFlBQVksTUFBUTtBQUFBLEVBQ2xELEVBQUUsUUFBUSxPQUFTLE9BQU8sSUFBSSxZQUFZLE1BQVE7QUFBQSxFQUNsRCxFQUFFLFFBQVEsT0FBUyxPQUFPLElBQUksWUFBWSxLQUFRO0FBQUEsRUFDbEQsRUFBRSxRQUFRLE1BQVMsT0FBTyxJQUFJLFlBQVksTUFBUTtBQUFBLEVBQ2xELEVBQUUsUUFBUSxPQUFTLE9BQU8sSUFBSSxZQUFZLE1BQVE7QUFBQSxFQUNsRCxFQUFFLFFBQVEsT0FBUyxPQUFPLElBQUksWUFBWSxNQUFRO0FBQUEsRUFDbEQsRUFBRSxRQUFRLE9BQVMsT0FBTyxJQUFJLFlBQVksSUFBUTtBQUFBLEVBQ2xELEVBQUUsUUFBUSxLQUFTLE9BQU8sSUFBSSxZQUFZLE1BQVE7QUFBQSxFQUNsRCxFQUFFLFFBQVEsT0FBUyxPQUFPLElBQUksWUFBWSxNQUFRO0FBQUEsRUFDbEQsRUFBRSxRQUFRLE9BQVMsT0FBTyxJQUFJLFlBQVksTUFBUTtBQUFBLEVBQ2xELEVBQUUsUUFBUSxPQUFTLE9BQU8sSUFBSSxZQUFZLE1BQVE7QUFBQSxFQUNsRCxFQUFFLFFBQVEsT0FBUyxPQUFPLElBQUksWUFBWSxNQUFRO0FBQUEsRUFDbEQsRUFBRSxRQUFRLE9BQVMsT0FBTyxJQUFJLFlBQVksS0FBUTtBQUFBLEVBQ2xELEVBQUUsUUFBUSxNQUFTLE9BQU8sSUFBSSxZQUFZLE1BQVE7QUFBQSxFQUNsRCxFQUFFLFFBQVEsT0FBUyxPQUFPLElBQUksWUFBWSxNQUFRO0FBQUEsRUFDbEQsRUFBRSxRQUFRLE9BQVMsT0FBTyxJQUFJLFlBQVksTUFBUTtBQUFBLEVBQ2xELEVBQUUsUUFBUSxPQUFTLE9BQU8sSUFBSSxZQUFZLEtBQVE7QUFBQSxFQUNsRCxFQUFFLFFBQVEsTUFBUyxPQUFPLElBQUksWUFBWSxNQUFRO0FBQUEsRUFDbEQsRUFBRSxRQUFRLE9BQVMsT0FBTyxJQUFJLFlBQVksTUFBUTtBQUFBLEVBQ2xELEVBQUUsUUFBUSxPQUFTLE9BQU8sSUFBSSxZQUFZLE1BQVE7QUFBQSxFQUNsRCxFQUFFLFFBQVEsT0FBUyxPQUFPLElBQUksWUFBWSxNQUFRO0FBQUEsRUFDbEQsRUFBRSxRQUFRLE9BQVMsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ25ELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLEtBQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsTUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxNQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLE9BQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxNQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLE9BQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksTUFBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxPQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksTUFBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxPQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE1BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsT0FBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE1BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsT0FBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxLQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLE1BQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxNQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLE9BQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksTUFBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxPQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksS0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxNQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE1BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsT0FBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sS0FBSyxZQUFZLE1BQVM7QUFBQSxFQUNyRCxFQUFFLFFBQVEsT0FBVSxPQUFPLEtBQUssWUFBWSxPQUFTO0FBQUEsRUFDckQsRUFBRSxRQUFRLFFBQVUsT0FBTyxLQUFLLFlBQVksT0FBUztBQUFBLEVBQ3JELEVBQUUsUUFBUSxRQUFVLE9BQU8sS0FBSyxZQUFZLE9BQVM7QUFBQSxFQUNyRCxFQUFFLFFBQVEsUUFBVSxPQUFPLEtBQUssWUFBWSxNQUFTO0FBQUEsRUFDckQsRUFBRSxRQUFRLE9BQVUsT0FBTyxLQUFLLFlBQVksT0FBUztBQUFBLEVBQ3JELEVBQUUsUUFBUSxRQUFVLE9BQU8sS0FBSyxZQUFZLE9BQVM7QUFBQSxFQUNyRCxFQUFFLFFBQVEsUUFBVSxPQUFPLEtBQUssWUFBWSxRQUFVO0FBQUEsRUFDdEQsRUFBRSxRQUFRLFNBQVcsT0FBTyxLQUFLLFlBQVksUUFBVTtBQUFBLEVBQ3ZELEVBQUUsUUFBUSxTQUFXLE9BQU8sS0FBSyxZQUFZLFFBQVU7QUFBQSxFQUN2RCxFQUFFLFFBQVEsU0FBVyxPQUFPLEtBQUssWUFBWSxRQUFVO0FBQ3pEO0FBRU8sU0FBUyxrQkFBa0IsUUFBMkI7QUFDM0QsTUFBSSxRQUFtQixVQUFVLENBQUM7QUFDbEMsYUFBVyxRQUFRLFdBQVc7QUFDNUIsUUFBSSxVQUFVLEtBQUssUUFBUTtBQUN6QixjQUFRO0FBQUEsSUFDVixPQUFPO0FBQ0w7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUNBLFNBQU87QUFDVDtBQUVPLFNBQVMscUJBQXFCLGFBQTZCO0FBQ2hFLE1BQUksZUFBZTtBQUNuQixhQUFXLFFBQVEsV0FBVztBQUM1QixRQUFJLGVBQWUsS0FBSyxTQUFTLGdCQUFnQixHQUFHO0FBQ2xELHFCQUFlLEtBQUs7QUFBQSxJQUN0QjtBQUFBLEVBQ0Y7QUFHRixTQUFPO0FBQ1A7OztBQzlJRixJQUFNLDBCQUFvQztBQUFBLEVBQ3pDO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNEO0FBRUEsSUFBTSxrQkFBNEI7QUFBQSxFQUNqQztBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNEO0FBRUEsSUFBTSxxQkFBK0I7QUFBQSxFQUNwQztBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FB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LHFCQUFxQixRQUFnQixRQUFnQjtBQUNuRSxRQUFNLGFBQWEsS0FBSyxJQUFJLFVBQVUsb0JBQW9CLDZCQUFZO0FBRXRFLE1BQUksQ0FBQyxZQUFZO0FBQ2hCLFlBQVEsTUFBTSxnQ0FBZ0M7QUFDOUM7QUFBQSxFQUNEO0FBRUEsUUFBTSxTQUFTLFdBQVc7QUFDMUIsUUFBTSxlQUFlLE9BQU8sYUFBYTtBQUV6QyxNQUFJLENBQUMsY0FBYztBQUNsQixZQUFRLE1BQU0sc0VBQXNFO0FBQ3BGO0FBQUEsRUFDRDtBQUVBLE1BQUksZUFBZSxhQUFhLFdBQVcsUUFBUSxrQkFBTTtBQUN6RCxpQkFBZSxhQUFhLFdBQVcsUUFBUSwwQkFBTTtBQUNyRCxpQkFBZSxhQUFhLFdBQVcsNEJBQVEsTUFBTTtBQUNyRCxpQkFBZSxhQUFhLFdBQVcsb0JBQVEsTUFBTTtBQUVyRCxTQUFPLGlCQUFpQixZQUFZO0FBQ3JDO0FBRUEsU0FBUyw2QkFBNkIsZUFBdUIsV0FBMkI7QUFDdkYsTUFBSTtBQUNKLE1BQUksU0FBUyxlQUFlLEVBQUUsSUFBSSxXQUFVO0FBQzNDLG1CQUFlLFlBQVksU0FBUyxlQUFlLEVBQUU7QUFBQSxFQUN0RCxPQUFPO0FBQ04sbUJBQWU7QUFBQSxFQUNoQjtBQUVBLFNBQU87QUFDUjsiLAogICJuYW1lcyI6IFsiaW1wb3J0X29ic2lkaWFuIiwgImFwcCIsICJvYmoiLCAiZGVmYXVsdE9wdGlvbnMiLCAiZGVmYXVsdE9wdGlvbnMiLCAiZGVmYXVsdE9wdGlvbnMiLCAiTUlMTElTRUNPTkRTX0lOX1dFRUsiLCAiZm9ybWF0dGVycyIsICJsb2NhbGl6ZSIsICJ5IiwgIk0iLCAiZCIsICJhIiwgImgiLCAiSCIsICJtIiwgInMiLCAiUyIsICJkYXRlTG9uZ0Zvcm1hdHRlciIsICJmb3JtYXRMb25nIiwgInRpbWVMb25nRm9ybWF0dGVyIiwgImRhdGVUaW1lTG9uZ0Zvcm1hdHRlciIsICJmb3JtYXQiLCAiZm9ybWF0RGlzdGFuY2UiLCAiZm9ybWF0IiwgImZvcm1hdFJlbGF0aXZlIiwgIm9yZGluYWxOdW1iZXIiLCAidmFsdWVDYWxsYmFjayIsICJkZWZhdWx0T3B0aW9ucyIsICJsb2NhbGUiLCAibWF0Y2giLCAicGF0aCIsICJhcHAiLCAiZmlsZU5hbWUiLCAiY3VycmVudENvdW50IiwgImkiLCAiaSIsICJlIiwgImkiLCAibWF0Y2giLCAiZmlsZSIsICJhcHAiLCAiYXBwIl0KfQo=
