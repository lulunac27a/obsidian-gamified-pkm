/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => gamification
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");
var fs2 = __toESM(require("fs"));
var path2 = __toESM(require("path"));

// settings.ts
var import_obsidian = require("obsidian");
var defaultSettings = {
  enableInitCommand: true,
  bindEnter: true,
  bindTab: true,
  avatarPageName: "Avatar - Gamification",
  tagsExclude: "",
  folderExclude: "Excalidraw",
  progressiveSumLayer2: "==",
  progressiveSumLayer3: "**",
  numAllFiles: 1,
  numAllFilesCount: 0,
  chartReduzierungMonate: 0,
  statusPoints: 0,
  statusLevel: 1,
  xpForNextLevel: 1e3,
  gamificationStartDate: "12.08.2023",
  badgeBoosterState: false,
  badgeBoosterFactor: 1
};
var GamificationPluginSettings = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.addClass("excalidraw-settings");
    this.containerEl.empty();
    const coffeeDiv = containerEl.createDiv("coffee");
    coffeeDiv.addClass("ex-coffee-div");
    const coffeeLink = coffeeDiv.createEl("a", {
      href: "https://ko-fi.com/andreastrebing"
    });
    const coffeeImg = coffeeLink.createEl("img", {
      attr: {
        src: "https://cdn.ko-fi.com/cdn/kofi3.png?v=3"
      }
    });
    coffeeImg.height = 45;
    containerEl.createEl("h2", { text: "Gamify your PKM - Settings" });
    console.log("settings called");
    new import_obsidian.Setting(containerEl).setName("#tags to ignore").setDesc('enter tags without # and separate with ", ".\nInclude nested tags.').addText((text) => text.setPlaceholder("Enter your tag1, tag2/subtag, \u2026").setValue(this.plugin.settings.tagsExclude).onChange(async (value) => {
      this.plugin.settings.tagsExclude = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("folder to ignore").setDesc('enter folder whichs content shall be ignored. Separate with ", ".').addText((text) => text.setPlaceholder("Enter your folder1, folder2, \u2026").setValue(this.plugin.settings.folderExclude).onChange(async (value) => {
      this.plugin.settings.folderExclude = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Profile Page Name").setDesc("you can change here the name of your profile page if you like.").addText((text) => text.setPlaceholder("name").setValue(this.plugin.settings.avatarPageName).onChange(async (value) => {
      this.plugin.settings.avatarPageName = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h2", { text: "Other Settings" });
    new import_obsidian.Setting(containerEl).setName("Disable Init Command").setDesc("you can remove the init command from command prompt by switching off.\nrestart needed.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableInitCommand).onChange((value) => {
        this.plugin.settings.enableInitCommand = value;
        this.plugin.saveData(this.plugin.settings);
      })
    );
    new import_obsidian.Setting(containerEl).setName("limit the visible month in the chart on your avatar page: " + this.plugin.settings.avatarPageName).setDesc("if 0, all month will be shown. Enter a number how many month shall be shown.").addText((text) => text.setPlaceholder("Number of Month to show").setValue(this.plugin.settings.chartReduzierungMonate.toString()).onChange(async (value) => {
      this.plugin.settings.chartReduzierungMonate = parseInt(value);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Progressive Summarization").setDesc("you can change which formatting you use for Layer 2 and 3.").addText((text) => text.setPlaceholder("Layer 2 is usually **").setValue(this.plugin.settings.progressiveSumLayer2).onChange(async (value) => {
      this.plugin.settings.progressiveSumLayer2 = value;
      await this.plugin.saveSettings();
    })).addText((text) => text.setPlaceholder("Layer 3 is usually ==").setValue(this.plugin.settings.progressiveSumLayer3).onChange(async (value) => {
      this.plugin.settings.progressiveSumLayer3 = value;
      await this.plugin.saveSettings();
    }));
  }
};

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/isDate/index.js
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

// node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/defaultOptions/index.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters = {
  // Year
  y: function y(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var lightFormatters_default = formatters;

// node_modules/date-fns/esm/_lib/format/formatters/index.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters2 = {
  // Era
  G: function G(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y2(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters_default.y(date, token);
  },
  // Local week-numbering year
  Y: function Y(date, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function Q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M2(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters_default.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w(date, token, localize2, options) {
    var week = getUTCWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function I(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function d2(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters_default.d(date, token);
  },
  // Day of year
  D: function D(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function E(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a2(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h2(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters_default.h(date, token);
  },
  // Hour [0-23]
  H: function H2(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters_default.H(date, token);
  },
  // Hour [0-11]
  K: function K(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function k(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function m2(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters_default.m(date, token);
  },
  // Second
  s: function s2(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters_default.s(date, token);
  },
  // Fraction of second
  S: function S2(date, token) {
    return lightFormatters_default.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
var formatters_default = formatters2;

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters_default = longFormatters;

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
var formatDistance_default = formatDistance;

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
var formatLong_default = formatLong;

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
var formatRelative_default = formatRelative;

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
var localize_default = localize;

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
var match_default = match;

// node_modules/date-fns/esm/locale/en-US/index.js
var locale = {
  code: "en-US",
  formatDistance: formatDistance_default,
  formatLong: formatLong_default,
  formatRelative: formatRelative_default,
  localize: localize_default,
  match: match_default,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
var en_US_default = locale;

// node_modules/date-fns/esm/_lib/defaultLocale/index.js
var defaultLocale_default = en_US_default;

// node_modules/date-fns/esm/format/index.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale_default;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  var matched = input.match(escapedStringRegExp);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}

// majuritycalculation.ts
var fs = __toESM(require("fs"));
var path = __toESM(require("path"));
function rateProgressiveSummarization(charCountTotal, layer2count, layer3count) {
  const percentLayer2 = layer2count * 100 / charCountTotal;
  const percentLayer3 = layer3count * 100 / layer2count;
  var layer2majurity = 0;
  var layer3majurity = 0;
  var majurity = 0;
  if (charCountTotal < 3e3) {
    majurity = 0;
  } else {
    if (percentLayer2 == 0) {
      layer2majurity = 0;
    } else if (percentLayer2 <= 10) {
      layer2majurity = 5;
    } else if (percentLayer2 <= 20) {
      layer2majurity = 4;
    } else if (percentLayer2 <= 30) {
      layer2majurity = 3;
    } else if (percentLayer2 <= 40) {
      layer2majurity = 2;
    } else if (percentLayer2 <= 40) {
      layer2majurity = 1;
    } else {
      layer2majurity = 0;
    }
    if (layer3count == 0) {
      layer3majurity = 0;
    } else if (percentLayer3 <= 10) {
      layer3majurity = 5;
    } else if (percentLayer3 <= 20) {
      layer3majurity = 4;
    } else {
      layer3majurity = 0;
    }
    if (layer2majurity == 1 && layer3majurity == 0) {
      majurity = 1;
    } else if (layer2majurity == 2 && layer3majurity == 0) {
      majurity = 2;
    } else if (layer2majurity >= 3 && layer3majurity == 0) {
      majurity = 3;
    } else if ((layer2majurity == 3 || layer2majurity == 4) && (layer3majurity == 4 || layer3majurity == 5)) {
      majurity = 4;
    } else if (layer2majurity == 5 && layer3majurity == 5) {
      majurity = 5;
    } else {
      majurity = 0;
    }
  }
  return majurity;
}
function countLayer2AndLayer3Characters(content, filename, layer2, layer3) {
  const filenameWithoutExtension = filename;
  const strippedContent = content.replace(/[*_~`]/g, "");
  const headingRegex = /^(#+)\s(.*)$/gm;
  const contentWithoutHeadings = strippedContent.replace(headingRegex, (match2, p1, p2) => {
    if (p2 === filenameWithoutExtension) {
      return "";
    }
    return match2;
  });
  const metadataRegex = /^---[\s\S]*?---/gm;
  const contentWithoutMetadata = contentWithoutHeadings.replace(metadataRegex, "");
  const tagRegex = /#[^\s]+/g;
  const contentWithoutTags = contentWithoutMetadata.replace(tagRegex, "");
  const linkRegex = /\[.*?\]\(.*?\)|\[\[.*?\]\]/g;
  const contentWithoutLinks = contentWithoutTags.replace(linkRegex, "");
  const filteredContent = contentWithoutLinks.split("\n").filter((line) => line.trim() !== "").filter((line) => line.trim() !== "---").join("\n");
  const charCount = filteredContent.length;
  let highlightedCount = 0;
  let boldCount = 0;
  var layer2exclude = "=";
  var layer3exclude = "\\*";
  if (layer3 == "**") {
    layer3 = "\\*\\*";
    layer3exclude = "\\*";
    layer2exclude = "=";
  }
  if (layer2 == "**") {
    layer2 = "\\*\\*";
    layer3exclude = "=";
    layer2exclude = "\\*";
  }
  const highlightRegex = new RegExp(`${layer2}[^${layer2exclude}]+${layer2}`, "g");
  const boldRegex = new RegExp(`${layer3}[^${layer3exclude}]+${layer3}`, "g");
  const highlightedMatches = content.match(highlightRegex);
  if (highlightedMatches) {
    highlightedCount = highlightedMatches.join("").length - highlightedMatches.length * 4;
    const layer2String = highlightedMatches.join("");
    const boldMatches = layer2String.match(boldRegex);
    if (boldMatches) {
      boldCount = boldMatches.join("").length - boldMatches.length * 4;
    }
  }
  return { charCount, highlightedCount, boldCount };
}
function rateLevelOfMaturity(noteLength, lengthOfTitle, Inlinks, outgoingLinks, progressiveSumMajurity) {
  var lengthMajurity = 0;
  if (noteLength >= progressiveSumMajurity) {
    lengthMajurity = noteLength;
  } else {
    lengthMajurity = progressiveSumMajurity;
  }
  const totalWeight = lengthMajurity + lengthOfTitle + Inlinks + outgoingLinks;
  const averageWeight = totalWeight / 5;
  if (averageWeight < 0.5) {
    return 0;
  } else if (averageWeight <= 1) {
    return 1;
  } else if (averageWeight <= 2) {
    return 2;
  } else if (averageWeight <= 3) {
    return 3;
  } else if (averageWeight <= 3.5) {
    return 4;
  } else if (averageWeight <= 4) {
    return 5;
  } else {
    return 0;
  }
}
function rateOutlinks(outlinks) {
  if (outlinks < 2) {
    return 0;
  } else if (outlinks < 3) {
    return 1;
  } else if (outlinks < 5) {
    return 4;
  } else if (outlinks < 9) {
    return 5;
  } else if (outlinks < 11) {
    return 3;
  } else if (outlinks < 12) {
    return 1;
  } else {
    return 0;
  }
}
function rateInlinks(numInlinks) {
  if (numInlinks == 0) {
    return 0;
  } else if (numInlinks < 4) {
    return 1;
  } else if (numInlinks < 8) {
    return 2;
  } else if (numInlinks < 11) {
    return 3;
  } else if (numInlinks < 16) {
    return 4;
  } else if (numInlinks >= 16 && numInlinks < 500) {
    return 5;
  } else {
    return 0;
  }
}
function rateDirection(ratingCurrent, ratingNew) {
  let rating = "";
  if (parseInt(ratingCurrent, 10) > ratingNew) {
    rating = ratingNew + "\u2B07\uFE0F";
  } else if (parseInt(ratingCurrent, 10) < ratingNew) {
    rating = ratingNew + "\u2B06\uFE0F";
  } else if (parseInt(ratingCurrent, 10) == ratingNew) {
    rating = ratingNew + "\u27A1\uFE0F";
  } else {
    rating = ratingNew + "";
  }
  return rating;
}
function rateLengthFilename(filename) {
  if (filename.length < 30) {
    return 0;
  } else if (filename.length < 80) {
    return 1;
  } else if (filename.length < 100) {
    return 3;
  } else if (filename.length < 150) {
    return 5;
  } else if (filename.length < 190) {
    return 4;
  } else if (filename.length < 210) {
    return 2;
  } else if (filename.length < 250) {
    return 1;
  } else {
    return 0;
  }
}
function rateNoteLength(contenlength) {
  if (contenlength < 200) {
    return 0;
  } else if (contenlength < 550) {
    return 4;
  } else if (contenlength < 1e3) {
    return 5;
  } else if (contenlength < 1200) {
    return 4;
  } else if (contenlength < 2e3) {
    return 3;
  } else if (contenlength < 2500) {
    return 2;
  } else if (contenlength < 3e3) {
    return 1;
  } else {
    return 0;
  }
}
function getNumberOfOutlinks(activeFile) {
  var _a;
  if (!activeFile) {
    return 0;
  }
  const inlinks = (_a = app.metadataCache.getFileCache(activeFile)) == null ? void 0 : _a.links;
  return inlinks ? Object.keys(inlinks).length : 0;
}
function countCharactersInActiveFile(content, filename) {
  const filenameWithoutExtension = filename;
  const strippedContent = content.replace(/[*_~`]/g, "");
  const headingRegex = /^(#+)\s(.*)$/gm;
  const contentWithoutHeadings = strippedContent.replace(headingRegex, (match2, p1, p2) => {
    if (p2 === filenameWithoutExtension) {
      return "";
    }
    return match2;
  });
  const metadataRegex = /^---[\s\S]*?---/gm;
  const contentWithoutMetadata = contentWithoutHeadings.replace(metadataRegex, "");
  const tagRegex = /#[^\s]+/g;
  const contentWithoutTags = contentWithoutMetadata.replace(tagRegex, "");
  const linkRegex = /\[.*?\]\(.*?\)|\[\[.*?\]\]/g;
  const contentWithoutLinks = contentWithoutTags.replace(linkRegex, "");
  const filteredContent = contentWithoutLinks.split("\n").filter((line) => line.trim() !== "").filter((line) => line.trim() !== "---").join("\n");
  const charCount = filteredContent.length;
  return charCount;
}
function count_inlinks(file) {
  const { app: { metadataCache: { resolvedLinks } } } = this, { path: path3 } = file;
  const sumInlinks = Object.values(resolvedLinks).map((val) => {
    var _a;
    return (_a = val[path3]) != null ? _a : 0;
  }).reduce((left, right) => left + right, 0);
  return sumInlinks;
}
var getFileCountMap = async (app2, excludeTag, excludeFolder) => {
  const { vault } = app2;
  let excludedSubstrings = [];
  if (excludeTag == void 0) {
    excludedSubstrings = [];
  } else {
    excludedSubstrings = excludeTag.split(", ");
  }
  let excludedFolders = [];
  if (excludeFolder == void 0) {
    excludedFolders = [];
  } else {
    excludedFolders = excludeFolder.split(", ");
  }
  excludedFolders.push(".obsidian", ".trash");
  const fileCountMap = /* @__PURE__ */ new Map();
  const files = await vault.getMarkdownFiles();
  for (const file of files) {
    const fileName = file.basename;
    const currentCount = fileCountMap.get(fileName) || 0;
    fileCountMap.set(fileName, currentCount + 1);
    const fileContents = await app2.vault.read(file);
    if (!excludedSubstrings.some((substring) => fileContents.includes(substring)) && !excludedFolders.some((folder) => file.path.includes(folder))) {
      const fileName2 = file.basename;
      const currentCount2 = fileCountMap.get(fileName2) || 0;
      fileCountMap.set(fileName2, currentCount2 + 1);
    }
  }
  return fileCountMap;
};
var getFileMap = async (app2, excludeTag, excludeFolder) => {
  const { vault } = app2;
  let excludedSubstrings = [];
  if (excludeTag == void 0) {
    excludedSubstrings = [];
  } else {
    excludedSubstrings = excludeTag.split(", ");
  }
  console.log(`excludedSubstrings: ${excludedSubstrings}`);
  let excludedFolders = [];
  if (excludeFolder == void 0) {
    excludedFolders = [];
  } else {
    excludedFolders = excludeFolder.split(", ");
  }
  excludedFolders.push(".obsidian", ".trash");
  console.log(`excludedFolders: ${excludedFolders}`);
  let fileArray = [];
  const files = await vault.getMarkdownFiles();
  for (const file of files) {
    const fileContents = await app2.vault.read(file);
    if ((!excludedSubstrings.some((substring) => fileContents.includes(substring)) || excludeTag.length === 0) && !excludedFolders.some((folder) => file.path.includes(folder))) {
      console.log(`file ${file} get's added.`);
      fileArray.push(file);
    }
  }
  return fileArray;
};

// creatmodchartcalculation.ts
function findEarliestDateFile(files) {
  let earliestCreatedFile = files[0];
  for (const file of files) {
    if (file.stat.ctime < earliestCreatedFile.stat.ctime) {
      earliestCreatedFile = file;
    }
    if (file.stat.mtime < earliestCreatedFile.stat.ctime) {
      earliestCreatedFile = file;
    }
  }
  return earliestCreatedFile;
}
function monthsBetween(startMonth, endMonth) {
  let months = endMonth.getMonth() - startMonth.getMonth() + 1;
  if (endMonth.getFullYear() > startMonth.getFullYear()) {
    months += (endMonth.getFullYear() - startMonth.getFullYear()) * 12;
  }
  return months;
}
function getCreationDates(files) {
  const creationDates = [];
  for (const file of files) {
    creationDates.push(new Date(file.stat.ctime));
  }
  return creationDates;
}
function getModificationDates(files) {
  const creationDates = [];
  for (const file of files) {
    creationDates.push(new Date(file.stat.mtime));
  }
  return creationDates;
}
function createChartFormat(y_axis, countsStringCreate, countsStringMod, chartReduzierungMonate) {
  let monatsbegrenzung = null;
  if (chartReduzierungMonate == 0) {
    monatsbegrenzung = 0;
  } else {
    monatsbegrenzung = countsStringCreate.split(",").length - chartReduzierungMonate;
  }
  let chart_string = "```chart\ntype: bar\nlabels: [" + y_axis + "]\nseries:\n  - title: created\n    data: [" + countsStringCreate + "]\n  - title: modified\n    data: [" + countsStringMod + ']\ntension: 0.2\nwidth: 80 %\nlabelColors: false\nfill: false\nbeginAtZero: false\nbestFit: false\nbestFitTitle: undefined\nbestFitNumber: 0\nstacked: true\nyTitle: "Number of Notes"\nxTitle: "Months"\nxMin: ' + monatsbegrenzung + "\n```";
  return chart_string;
}
async function replaceChartContent(avatarPageName, newContent) {
  const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
  if (existingFile == null) {
    console.log(`File ${avatarPageName}.md does not exist`);
    return;
  }
  const file = existingFile;
  const content = await app.vault.read(file);
  let reference = null;
  let end = null;
  let start = null;
  const lines = content.split("\n");
  for (let i2 = 0; i2 < lines.length; i2++) {
    const line = lines[i2].trim();
    if (line === "^ChartMonth") {
      if (reference === null) {
        reference = i2;
      }
    }
  }
  if (reference != null) {
    end = reference;
    start = reference - 21;
    const newLines = [...lines.slice(0, start), newContent, ...lines.slice(end)];
    await app.vault.modify(file, newLines.join("\n"));
  }
}

// badges.ts
function checkIfReceiveABadge(levelOld, levelNew) {
  const badgeLevels = [5, 10, 20, 27, 35, 42, 50, 60, 75, 82, 90, 100];
  let receiveBadge = false;
  for (let i2 = 0; i2 < badgeLevels.length; i2++) {
    if (levelOld < badgeLevels[i2] && levelNew >= badgeLevels[i2]) {
      receiveBadge = true;
    }
  }
  return receiveBadge;
}
function getBadgeForLevel(level, inform) {
  const badgeLevels = [5, 10, 20, 27, 35, 42, 50, 60, 75, 82, 90, 100];
  const badgeNames = [
    { name: "Enlightened Novice", description: "Huzzah! You've embarked on the path of knowledge and earned the title of 'Enlightened Novice.' The journey has just begun, and you're already radiating wisdom like a baby sun!", level: "level 5" },
    { name: "Curious Connoisseur", description: "Fantastic! You've embraced the wonders of learning and become a 'Curious Connoisseur.' Your appetite for knowledge is insatiable, like a bottomless bowl of ice cream!", level: "level 10" },
    { name: "Brainiac Trailblazer", description: "Bravo! As a 'Brainiac Trailblazer,' you've carved your way through a jungle of information and emerged victorious. Your intellect is a beacon shining brightly for others to follow!", level: "level 20" },
    { name: "Scholarly Trailblazer", description: "Impressive! You're now a 'Scholarly Trailblazer,' boldly venturing through a sea of knowledge with a compass of curiosity and a map of intellect!", level: "level 27" },
    { name: "Info Ninja Master", description: "Incredible! You've reached the pinnacle of stealthy knowledge management. As an 'Info Ninja Master,' you can snatch information from the shadows like a digital ninja!", level: "level 35" },
    { name: "Wise Owl Guru", description: "Whoo-hoo! You've achieved 'Wise Owl Guru' status. Your wisdom is legendary, and your hoots of knowledge echo through the forest of ignorance!", level: "level 42" },
    { name: "Einstein Incarnate", description: "Eureka! You've become an 'Einstein Incarnate,' pushing the boundaries of understanding and bending the fabric of knowledge to your will!", level: "level 50" },
    { name: "Mastermind Sage", description: "Magnificent! You've ascended to the rank of 'Mastermind Sage,' guiding the rivers of information and enlightening all who seek wisdom!", level: "level 60" },
    { name: "Cerebral Maestro", description: "Bravissimo! You're now a 'Cerebral Maestro,' conducting the symphony of knowledge with the finesse of a virtuoso conductor!", level: "level 75" },
    { name: "Zen Knowledge Keeper", description: "Serenity achieved! As a 'Zen Knowledge Keeper,' you maintain a tranquil mind while managing vast pools of knowledge with grace and poise.", level: "level 82" },
    { name: "Grand Archivist Overlord", description: "All hail the 'Grand Archivist Overlord!' You wield the knowledge of ages and hold the keys to unlock the gates of wisdom!", level: "level 90" },
    { name: "Omniscient Sage of Everything", description: "Congratulations, oh wise one! You've attained the highest level of enlightenment as the 'Omniscient Sage of Everything.' Your understanding knows no bounds, and your wisdom is as vast as the cosmos itself!", level: "level 100" }
  ];
  let index = 0;
  for (let i2 = 0; i2 < badgeLevels.length; i2++) {
    if (level >= badgeLevels[i2]) {
      index = i2;
    } else {
      break;
    }
  }
  return badgeNames[index];
}
function getBadgeForInitLevel(level) {
  const badgeLevels = [0, 3, 7, 15, 23, 30, 35, 42, 50, 60, 75, 82, 90, 100];
  const badgeNamesInit = [
    { name: "Lore Seeker Initiate", description: "Welcome to the journey of knowledge! As a 'Lore Seeker Initiate,' you've taken your first steps into the world of organized wisdom. Your quest has just begun, and with each note you make, you lay the foundation for a future rich with insights and understanding. Your journey starts here, and the path ahead is filled with potential and discovery.", level: "level 1" },
    { name: "Lore Apprentice", description: "You've hit the ground running with your existing knowledge treasures! You're already an 'Lore Apprentice,' armed with a wealth of wisdom and ready to shape it further.", level: "level 3" },
    { name: "Savvy Scholar", description: "Your existing notes have given you a head start! You're now a 'Savvy Scholar,' confidently diving into the sea of information with a treasure trove of insights.", level: "level 7" },
    { name: "Sage's Foundation", description: "Building upon your pre-existing notes, you're establishing the 'Sage's Foundation' for an even grander edifice of knowledge. Your groundwork is impressive!", level: "level 15" },
    { name: "Wisdom Seedling", description: "Your existing notes have nurtured the growth of a 'Wisdom Seedling.' You're cultivating your garden of knowledge with care and patience.", level: "level 23" },
    { name: "Prodigious Preparer", description: "Thanks to your prior efforts, you're a 'Prodigious Preparer,' standing tall among your notes and ready to conquer new realms of understanding.", level: "level 30" },
    { name: "Epic Epiphany Explorer", description: "Your past notes have led you to the grand 'Epic Epiphany Explorer' status! You've already been down a few rabbit holes and come out with dazzling discoveries.", level: "level 35" },
    { name: "Lore Luminary", description: "With your existing notes illuminating your path, you've become a 'Lore Luminary,' shining light on the mysteries of the universe, one idea at a time.", level: "level 42" },
    { name: "Scribe of the Ancients", description: "Your mastery of personal knowledge management has elevated you to the esteemed rank of the 'Scribe of the Ancients.' Your existing notes have transformed into treasures, bridging the gap between old wisdom and new discoveries.", level: "level 50" },
    { name: "Eureka Maestro", description: "Armed with your existing notes, you're the 'Eureka Maestro,' composing a symphony of insights that harmonize with the melody of discovery.", level: "level 60" },
    { name: "Chronicles Champion", description: "With your existing notes standing as a testament, you've ascended to the illustrious 'Chronicles Champion' level. Your journey through time's tapestry has brought forth a symphony of insights that harmonize past and present.", level: "level 75" },
    { name: "The Curious Cartographer", description: "As 'The Curious Cartographer,' your existing notes have mapped out uncharted territories of understanding. Your curiosity knows no bounds, and your notes are the compass guiding your exploration.", level: "level 82" },
    { name: "Sultan of Synthesis", description: "Your existing notes have made you the 'Sultan of Synthesis.' You're the master weaver, threading together threads of information into a rich tapestry of insight.", level: "level 90" },
    { name: "Eternal Archivist", description: "At the pinnacle of personal knowledge mastery, you're now revered as the 'Eternal Archivist.' Your existing notes, carefully curated and nurtured, stand as immortal beacons, guiding seekers through the labyrinth of knowledge across ages.", level: "level 100" }
  ];
  let index = 0;
  for (let i2 = 0; i2 < badgeLevels.length; i2++) {
    if (level >= badgeLevels[i2]) {
      index = i2;
    } else {
      break;
    }
  }
  return badgeNamesInit[index];
}

// levels.ts
var levelData = [
  { points: 0, level: 0, pointsNext: 0 },
  { points: 0, level: 1, pointsNext: 1e3 },
  { points: 1e3, level: 2, pointsNext: 3e3 },
  { points: 3e3, level: 3, pointsNext: 7500 },
  { points: 7500, level: 4, pointsNext: 15e3 },
  { points: 15e3, level: 5, pointsNext: 3e4 },
  { points: 3e4, level: 6, pointsNext: 5e4 },
  { points: 5e4, level: 7, pointsNext: 8e4 },
  { points: 8e4, level: 8, pointsNext: 12e4 },
  { points: 12e4, level: 9, pointsNext: 17e4 },
  { points: 17e4, level: 10, pointsNext: 23e4 },
  { points: 23e4, level: 11, pointsNext: 3e5 },
  { points: 3e5, level: 12, pointsNext: 38e4 },
  { points: 38e4, level: 13, pointsNext: 47e4 },
  { points: 47e4, level: 14, pointsNext: 6e5 },
  { points: 6e5, level: 15, pointsNext: 75e4 },
  { points: 75e4, level: 16, pointsNext: 92e4 },
  { points: 92e4, level: 17, pointsNext: 111e4 },
  { points: 111e4, level: 18, pointsNext: 132e4 },
  { points: 132e4, level: 19, pointsNext: 155e4 },
  { points: 155e4, level: 20, pointsNext: 18e5 },
  { points: 18e5, level: 21, pointsNext: 207e4 },
  { points: 207e4, level: 22, pointsNext: 236e4 },
  { points: 236e4, level: 23, pointsNext: 267e4 },
  { points: 267e4, level: 24, pointsNext: 3e6 },
  { points: 3e6, level: 25, pointsNext: 335e4 },
  { points: 335e4, level: 26, pointsNext: 372e4 },
  { points: 372e4, level: 27, pointsNext: 411e4 },
  { points: 411e4, level: 28, pointsNext: 452e4 },
  { points: 452e4, level: 29, pointsNext: 495e4 },
  { points: 495e4, level: 30, pointsNext: 54e5 },
  { points: 54e5, level: 31, pointsNext: 587e4 },
  { points: 587e4, level: 32, pointsNext: 636e4 },
  { points: 636e4, level: 33, pointsNext: 687e4 },
  { points: 687e4, level: 34, pointsNext: 74e5 },
  { points: 74e5, level: 35, pointsNext: 795e4 },
  { points: 795e4, level: 36, pointsNext: 852e4 },
  { points: 852e4, level: 37, pointsNext: 911e4 },
  { points: 911e4, level: 38, pointsNext: 972e4 },
  { points: 972e4, level: 39, pointsNext: 1035e4 },
  { points: 1035e4, level: 40, pointsNext: 11e6 },
  { points: 11e6, level: 41, pointsNext: 1167e4 },
  { points: 1167e4, level: 42, pointsNext: 1236e4 },
  { points: 1236e4, level: 43, pointsNext: 1307e4 },
  { points: 1307e4, level: 44, pointsNext: 138e5 },
  { points: 138e5, level: 45, pointsNext: 1455e4 },
  { points: 1455e4, level: 46, pointsNext: 1532e4 },
  { points: 1532e4, level: 47, pointsNext: 1611e4 },
  { points: 1611e4, level: 48, pointsNext: 1692e4 },
  { points: 1692e4, level: 49, pointsNext: 1775e4 },
  { points: 1775e4, level: 50, pointsNext: 186e5 },
  { points: 186e5, level: 51, pointsNext: 1947e4 },
  { points: 1947e4, level: 52, pointsNext: 2036e4 },
  { points: 2036e4, level: 53, pointsNext: 2127e4 },
  { points: 2127e4, level: 54, pointsNext: 222e5 },
  { points: 222e5, level: 55, pointsNext: 2315e4 },
  { points: 2315e4, level: 56, pointsNext: 2412e4 },
  { points: 2412e4, level: 57, pointsNext: 2511e4 },
  { points: 2511e4, level: 58, pointsNext: 2612e4 },
  { points: 2612e4, level: 59, pointsNext: 2715e4 },
  { points: 2715e4, level: 60, pointsNext: 282e5 },
  { points: 282e5, level: 61, pointsNext: 2927e4 },
  { points: 2927e4, level: 62, pointsNext: 3036e4 },
  { points: 3036e4, level: 63, pointsNext: 3147e4 },
  { points: 3147e4, level: 64, pointsNext: 326e5 },
  { points: 326e5, level: 65, pointsNext: 3375e4 },
  { points: 3375e4, level: 66, pointsNext: 3492e4 },
  { points: 3492e4, level: 67, pointsNext: 3611e4 },
  { points: 3611e4, level: 68, pointsNext: 3732e4 },
  { points: 3732e4, level: 69, pointsNext: 3855e4 },
  { points: 3855e4, level: 70, pointsNext: 398e5 },
  { points: 398e5, level: 71, pointsNext: 4107e4 },
  { points: 4107e4, level: 72, pointsNext: 4236e4 },
  { points: 4236e4, level: 73, pointsNext: 4367e4 },
  { points: 4367e4, level: 74, pointsNext: 45e6 },
  { points: 45e6, level: 75, pointsNext: 4635e4 },
  { points: 4635e4, level: 76, pointsNext: 4772e4 },
  { points: 4772e4, level: 77, pointsNext: 4911e4 },
  { points: 4911e4, level: 78, pointsNext: 5052e4 },
  { points: 5052e4, level: 79, pointsNext: 5195e4 },
  { points: 5195e4, level: 80, pointsNext: 534e5 },
  { points: 534e5, level: 81, pointsNext: 5487e4 },
  { points: 5487e4, level: 82, pointsNext: 5636e4 },
  { points: 5636e4, level: 83, pointsNext: 5787e4 },
  { points: 5787e4, level: 84, pointsNext: 594e5 },
  { points: 594e5, level: 85, pointsNext: 6095e4 },
  { points: 6095e4, level: 86, pointsNext: 6252e4 },
  { points: 6252e4, level: 87, pointsNext: 6411e4 },
  { points: 6411e4, level: 88, pointsNext: 6572e4 },
  { points: 6572e4, level: 89, pointsNext: 6735e4 },
  { points: 6735e4, level: 90, pointsNext: 69e6 },
  { points: 69e6, level: 91, pointsNext: 7067e4 },
  { points: 7067e4, level: 92, pointsNext: 7236e4 },
  { points: 7236e4, level: 93, pointsNext: 7407e4 },
  { points: 7407e4, level: 94, pointsNext: 758e5 },
  { points: 758e5, level: 95, pointsNext: 7755e4 },
  { points: 7755e4, level: 96, pointsNext: 7932e4 },
  { points: 7932e4, level: 97, pointsNext: 8111e4 },
  { points: 8111e4, level: 98, pointsNext: 8292e4 },
  { points: 8292e4, level: 99, pointsNext: 8475e4 },
  { points: 8475e4, level: 100, pointsNext: 866e5 },
  { points: 866e5, level: 101, pointsNext: 8847e4 },
  { points: 8847e4, level: 102, pointsNext: 9036e4 },
  { points: 9036e4, level: 103, pointsNext: 9227e4 },
  { points: 9227e4, level: 104, pointsNext: 942e5 },
  { points: 942e5, level: 105, pointsNext: 9615e4 },
  { points: 9615e4, level: 106, pointsNext: 9812e4 },
  { points: 9812e4, level: 107, pointsNext: 10011e4 },
  { points: 10011e4, level: 108, pointsNext: 10212e4 },
  { points: 10212e4, level: 109, pointsNext: 10212e4 },
  { points: 10415e4, level: 110, pointsNext: 10615e4 }
];
function getLevelForPoints(points) {
  let level = levelData[0];
  for (const data of levelData) {
    if (points >= data.points) {
      level = data;
    } else {
      break;
    }
  }
  return level;
}
function statusPointsForLevel(targetLevel) {
  let statusPoints = 0;
  for (const data of levelData) {
    if (targetLevel == data.level && statusPoints == 0) {
      statusPoints = data.points;
    }
  }
  return statusPoints;
}

// main.ts
var gamification = class extends import_obsidian2.Plugin {
  async onload() {
    console.log("obsidian-pkm-gamification loaded!");
    await this.loadSettings();
    this.addSettingTab(new GamificationPluginSettings(this.app, this));
    this.app.workspace.on("window-close", async (file) => {
      console.log(`file got closed: ${file.getRoot.name}`);
    });
    const item = this.addStatusBarItem();
    let statusbarGamification = item.createEl("span", { text: "" });
    await this.updateStatusBar(statusbarGamification);
    this.addRibbonIcon("accessibility", "change text formatting", async () => {
      const newLevel = this.giveStatusPoints(this.settings.avatarPageName, 300);
    });
    this.addRibbonIcon("sprout", "Calculate Note Maturity", async () => {
      this.calculateNoteMajurity(statusbarGamification);
    });
    if (this.settings.enableInitCommand) {
      this.addCommand({
        id: "init-rate-gamification",
        name: "Initialize gamification ratings",
        callback: async () => {
          this.settings.gamificationStartDate = format(new Date(), "yyyy-MM-dd");
          this.saveSettings();
          const { vault } = this.app;
          await createAvatarFile(this.app, this.settings.avatarPageName);
          const chartString = await this.createChart(vault);
          await replaceChartContent(this.settings.avatarPageName, chartString);
          this.openAvatarFile();
          const fileCountMap = await getFileMap(this.app, this.settings.tagsExclude, this.settings.folderExclude);
          console.log(`fileCountMap loaded. Number of files: ${fileCountMap.length}`);
          let pointsReceived = 0;
          const pointsNoteMajurity = 100;
          const pointsMajurity = 10;
          let newLevel;
          for (const fileName of fileCountMap) {
            let file = fileName;
            const fileContents = await app.vault.read(file);
            const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
            if (activeView && activeView.file && activeView.file.path === file.path) {
              console.warn(`File ${file.path} is currently open. Skipping.`);
              continue;
            }
            const fileLength = countCharactersInActiveFile(fileContents, fileName.basename);
            const rateFileLength = rateNoteLength(fileLength);
            const { charCount, highlightedCount, boldCount } = countLayer2AndLayer3Characters(fileContents, fileName.basename, this.settings.progressiveSumLayer2, this.settings.progressiveSumLayer3);
            const rateProgressiveSum = rateProgressiveSummarization(charCount, highlightedCount, boldCount);
            const fileNameRate = rateLengthFilename(file.name);
            const inlinkNumber = count_inlinks(file);
            const inlinkClass = rateInlinks(inlinkNumber);
            const rateOut = rateOutlinks(getNumberOfOutlinks(file));
            const noteMajurity = rateLevelOfMaturity(rateFileLength, fileNameRate, inlinkClass, rateOut, rateProgressiveSum);
            console.log(`Processing file ${fileName.basename} in path ${fileName.path}`);
            try {
              await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
                if (rateDirectionForStatusPoints(frontmatter["note-maturity"], noteMajurity) >= 1) {
                  pointsReceived += pointsNoteMajurity * rateDirectionForStatusPoints(frontmatter["note-maturity"], noteMajurity);
                  newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsNoteMajurity * rateDirectionForStatusPoints("frontmatter['note-maturity']", noteMajurity));
                } else if ("note-maturity" in frontmatter == false) {
                  pointsReceived += pointsNoteMajurity * rateDirectionForStatusPoints("0", noteMajurity);
                  newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsNoteMajurity * rateDirectionForStatusPoints("0", noteMajurity));
                }
                if (rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate) >= 1 && "title-class" in frontmatter) {
                  pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate);
                  newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate));
                } else if ("title-class" in frontmatter == false) {
                  pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", fileNameRate);
                  newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints("0", fileNameRate));
                }
                if (rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength) >= 1) {
                  pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength);
                  newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength));
                } else if ("note-length-class" in frontmatter == false) {
                  pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", rateFileLength);
                  newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints("0", rateFileLength));
                }
                if (rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass) >= 1) {
                  pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass);
                  newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass));
                } else if ("inlink-class" in frontmatter == false) {
                  pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", inlinkClass);
                  newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints("0", inlinkClass));
                }
                if (rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut) >= 1) {
                  pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut);
                  newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut));
                } else if ("outlink-class" in frontmatter == false) {
                  pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", rateOut);
                  newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints("0", rateOut));
                }
                if (rateDirectionForStatusPoints(frontmatter["progressive-sumarization-maturity"], rateProgressiveSum) >= 1) {
                  pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-sumarization-maturity"], rateProgressiveSum);
                  newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-sumarization-maturity"], rateProgressiveSum));
                } else if ("progressive-sumarization-maturity" in frontmatter == false) {
                  pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-sumarization-maturity"], rateProgressiveSum);
                  newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints("0", rateProgressiveSum));
                }
                frontmatter["title-class"] = rateDirection(frontmatter["title-class"], fileNameRate);
                frontmatter["note-length-class"] = rateDirection(frontmatter["note-length-class"], rateFileLength);
                frontmatter["inlink-class"] = rateDirection(frontmatter["inlink-class"], inlinkClass);
                frontmatter["outlink-class"] = rateDirection(frontmatter["outlink-class"], rateOut);
                frontmatter["progressive-sumarization-maturity"] = rateDirection(frontmatter["progressive-sumarization-maturity"], rateProgressiveSum);
                frontmatter["note-maturity"] = rateDirection(frontmatter["note-maturity"], noteMajurity);
              });
            } catch (e2) {
              if ((e2 == null ? void 0 : e2.name) === "YAMLParseError") {
                const errorMessage = `Update majuritys failed
					  Malformed frontamtter on this file : ${file.path}
					  
					  ${e2.message}`;
                new import_obsidian2.Notice(errorMessage, 4e3);
                console.error(errorMessage);
              }
            }
          }
          if (pointsReceived > 0) {
            new import_obsidian2.Notice(`${pointsReceived} Points received`);
            console.log(`${pointsReceived} Points received`);
          }
          setTimeout(async () => {
            const initBadge = await getBadgeForInitLevel(this.settings.statusLevel);
            new import_obsidian2.Notice(`You've earned the "${initBadge.name}" badge. ${initBadge.description}`);
            console.log(`You earned ${initBadge.name} - ${initBadge.description}`);
            await this.giveInitBadgeInProfile(this.settings.avatarPageName, initBadge);
            await this.removeBadgesWhenInitLevelHigher(this.settings.avatarPageName, this.settings.statusLevel);
            await this.boosterForInit();
            await this.updateStatusBar(statusbarGamification);
          }, 2e3);
          new ModalInformationbox(this.app, `Finallized gamification initialistation!
Congratulation, you earned ${pointsReceived} Points!

Check the Profile Page: "${this.settings.avatarPageName}.md"

You received an initialisation Booster aktiv for your first level ups. Game on!`).open();
        }
      });
    }
    if (this.settings.enableInitCommand) {
      this.addCommand({
        id: "create-avatar-page",
        name: "create profile page",
        callback: async () => {
          const { vault } = this.app;
          createAvatarFile(this.app, this.settings.avatarPageName);
          const chartString = await this.createChart(vault);
          replaceChartContent(this.settings.avatarPageName, chartString);
        }
      });
    }
    this.addCommand({
      id: "reset-game",
      name: "reset the game",
      callback: async () => {
        await this.removeKeysFromFrontmatter();
        this.settings.statusLevel = 1;
        this.settings.statusPoints = 0;
        this.settings.xpForNextLevel = 1e3;
        this.settings.badgeBoosterState = false;
        this.settings.badgeBoosterFactor = 1;
        await this.saveData(this.settings);
        this.giveStatusPoints(this.settings.avatarPageName, 0);
        await this.updateStatusBar(statusbarGamification);
        new ModalInformationbox(this.app, `Game is now reseted. Please delete the Profile Page: "${this.settings.avatarPageName}.md" manually.`).open();
      }
    });
    this.addCommand({
      id: "update-chart-avatarpage",
      name: "update chart on profile page",
      callback: async () => {
        const { vault } = app;
        const chartString = await this.createChart(vault);
        replaceChartContent(this.settings.avatarPageName, chartString);
      }
    });
    this.addCommand({
      id: "rate-note-maturity",
      name: "Rate note majurity",
      callback: async () => {
        this.calculateNoteMajurity(statusbarGamification);
      }
    });
    this.addCommand({
      id: "change-progressive-formatting",
      name: "toggle progressive summarization formatting",
      callback: async () => {
        replaceFormatStrings(this.settings.progressiveSumLayer2, this.settings.progressiveSumLayer3);
      }
    });
  }
  onunload() {
    console.log("obsidian-pkm-gamification unloaded!");
  }
  async calculateNoteMajurity(statusbarGamification) {
    var _a;
    const file = this.app.workspace.getActiveFile();
    if (file == null) {
      console.error("got no file, propably none is active");
    }
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    const fileContents = activeView == null ? void 0 : activeView.editor.getValue();
    const fileName = activeView == null ? void 0 : activeView.file.basename;
    let rateFileLength = 0;
    let fileLength = 0;
    let rateProgressiveSum = 0;
    if (fileContents !== void 0 && fileName !== void 0) {
      fileLength = countCharactersInActiveFile(fileContents, fileName);
      rateFileLength = rateNoteLength(fileLength);
      if (fileContents !== null && fileName !== null) {
        const { charCount, highlightedCount, boldCount } = countLayer2AndLayer3Characters(fileContents, fileName, this.settings.progressiveSumLayer2, this.settings.progressiveSumLayer3);
        rateProgressiveSum = rateProgressiveSummarization(charCount, highlightedCount, boldCount);
      }
    }
    let fileNameRate = 0;
    let inlinkNumber = 0;
    let inlinkClass = 0;
    let rateOut = 0;
    if (file !== null) {
      fileNameRate = rateLengthFilename((_a = file.name) != null ? _a : "");
      inlinkNumber = count_inlinks(file);
      inlinkClass = rateInlinks(inlinkNumber);
      rateOut = rateOutlinks(getNumberOfOutlinks(file));
      const noteMajurity = rateLevelOfMaturity(rateFileLength, fileNameRate, inlinkClass, rateOut, rateProgressiveSum);
      try {
        await this.app.fileManager.processFrontMatter(
          file,
          (frontmatter) => {
            if (frontmatter) {
              const pointsNoteMajurity = 100;
              const pointsMajurity = 10;
              let pointsReceived = 0;
              if (rateDirectionForStatusPoints(frontmatter["note-maturity"], noteMajurity) >= 1) {
                pointsReceived += pointsNoteMajurity * rateDirectionForStatusPoints(frontmatter["note-maturity"], noteMajurity);
                const newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsNoteMajurity * rateDirectionForStatusPoints("frontmatter['note-maturity']", noteMajurity));
                this.decisionIfBadge(newLevel);
              } else if ("note-maturity" in frontmatter == false) {
                pointsReceived += pointsNoteMajurity * rateDirectionForStatusPoints("0", noteMajurity);
                const newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsNoteMajurity * rateDirectionForStatusPoints("0", noteMajurity));
                this.decisionIfBadge(newLevel);
              }
              if (rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate) >= 1 && "title-class" in frontmatter) {
                pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate);
                const newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate));
                this.decisionIfBadge(newLevel);
              } else if ("title-class" in frontmatter == false) {
                pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", fileNameRate);
                const newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints("0", fileNameRate));
                this.decisionIfBadge(newLevel);
              }
              if (rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength) >= 1) {
                pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength);
                const newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength));
                this.decisionIfBadge(newLevel);
              } else if ("note-length-class" in frontmatter == false) {
                pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", rateFileLength);
                const newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints("0", rateFileLength));
                this.decisionIfBadge(newLevel);
              }
              if (rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass) >= 1) {
                pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass);
                const newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass));
                this.decisionIfBadge(newLevel);
              } else if ("inlink-class" in frontmatter == false) {
                pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", inlinkClass);
                const newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints("0", inlinkClass));
                this.decisionIfBadge(newLevel);
              }
              if (rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut) >= 1) {
                pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut);
                const newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut));
                this.decisionIfBadge(newLevel);
              } else if ("outlink-class" in frontmatter == false) {
                pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", rateOut);
                const newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints("0", rateOut));
                this.decisionIfBadge(newLevel);
              }
              if (rateDirectionForStatusPoints(frontmatter["progressive-sumarization-maturity"], rateProgressiveSum) >= 1) {
                pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-sumarization-maturity"], rateProgressiveSum);
                const newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-sumarization-maturity"], rateProgressiveSum));
                this.decisionIfBadge(newLevel);
              } else if ("progressive-sumarization-maturity" in frontmatter == false) {
                pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-sumarization-maturity"], rateProgressiveSum);
                const newLevel = this.giveStatusPoints(this.settings.avatarPageName, pointsMajurity * rateDirectionForStatusPoints("0", rateProgressiveSum));
                this.decisionIfBadge(newLevel);
              }
              if (pointsReceived > 0) {
                new import_obsidian2.Notice(`${pointsReceived * this.settings.badgeBoosterFactor} Points received`);
                console.log(`${pointsReceived} Points received`);
              }
              frontmatter["title-class"] = rateDirection(frontmatter["title-class"], fileNameRate);
              frontmatter["note-length-class"] = rateDirection(frontmatter["note-length-class"], rateFileLength);
              frontmatter["inlink-class"] = rateDirection(frontmatter["inlink-class"], inlinkClass);
              frontmatter["outlink-class"] = rateDirection(frontmatter["outlink-class"], rateOut);
              frontmatter["progressive-sumarization-maturity"] = rateDirection(frontmatter["progressive-sumarization-maturity"], rateProgressiveSum);
              frontmatter["note-maturity"] = rateDirection(frontmatter["note-maturity"], noteMajurity);
            }
          }
        );
      } catch (e2) {
        if ((e2 == null ? void 0 : e2.name) === "YAMLParseError") {
          const errorMessage = `Update majuritys failed Malformed frontamtter on this file : ${file.path} ${e2.message}`;
          new import_obsidian2.Notice(errorMessage, 4e3);
          console.error(errorMessage);
        }
      }
      console.log(`title-class: ${fileNameRate}`);
      console.log(`note-length-class: ${rateFileLength}`);
      console.log(`inlink-class: ${inlinkClass}`);
      console.log(`outlink-class: ${rateOut}`);
      console.log(`rateProgressiveSum: ${rateProgressiveSum}`);
      console.log(`note-maturity: ${noteMajurity}`);
      new import_obsidian2.Notice("note majurity updated!");
      await this.updateStatusBar(statusbarGamification);
    } else {
      console.error("file was not found to calculate majurities. Make sure one is active.");
    }
  }
  async updateStatusBar(statusbar) {
    const level = getLevelForPoints(this.settings.statusPoints);
    const progressbarPercent = (this.settings.statusPoints - level.points) / (level.pointsNext - level.points) * 100;
    const charNumProgressbar = 10;
    let balken = Math.round(progressbarPercent / charNumProgressbar);
    let progressbar = "";
    for (let i2 = 1; i2 <= charNumProgressbar; i2++) {
      if (i2 <= balken) {
        progressbar += "=";
      } else {
        progressbar += "-";
      }
    }
    statusbar.setText(`\u{1F3B2}|lvl: ${this.settings.statusLevel} | ${progressbar}`);
  }
  async loadSettings() {
    this.settings = Object.assign({}, defaultSettings, await this.loadData());
    console.log("loadSettings()");
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async getCreationTime(file) {
    const filePath = path2.join(this.app.vault.getResourcePath(file));
    const creationTime = fs2.statSync(filePath).ctime;
    return new Date(creationTime);
  }
  async giveStatusPoints(avatarPageName, pointsToAdd) {
    const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
    if (existingFile == null) {
      console.log(`File ${avatarPageName}.md does not exist`);
      return false;
    }
    const file = existingFile;
    let boosterFactor = 1;
    if (this.settings.badgeBoosterState == true) {
      boosterFactor = this.settings.badgeBoosterFactor;
    }
    const content = await app.vault.read(file);
    let reference = null;
    let end = null;
    let start = null;
    const lines = content.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      const line = lines[i2].trim();
      if (line === "^levelAndPoints") {
        if (reference === null) {
          reference = i2;
        }
      }
    }
    const newPoints = pointsToAdd * boosterFactor + this.settings.statusPoints;
    this.settings.statusPoints = newPoints;
    await this.saveData(this.settings);
    const level = getLevelForPoints(newPoints);
    let newLevel = 0;
    let nextLevelAt = this.settings.xpForNextLevel;
    let receiveBadge = false;
    if (this.settings.statusLevel < level.level) {
      new import_obsidian2.Notice(`With ${newPoints} points, the current level is ${level.level}.`);
      receiveBadge = checkIfReceiveABadge(this.settings.statusLevel, level.level);
      this.settings.statusLevel = level.level;
      newLevel = level.level;
      nextLevelAt = level.pointsNext;
      this.settings.xpForNextLevel = level.pointsNext;
      await this.saveData(this.settings);
    }
    const progressBarEnd = nextLevelAt - newPoints;
    const newPointsString = "| Level  | " + level.level + " |\n| Points | " + newPoints + "    |\n^levelAndPoints\n```chart\ntype: bar\nlabels: [Expririence]\nseries:\n  - title: points reached\n    data: [" + newPoints + "]\n  - title: points to earn to level up\n    data: [" + progressBarEnd + "]\nxMin: " + level.points + "\nxMax: " + level.pointsNext + '\ntension: 0.2\nwidth: 40%\nlabelColors: false\nfill: false\nbeginAtZero: false\nbestFit: false\nbestFitTitle: undefined\nbestFitNumber: 0\nstacked: true\nindexAxis: y\nxTitle: "progress"\nlegend: false\n```';
    if (reference != null) {
      end = reference + 24;
      start = reference - 2;
      const newLines = [...lines.slice(0, start), newPointsString, ...lines.slice(end)];
      await app.vault.modify(file, newLines.join("\n"));
    }
    return receiveBadge;
  }
  async giveBadgeInProfile(avatarPageName, badge) {
    const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
    if (existingFile == null) {
      console.log(`File ${avatarPageName}.md does not exist`);
      return;
    }
    const file = existingFile;
    const content = await app.vault.read(file);
    let reference = null;
    let reference2 = null;
    let end = null;
    let start = null;
    let end2 = null;
    let start2 = null;
    const lines = content.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      const line = lines[i2].trim();
      if (line === "#### achieved") {
        if (reference === null) {
          reference = i2;
        }
      }
      if (line === badge.level + ": *" + badge.name + "*") {
        if (reference2 === null) {
          reference2 = i2;
        }
      }
    }
    if (reference != null && reference2 != null) {
      end = reference + 1;
      start = reference + 1;
      end2 = reference2 + 2;
      start2 = reference2 + 1;
      const badgeString = "**" + badge.name + "** " + badge.level + "\n> " + badge.description + "\n";
      const newLines = [...lines.slice(0, start), badgeString, ...lines.slice(end)];
      const newLines2 = [...newLines.slice(0, start2), ...newLines.slice(end2)];
      await app.vault.modify(file, newLines2.join("\n"));
      console.log(`badgeString: ${badgeString}`);
    }
  }
  async giveInitBadgeInProfile(avatarPageName, badge) {
    const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
    if (existingFile == null) {
      console.log(`File ${avatarPageName}.md does not exist`);
      return;
    }
    const file = existingFile;
    const content = await app.vault.read(file);
    let reference = null;
    let end = null;
    let start = null;
    const lines = content.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      const line = lines[i2].trim();
      if (line === "#### achieved") {
        if (reference === null) {
          reference = i2;
        }
      }
    }
    if (reference != null) {
      end = reference + 2;
      start = reference + 1;
      const badgeString = "**" + badge.name + "**\n> " + badge.description + "\n";
      const newLines = [...lines.slice(0, start), badgeString, ...lines.slice(end)];
      await app.vault.modify(file, newLines.join("\n"));
      console.log(`badgeString: ${badgeString}`);
    }
  }
  async removeBadgesWhenInitLevelHigher(avatarPageName, level) {
    const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
    if (existingFile == null) {
      console.log(`File ${avatarPageName}.md does not exist`);
      return;
    }
    const file = existingFile;
    const content = await app.vault.read(file);
    let reference = null;
    let reference2 = null;
    let end = null;
    let start = null;
    const lines = content.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      const line = lines[i2].trim();
      if (line === "#### outstanding") {
        if (reference === null) {
          reference = i2;
        }
      }
      if (reference != null && reference2 == null) {
        const levelRegex = /level (\d+)/;
        const match2 = line.match(levelRegex);
        if (match2) {
          const levelNumber = parseInt(match2[1], 10);
          if (levelNumber < level) {
          } else {
            reference2 = i2;
          }
        }
      }
    }
    if (reference != null && reference2 != null) {
      start = reference + 1;
      end = reference2;
      const newLines = [...lines.slice(0, start), ...lines.slice(end)];
      await app.vault.modify(file, newLines.join("\n"));
    }
  }
  async createChart(vault) {
    const files = vault.getMarkdownFiles();
    const earliestFile = findEarliestDateFile(files);
    let earliestDate = earliestFile.stat.ctime;
    if (earliestFile.stat.mtime < earliestFile.stat.ctime) {
      earliestDate = earliestFile.stat.mtime;
    }
    let monthCounter = 0;
    let dateCount = new Date(earliestDate);
    const fileDateMonthMap = /* @__PURE__ */ new Map();
    const fileDateMonthMapMod = /* @__PURE__ */ new Map();
    const monthcount = monthsBetween(new Date(earliestDate), new Date());
    let dateString = dateCount.getMonth() + 1 + "." + dateCount.getFullYear();
    let yLabel = "";
    while (monthCounter < monthcount) {
      dateString = dateCount.getMonth() + 1 + "." + dateCount.getFullYear();
      yLabel = yLabel + dateString + ", ";
      dateCount.setMonth(dateCount.getMonth() + 1);
      monthCounter += 1;
      fileDateMonthMap.set(dateString, 0);
    }
    yLabel = yLabel.slice(0, yLabel.length - 2);
    monthCounter = 0;
    dateCount = new Date(earliestDate);
    dateString = dateCount.getMonth() + 1 + "." + dateCount.getFullYear();
    while (monthCounter < monthcount) {
      dateString = dateCount.getMonth() + 1 + "." + dateCount.getFullYear();
      dateCount.setMonth(dateCount.getMonth() + 1);
      monthCounter += 1;
      fileDateMonthMapMod.set(dateString, 0);
    }
    const creationDates = getCreationDates(files);
    for (let i2 = 0; i2 < creationDates.length; i2++) {
      fileDateMonthMap.set(format(creationDates[i2], "M.yyyy"), fileDateMonthMap.get(format(creationDates[i2], "M.yyyy")) + 1);
    }
    const modificationDates = getModificationDates(files);
    for (let i2 = 0; i2 < modificationDates.length; i2++) {
      fileDateMonthMapMod.set(format(modificationDates[i2], "M.yyyy"), fileDateMonthMapMod.get(format(modificationDates[i2], "M.yyyy")) + 1);
    }
    let charStringCreated = "";
    for (const [key, value] of fileDateMonthMap) {
      charStringCreated = charStringCreated + value + ", ";
    }
    charStringCreated = charStringCreated.slice(0, charStringCreated.length - 2);
    let charStringModified = "";
    for (const [key, value] of fileDateMonthMapMod) {
      charStringModified = charStringModified + value + ", ";
    }
    charStringModified = charStringModified.slice(0, charStringModified.length - 2);
    const chartString = createChartFormat(yLabel, charStringCreated, charStringModified, this.settings.chartReduzierungMonate);
    return chartString;
  }
  async decisionIfBadge(newLevel) {
    newLevel.then((result) => {
      if (result) {
        const badge = getBadgeForLevel(this.settings.statusLevel, false);
        new import_obsidian2.Notice(`You've earned the "${badge.name}" badge. ${badge.description}`);
        console.log(`You've earned the "${badge.name}" badge. ${badge.description}`);
        this.giveBadgeInProfile(this.settings.avatarPageName, badge);
        this.settings.badgeBoosterState = false;
        this.settings.badgeBoosterFactor = 1;
        this.saveData(this.settings);
      }
    });
  }
  async removeKeysFromFrontmatter() {
    const { vault } = this.app;
    const fileCountMap = await getFileCountMap(this.app, this.settings.tagsExclude, this.settings.folderExclude);
    for (const fileName of fileCountMap.keys()) {
      const files = vault.getFiles();
      const file = files.find((file2) => file2.basename === fileName);
      if (!file) {
        console.warn(`File ${fileName} not found.`);
        continue;
      }
      console.log(`Processing file ${fileName}`);
      try {
        await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
          delete frontmatter["title-class"];
          delete frontmatter["note-length-class"];
          delete frontmatter["inlink-class"];
          delete frontmatter["outlink-class"];
          delete frontmatter["progressive-sumarization-maturity"];
          delete frontmatter["note-maturity"];
        });
      } catch (e2) {
        if ((e2 == null ? void 0 : e2.name) === "YAMLParseError") {
          const errorMessage = `Update majuritys failed Malformed frontamtter ${e2.message}`;
          new import_obsidian2.Notice(errorMessage, 4e3);
          console.error(errorMessage);
        }
      }
    }
  }
  async whichLevelNextBadge(currentLevel) {
    let nextBadgeLevel = 0;
    for (let i2 = currentLevel; i2 < 110; i2++) {
      const badge = getBadgeForLevel(i2, true);
      const levelRegex = /level (\d+)/;
      const match2 = badge.level.match(levelRegex);
      if (match2) {
        const levelNumber = parseInt(match2[1], 10);
        if (levelNumber > currentLevel && nextBadgeLevel == 0) {
          nextBadgeLevel = levelNumber;
        }
      }
    }
    return nextBadgeLevel;
  }
  async boosterForInit() {
    const nextBadgeAt = await this.whichLevelNextBadge(this.settings.statusLevel);
    const statusPointsToReach = statusPointsForLevel(nextBadgeAt);
    const boosterFactor = Math.round((statusPointsToReach - this.settings.statusPoints) / 50 / 300);
    this.settings.badgeBoosterFactor = boosterFactor;
    this.settings.badgeBoosterState = true;
    this.saveData(this.settings);
    return boosterFactor;
  }
  async openAvatarFile() {
    var _a;
    const existingFile = app.vault.getAbstractFileByPath(`${this.settings.avatarPageName}.md`);
    if (existingFile) {
      const sourcePath = ((_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path) || "";
      app.workspace.openLinkText(existingFile.path, sourcePath);
    } else {
      console.log("File not found or unable to open.");
    }
  }
};
async function createAvatarFile(app2, fileName) {
  const fileContent = `# Avatar

|        |     |
| ------ | --- |
| Level  | 0    |
| Points | 0    |
^levelAndPoints	
\`\`\`chart
type: bar
labels: [Expririence]
series:
  - title: points reached
    data: [0]
  - title: points to earn to level up
    data: [1000]
xMin: 0
xMax: 1000
tension: 0.2
width: 40%
labelColors: false
fill: false
beginAtZero: false
bestFit: false
bestFitTitle: undefined
bestFitNumber: 0
stacked: true
indexAxis: y
xTitle: "progress"
legend: false
\`\`\`

| Level | Count |
| :---: | :---: |
| Majurity 5 |\`$=dv.pages().where(p => [5, '5', '5\u27A1\uFE0F', '5\u2B07\uFE0F', '5\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 4 |\`$=dv.pages().where(p => [4, '4', '4\u27A1\uFE0F', '4\u2B07\uFE0F', '4\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 3 |\`$=dv.pages().where(p => [3, '3', '3\u27A1\uFE0F', '3\u2B07\uFE0F', '3\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 2 |\`$=dv.pages().where(p => [2, '2', '2\u27A1\uFE0F', '2\u2B07\uFE0F', '2\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 1 |\`$=dv.pages().where(p => [1, '1', '1\u27A1\uFE0F', '1\u2B07\uFE0F', '1\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 0 |\`$=dv.pages().where(p => [0, '0', '0\u27A1\uFE0F', '0\u2B07\uFE0F', '0\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|


\`\`\`chart
type: bar
labels: [0, 0, 0]
series:
  - title: created
    data: [0, 0, 0]
  - title: modified
    data: [0, 0, 0]
tension: 0.2
width: 80 %
labelColors: false
fill: false
beginAtZero: false
bestFit: false
bestFitTitle: undefined
bestFitNumber: 0
stacked: true
yTitle: "Number of Notes"
xTitle: "Months"
xMin: 0
\`\`\`
^ChartMonth


### Badges
#### achieved


#### outstanding
level 5: *Enlightened Novice*
level 10: *Curious Connoisseur*
level 20: *Brainiac Trailblazer*
level 27: *Scholarly Trailblazer*
level 35: *Info Ninja Master*
level 42: *Wise Owl Guru*
level 50: *Einstein Incarnate*
level 60: *Mastermind Sage*
level 75: *Cerebral Maestro*
level 82: *Zen Knowledge Keeper*
level 90: *Grand Archivist Overlord*
level 100: *Omniscient Sage of Everything*



### **note-maturity = 5**
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 5 or note-maturity = "5" or note-maturity = "5\u27A1\uFE0F" or note-maturity = "5\u2B06\uFE0F" or note-maturity = "5\u2B07\uFE0F"
\`\`\`

### **note-maturity = 4**
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 4 or note-maturity = "4" or note-maturity = "4\u27A1\uFE0F" or note-maturity = "4\u2B06\uFE0F" or note-maturity = "4\u2B07\uFE0F"
\`\`\`

### note-maturity = 3
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 3 or note-maturity = "3" or note-maturity = "3\u27A1\uFE0F" or note-maturity = "3\u2B06\uFE0F" or note-maturity = "3\u2B07\uFE0F"
\`\`\`

### note-maturity = 2
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 2 or note-maturity = "2" or note-maturity = "2\u27A1\uFE0F" or note-maturity = "2\u2B06\uFE0F" or note-maturity = "2\u2B07\uFE0F"
\`\`\`

### note-maturity = 1
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 1 or note-maturity = "1" or note-maturity = "1\u27A1\uFE0F" or note-maturity = "1\u2B06\uFE0F" or note-maturity = "1\u2B07\uFE0F"
\`\`\`

### note-maturity = 0
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 0 or note-maturity = "0" or note-maturity = "0\u27A1\uFE0F" or note-maturity = "0\u2B06\uFE0F" or note-maturity = "0\u2B07\uFE0F"
\`\`\`
`;
  const existingFile = app2.vault.getAbstractFileByPath(`${fileName}.md`);
  if (existingFile instanceof import_obsidian2.TFile) {
    console.log(`File ${fileName}.md already exists`);
    return;
  }
  const file = await app2.vault.create(`${fileName}.md`, fileContent);
}
var ModalInformationbox = class extends import_obsidian2.Modal {
  // Store the text to be displayed
  constructor(app2, displayText) {
    super(app2);
    this.displayText = displayText;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText(this.displayText);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
async function replaceFormatStrings(layer2, layer3) {
  const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
  if (!activeView) {
    console.error("No active Markdown view found.");
    return;
  }
  const editor = activeView.editor;
  const selectedText = editor.getSelection();
  if (!selectedText) {
    console.error("No text selected (for progressive summarization switch Layer 2 & 3).");
    return;
  }
  var replacedText = selectedText.replaceAll(layer2, "\xA7\xA7\xA7\xA7");
  replacedText = replacedText.replaceAll(layer3, "\u20AC\u20AC\u20AC\u20AC");
  replacedText = replacedText.replaceAll("\u20AC\u20AC\u20AC\u20AC", layer2);
  replacedText = replacedText.replaceAll("\xA7\xA7\xA7\xA7", layer3);
  editor.replaceSelection(replacedText);
}
function rateDirectionForStatusPoints(ratingCurrent, ratingNew) {
  let ratingFaktor = 0;
  if (parseInt(ratingCurrent, 10) < ratingNew) {
    ratingFaktor = ratingNew - parseInt(ratingCurrent, 10);
  } else {
    ratingFaktor = 0;
  }
  return ratingFaktor;
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzZXR0aW5ncy50cyIsICJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1ZhbGlkL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi90b0ludGVnZXIvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vlay9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyIsICJub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbG9jYWxpemUvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwgIm5vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2RlZmF1bHRMb2NhbGUvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXQvaW5kZXguanMiLCAibWFqdXJpdHljYWxjdWxhdGlvbi50cyIsICJjcmVhdG1vZGNoYXJ0Y2FsY3VsYXRpb24udHMiLCAiYmFkZ2VzLnRzIiwgImxldmVscy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgVmF1bHQsIFBsdWdpbiwgVEZpbGUsIEFwcCwgTW9kYWwsIE1hcmtkb3duVmlldywgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGRlZmF1bHRTZXR0aW5ncywgR2FtaWZpY2F0aW9uUGx1Z2luU2V0dGluZ3MgfSBmcm9tICcuL3NldHRpbmdzJztcbmltcG9ydCBmb3JtYXQgZnJvbSAnZGF0ZS1mbnMvZm9ybWF0JztcbmltcG9ydCB7Y291bnRMYXllcjJBbmRMYXllcjNDaGFyYWN0ZXJzLCByYXRlUHJvZ3Jlc3NpdmVTdW1tYXJpemF0aW9uLCByYXRlTGV2ZWxPZk1hdHVyaXR5LCByYXRlT3V0bGlua3MsIHJhdGVJbmxpbmtzLCByYXRlRGlyZWN0aW9uLCByYXRlTGVuZ3RoRmlsZW5hbWUsIHJhdGVOb3RlTGVuZ3RoLCBnZXROdW1iZXJPZk91dGxpbmtzLCBjb3VudENoYXJhY3RlcnNJbkFjdGl2ZUZpbGUsIGNvdW50X2lubGlua3MsIGdldEZpbGVDb3VudE1hcCwgZ2V0RmlsZU1hcCB9IGZyb20gJy4vbWFqdXJpdHljYWxjdWxhdGlvbidcbmltcG9ydCB7ZmluZEVhcmxpZXN0Q3JlYXRlZEZpbGUsIGZpbmRFYXJsaWVzdE1vZGlmaWVkRmlsZSwgZmluZEVhcmxpZXN0RGF0ZUZpbGUsIG1vbnRoc0JldHdlZW4sIGdldENyZWF0aW9uRGF0ZXMsIGdldE1vZGlmaWNhdGlvbkRhdGVzLCBjcmVhdGVDaGFydEZvcm1hdCwgcmVwbGFjZUNoYXJ0Q29udGVudH0gZnJvbSAnLi9jcmVhdG1vZGNoYXJ0Y2FsY3VsYXRpb24nXG5pbXBvcnQge2dldEJhZGdlRm9yTGV2ZWwsIGdldEJhZGdlRm9ySW5pdExldmVsLCBjaGVja0lmUmVjZWl2ZUFCYWRnZSwgQmFkZ2V9IGZyb20gJy4vYmFkZ2VzJyBcbmltcG9ydCB7Z2V0TGV2ZWxGb3JQb2ludHMsIExldmVsRGF0YSwgc3RhdHVzUG9pbnRzRm9yTGV2ZWx9IGZyb20gJy4vbGV2ZWxzJyBcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZ2FtaWZpY2F0aW9uIGV4dGVuZHMgUGx1Z2luIHtcblx0Ly9zZXR0aW5nczogZ2FtaWZpY2F0aW9uU2V0dGluZ3MgLy8gXHUwMEZDYmVyYmxlaWJzZWwgYXVzIGRlbSBCc3AuXG5cdHB1YmxpYyBzZXR0aW5nczogR2FtaWZpY2F0aW9uUGx1Z2luU2V0dGluZ3M7XG5cdFxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0Y29uc29sZS5sb2coJ29ic2lkaWFuLXBrbS1nYW1pZmljYXRpb24gbG9hZGVkIScpO1xuXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuXHRcdC8vIGxvYWQgc2V0dGluZ3MgdGFiIGZcdTAwRkNyIGRpZSBFaW5zdGVsbHVuZ2VuXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBHYW1pZmljYXRpb25QbHVnaW5TZXR0aW5ncyh0aGlzLmFwcCwgdGhpcykpO1xuXG5cdFx0Ly8gUmVnaXN0ZXIgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIHRoZSBhcHA6ZmlsZS1jbG9zZWQgZXZlbnRcblx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ3dpbmRvdy1jbG9zZScsIGFzeW5jIChmaWxlKSA9PiB7XG5cdFx0XHQvLyBDaGVjayBpZiB0aGUgY2xvc2VkIGZpbGUgaGFzIGEgc3BlY2lmaWMgdGFnXG5cdFx0XHRjb25zb2xlLmxvZyhgZmlsZSBnb3QgY2xvc2VkOiAke2ZpbGUuZ2V0Um9vdC5uYW1lfWApO1xuXHRcdH0pO1xuXG5cdFx0XG5cdFx0Y29uc3QgaXRlbSA9IHRoaXMuYWRkU3RhdHVzQmFySXRlbSgpO1xuXHQgICAgbGV0IHN0YXR1c2JhckdhbWlmaWNhdGlvbiA9IGl0ZW0uY3JlYXRlRWwoXCJzcGFuXCIsIHsgdGV4dDogXCJcIiB9KTtcblx0XHRhd2FpdCB0aGlzLnVwZGF0ZVN0YXR1c0JhcihzdGF0dXNiYXJHYW1pZmljYXRpb24pXG5cblx0XHRcblx0XHR0aGlzLmFkZFJpYmJvbkljb24oXCJhY2Nlc3NpYmlsaXR5XCIsIFwiY2hhbmdlIHRleHQgZm9ybWF0dGluZ1wiLCBhc3luYyAoKSA9PiB7XG5cdFx0XHRcblx0XHRcdC8vIGNvbnN0IHBvaW50c1JlY2VpdmVkID0gNTAwO1xuXHRcdFx0Ly8gbmV3IE1vZGFsSW5mb3JtYXRpb25ib3godGhpcy5hcHAsIGBGaW5hbGxpemVkIGdhbWlmaWNhdGlvbiBpbml0aWFsaXN0YXRpb24hXFxuQ29uZ3JhdHVsYXRpb24sIHlvdSBlYXJuZWQgJHtwb2ludHNSZWNlaXZlZH0gUG9pbnRzIVxcblxcbkNoZWNrIHRoZSBQcm9maWxlIFBhZ2U6IFxcXCIke3RoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWV9Lm1kXFxcIi5gKS5vcGVuKCk7XG5cblx0XHRcdGNvbnN0IG5ld0xldmVsID0gdGhpcy5naXZlU3RhdHVzUG9pbnRzKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUsIDMwMClcblx0XHRcdC8vIHRoaXMuZGVjaXNpb25JZkJhZGdlKG5ld0xldmVsKVxuXG5cdFx0XHQvLyBjb25zdCBuZXh0QmFkZ2VMZXZlbCA9IGF3YWl0IHRoaXMud2hpY2hMZXZlbE5leHRCYWRnZSh0aGlzLnNldHRpbmdzLnN0YXR1c0xldmVsKVxuXHRcdFx0Ly8gY29uc29sZS5sb2coYE5cdTAwRTRjaHN0ZSBCYWRnZSBtaXQgTGV2ZWwgJHtuZXh0QmFkZ2VMZXZlbH1gKVxuXG5cdFx0XHRcblx0XHRcdC8vIGNvbnN0IGluaXRCYWRnZSA6IEJhZGdlID0gYXdhaXQgZ2V0QmFkZ2VGb3JJbml0TGV2ZWwodGhpcy5zZXR0aW5ncy5zdGF0dXNMZXZlbCk7XG5cdFx0XHQvLyBhd2FpdCB0aGlzLmdpdmVJbml0QmFkZ2VJblByb2ZpbGUodGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSwgaW5pdEJhZGdlKTtcblx0XHRcdC8vIGF3YWl0IHRoaXMucmVtb3ZlQmFkZ2VzV2hlbkluaXRMZXZlbEhpZ2hlcih0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lICx0aGlzLnNldHRpbmdzLnN0YXR1c0xldmVsKVxuXHRcdFx0Ly8gYXdhaXQgdGhpcy5ib29zdGVyRm9ySW5pdCgpXG5cblx0XHRcdC8vIHRoaXMub3BlbkF2YXRhckZpbGUoKVxuXG5cdFx0XHQvLyBjaGFuZ2UgdGV4dCBpbiBzdGF0dXMgYmFyXG5cdFx0XHRcblx0XHRcdC8vIHRoaXMudXBkYXRlU3RhdHVzQmFyKHN0YXR1c2JhckdhbWlmaWNhdGlvbilcblx0XHRcdC8vc3RhdHVzYmFyR2FtaWZpY2F0aW9uLnNldFRleHQoXCJIYWxsb1wiKVxuXG5cdFx0fSk7XG5cblx0XHRcblx0XHRcblxuXHRcdHRoaXMuYWRkUmliYm9uSWNvbihcInNwcm91dFwiLCBcIkNhbGN1bGF0ZSBOb3RlIE1hdHVyaXR5XCIsIGFzeW5jICgpID0+IHtcblx0XHRcdC8vY29uc3QgZmlsZTogVEZpbGUgfCBudWxsID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcblx0XHRcdHRoaXMuY2FsY3VsYXRlTm90ZU1hanVyaXR5KHN0YXR1c2JhckdhbWlmaWNhdGlvbik7XG5cdFx0fSk7XG5cblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZUluaXRDb21tYW5kKXtcblx0XHQvLyBjb21tYW5kIEluaXRpYWxpemUgZ2FtaWZpY2F0aW9uIHJhdGluZ3Ncblx0XHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRcdGlkOiAnaW5pdC1yYXRlLWdhbWlmaWNhdGlvbicsXG5cdFx0XHRcdG5hbWU6ICdJbml0aWFsaXplIGdhbWlmaWNhdGlvbiByYXRpbmdzJyxcblx0XHRcdFx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLmdhbWlmaWNhdGlvblN0YXJ0RGF0ZSA9IGZvcm1hdChuZXcgRGF0ZSgpLCAneXl5eS1NTS1kZCcpO1xuXHRcdFx0XHRcdHRoaXMuc2F2ZVNldHRpbmdzKCk7XG5cblx0XHRcdFx0XHRjb25zdCB7IHZhdWx0IH0gPSB0aGlzLmFwcDtcblx0XHRcdFx0XHRhd2FpdCBjcmVhdGVBdmF0YXJGaWxlKHRoaXMuYXBwLCB0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lKVxuXHRcdFx0XHRcdGNvbnN0IGNoYXJ0U3RyaW5nID0gYXdhaXQgdGhpcy5jcmVhdGVDaGFydCh2YXVsdClcblx0XHRcdFx0XHRhd2FpdCByZXBsYWNlQ2hhcnRDb250ZW50KHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUsIGNoYXJ0U3RyaW5nKVxuXHRcdFx0XHRcdHRoaXMub3BlbkF2YXRhckZpbGUoKVxuXHRcdFx0XHRcdGNvbnN0IGZpbGVDb3VudE1hcDogVEZpbGVbXSA9IGF3YWl0IGdldEZpbGVNYXAodGhpcy5hcHAsIHRoaXMuc2V0dGluZ3MudGFnc0V4Y2x1ZGUsIHRoaXMuc2V0dGluZ3MuZm9sZGVyRXhjbHVkZSk7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coYGZpbGVDb3VudE1hcCBsb2FkZWQuIE51bWJlciBvZiBmaWxlczogJHtmaWxlQ291bnRNYXAubGVuZ3RofWApO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGxldCBwb2ludHNSZWNlaXZlZCA9IDA7IC8vIHRvIGhhdmUgb25lIG1lc3NhZ2UgYXQgdGhlIGVuZCBob3cgbWFueSBwb2ludHMgcmVjZWl2ZWRcblx0XHRcdFx0XHRjb25zdCBwb2ludHNOb3RlTWFqdXJpdHkgPSAxMDA7XG5cdFx0XHRcdFx0Y29uc3QgcG9pbnRzTWFqdXJpdHkgPSAxMDtcblx0XHRcdFx0XHRsZXQgbmV3TGV2ZWwgOiBQcm9taXNlPGJvb2xlYW4+O1xuXG5cdFx0XHRcdFx0Zm9yIChjb25zdCBmaWxlTmFtZSBvZiBmaWxlQ291bnRNYXApIHtcblx0XHRcdFx0XHRcdGxldCBmaWxlID0gZmlsZU5hbWVcblx0XHRcdFx0XHRcdGNvbnN0IGZpbGVDb250ZW50cyA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGZpbGUpO1xuXHRcdFx0XHRcdFx0Y29uc3QgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG5cdFx0XHRcdFx0XHRpZiAoYWN0aXZlVmlldyAmJiBhY3RpdmVWaWV3LmZpbGUgJiYgYWN0aXZlVmlldy5maWxlLnBhdGggPT09IGZpbGUucGF0aCkge1xuXHRcdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oYEZpbGUgJHtmaWxlLnBhdGh9IGlzIGN1cnJlbnRseSBvcGVuLiBTa2lwcGluZy5gKTtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhgZmlsZU5hbWUuYmFzZW5hbWU6ICR7ZmlsZU5hbWUuYmFzZW5hbWV9YClcblx0XHRcdFx0XHRcdGNvbnN0IGZpbGVMZW5ndGggPSBjb3VudENoYXJhY3RlcnNJbkFjdGl2ZUZpbGUoZmlsZUNvbnRlbnRzLCBmaWxlTmFtZS5iYXNlbmFtZSk7XG5cdFx0XHRcdFx0XHRjb25zdCByYXRlRmlsZUxlbmd0aCA9IHJhdGVOb3RlTGVuZ3RoKGZpbGVMZW5ndGgpO1xuXHRcdFx0XHRcdFx0Y29uc3Qge2NoYXJDb3VudCwgaGlnaGxpZ2h0ZWRDb3VudCwgYm9sZENvdW50fSA9IGNvdW50TGF5ZXIyQW5kTGF5ZXIzQ2hhcmFjdGVycyhmaWxlQ29udGVudHMsIGZpbGVOYW1lLmJhc2VuYW1lLCB0aGlzLnNldHRpbmdzLnByb2dyZXNzaXZlU3VtTGF5ZXIyLCB0aGlzLnNldHRpbmdzLnByb2dyZXNzaXZlU3VtTGF5ZXIzKTtcblx0XHRcdFx0XHRcdGNvbnN0IHJhdGVQcm9ncmVzc2l2ZVN1bSA6IG51bWJlciA9IHJhdGVQcm9ncmVzc2l2ZVN1bW1hcml6YXRpb24oY2hhckNvdW50LCBoaWdobGlnaHRlZENvdW50LCBib2xkQ291bnQpO1xuXHRcdFx0XHRcdFx0Y29uc3QgZmlsZU5hbWVSYXRlID0gcmF0ZUxlbmd0aEZpbGVuYW1lKGZpbGUubmFtZSk7XG5cdFx0XHRcdFx0XHRjb25zdCBpbmxpbmtOdW1iZXIgPSBjb3VudF9pbmxpbmtzKGZpbGUpO1xuXHRcdFx0XHRcdFx0Y29uc3QgaW5saW5rQ2xhc3MgPSByYXRlSW5saW5rcyhpbmxpbmtOdW1iZXIpLy8sIGZpbGVDb3VudE1hcC5zaXplKTtcblx0XHRcdFx0XHRcdGNvbnN0IHJhdGVPdXQgPSByYXRlT3V0bGlua3MoZ2V0TnVtYmVyT2ZPdXRsaW5rcyhmaWxlKSk7XG5cdFx0XHRcdFx0XHRjb25zdCBub3RlTWFqdXJpdHkgPSByYXRlTGV2ZWxPZk1hdHVyaXR5KHJhdGVGaWxlTGVuZ3RoLCBmaWxlTmFtZVJhdGUsIGlubGlua0NsYXNzLCByYXRlT3V0LCByYXRlUHJvZ3Jlc3NpdmVTdW0pO1xuXHRcdFx0XHRcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKGBQcm9jZXNzaW5nIGZpbGUgJHtmaWxlTmFtZS5iYXNlbmFtZX0gaW4gcGF0aCAke2ZpbGVOYW1lLnBhdGh9YCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLmFwcC5maWxlTWFuYWdlci5wcm9jZXNzRnJvbnRNYXR0ZXIoZmlsZSwgKGZyb250bWF0dGVyKSA9PiB7XG5cdFx0XHRcdFx0XHRcdCAgXHQvL2NvbnNvbGUubG9nKCdjdXJyZW50IG1ldGFkYXRhOiAnLCBmcm9udG1hdHRlcik7XG5cblx0XHRcdFx0XHRcdFx0ICBcdC8vIFN0YXR1cyBQb2ludHNcblx0XHRcdFx0XHRcdFx0XHRpZiAocmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnbm90ZS1tYXR1cml0eSddLCBub3RlTWFqdXJpdHkpID49IDEpe1xuXHRcdFx0XHRcdFx0XHRcdFx0cG9pbnRzUmVjZWl2ZWQgKz0gcG9pbnRzTm90ZU1hanVyaXR5KnJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ25vdGUtbWF0dXJpdHknXSwgbm90ZU1hanVyaXR5KVxuXHRcdFx0XHRcdFx0XHRcdFx0bmV3TGV2ZWwgPSB0aGlzLmdpdmVTdGF0dXNQb2ludHModGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSxwb2ludHNOb3RlTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhcImZyb250bWF0dGVyWydub3RlLW1hdHVyaXR5J11cIiwgbm90ZU1hanVyaXR5KSlcblxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoJ25vdGUtbWF0dXJpdHknIGluIGZyb250bWF0dGVyID09IGZhbHNlKXtcblx0XHRcdFx0XHRcdFx0XHRcdHBvaW50c1JlY2VpdmVkICs9IHBvaW50c05vdGVNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCBub3RlTWFqdXJpdHkpXG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdMZXZlbCA9IHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyh0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lLHBvaW50c05vdGVNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCBub3RlTWFqdXJpdHkpKVxuXHRcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ3RpdGxlLWNsYXNzJ10sIGZpbGVOYW1lUmF0ZSkgPj0gMSAmJiAndGl0bGUtY2xhc3MnIGluIGZyb250bWF0dGVyKXtcblx0XHRcdFx0XHRcdFx0XHRcdHBvaW50c1JlY2VpdmVkICs9IHBvaW50c01hanVyaXR5KnJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ3RpdGxlLWNsYXNzJ10sIGZpbGVOYW1lUmF0ZSlcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0xldmVsID0gdGhpcy5naXZlU3RhdHVzUG9pbnRzKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUscG9pbnRzTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWyd0aXRsZS1jbGFzcyddLCBmaWxlTmFtZVJhdGUpKVxuXHRcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICgndGl0bGUtY2xhc3MnIGluIGZyb250bWF0dGVyID09IGZhbHNlKXtcblx0XHRcdFx0XHRcdFx0XHRcdHBvaW50c1JlY2VpdmVkICs9IHBvaW50c01hanVyaXR5KnJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoXCIwXCIsIGZpbGVOYW1lUmF0ZSlcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0xldmVsID0gdGhpcy5naXZlU3RhdHVzUG9pbnRzKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUscG9pbnRzTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhcIjBcIiwgZmlsZU5hbWVSYXRlKSlcblx0XHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdGlmIChyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydub3RlLWxlbmd0aC1jbGFzcyddLCByYXRlRmlsZUxlbmd0aCkgPj0gMSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydub3RlLWxlbmd0aC1jbGFzcyddLCByYXRlRmlsZUxlbmd0aClcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0xldmVsID0gdGhpcy5naXZlU3RhdHVzUG9pbnRzKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUscG9pbnRzTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydub3RlLWxlbmd0aC1jbGFzcyddLCByYXRlRmlsZUxlbmd0aCkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHR9ZWxzZSBpZiAoJ25vdGUtbGVuZ3RoLWNsYXNzJyBpbiBmcm9udG1hdHRlciA9PSBmYWxzZSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCByYXRlRmlsZUxlbmd0aClcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0xldmVsID0gdGhpcy5naXZlU3RhdHVzUG9pbnRzKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUscG9pbnRzTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhcIjBcIiwgcmF0ZUZpbGVMZW5ndGgpKVxuXHRcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ2lubGluay1jbGFzcyddLCBpbmxpbmtDbGFzcykgPj0gMSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydpbmxpbmstY2xhc3MnXSwgaW5saW5rQ2xhc3MpXG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdMZXZlbCA9IHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyh0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lLHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnaW5saW5rLWNsYXNzJ10sIGlubGlua0NsYXNzKSlcblx0XHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdH1lbHNlIGlmICgnaW5saW5rLWNsYXNzJyBpbiBmcm9udG1hdHRlciA9PSBmYWxzZSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCBpbmxpbmtDbGFzcylcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0xldmVsID0gdGhpcy5naXZlU3RhdHVzUG9pbnRzKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUscG9pbnRzTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhcIjBcIiwgaW5saW5rQ2xhc3MpKVxuXHRcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ291dGxpbmstY2xhc3MnXSwgcmF0ZU91dCkgPj0gMSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydvdXRsaW5rLWNsYXNzJ10sIHJhdGVPdXQpXG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdMZXZlbCA9IHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyh0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lLHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnb3V0bGluay1jbGFzcyddLCByYXRlT3V0KSlcblx0XHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdH1lbHNlIGlmICgnb3V0bGluay1jbGFzcycgaW4gZnJvbnRtYXR0ZXIgPT0gZmFsc2Upe1xuXHRcdFx0XHRcdFx0XHRcdFx0cG9pbnRzUmVjZWl2ZWQgKz0gcG9pbnRzTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhcIjBcIiwgcmF0ZU91dClcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0xldmVsID0gdGhpcy5naXZlU3RhdHVzUG9pbnRzKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUscG9pbnRzTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhcIjBcIiwgcmF0ZU91dCkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRpZiAocmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsncHJvZ3Jlc3NpdmUtc3VtYXJpemF0aW9uLW1hdHVyaXR5J10sIHJhdGVQcm9ncmVzc2l2ZVN1bSkgPj0gMSl7XG5cdFx0XHRcdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydwcm9ncmVzc2l2ZS1zdW1hcml6YXRpb24tbWF0dXJpdHknXSwgcmF0ZVByb2dyZXNzaXZlU3VtKVxuXHRcdFx0XHRcdFx0XHRcdFx0bmV3TGV2ZWwgPSB0aGlzLmdpdmVTdGF0dXNQb2ludHModGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSxwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ3Byb2dyZXNzaXZlLXN1bWFyaXphdGlvbi1tYXR1cml0eSddLCByYXRlUHJvZ3Jlc3NpdmVTdW0pKVxuXHRcdFx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdFx0fWVsc2UgaWYgKCdwcm9ncmVzc2l2ZS1zdW1hcml6YXRpb24tbWF0dXJpdHknIGluIGZyb250bWF0dGVyID09IGZhbHNlKXtcblx0XHRcdFx0XHRcdFx0XHRcdHBvaW50c1JlY2VpdmVkICs9IHBvaW50c01hanVyaXR5KnJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ3Byb2dyZXNzaXZlLXN1bWFyaXphdGlvbi1tYXR1cml0eSddLCByYXRlUHJvZ3Jlc3NpdmVTdW0pXG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdMZXZlbCA9IHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyh0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lLHBvaW50c01hanVyaXR5KnJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoXCIwXCIsIHJhdGVQcm9ncmVzc2l2ZVN1bSkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly9jb25zb2xlLmxvZyhgcG9pbnRzUmVjZWl2ZWQ6ICR7cG9pbnRzUmVjZWl2ZWR9XFx0bmV4dCBhcmUgZnJvbnRtYXR0ZXJzIFx1MjAyNmApXG5cblx0XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHQvL3RyeSB7XG5cdFx0XHRcdFx0XHRcdFx0ZnJvbnRtYXR0ZXJbJ3RpdGxlLWNsYXNzJ10gPSByYXRlRGlyZWN0aW9uKGZyb250bWF0dGVyWyd0aXRsZS1jbGFzcyddLCBmaWxlTmFtZVJhdGUpXG5cdFx0XHRcdFx0XHRcdFx0ZnJvbnRtYXR0ZXJbJ25vdGUtbGVuZ3RoLWNsYXNzJ10gPSByYXRlRGlyZWN0aW9uKGZyb250bWF0dGVyWydub3RlLWxlbmd0aC1jbGFzcyddLCByYXRlRmlsZUxlbmd0aClcblx0XHRcdFx0XHRcdFx0XHRmcm9udG1hdHRlclsnaW5saW5rLWNsYXNzJ10gPSByYXRlRGlyZWN0aW9uKGZyb250bWF0dGVyWydpbmxpbmstY2xhc3MnXSwgaW5saW5rQ2xhc3MpXG5cdFx0XHRcdFx0XHRcdFx0ZnJvbnRtYXR0ZXJbJ291dGxpbmstY2xhc3MnXSA9IHJhdGVEaXJlY3Rpb24oZnJvbnRtYXR0ZXJbJ291dGxpbmstY2xhc3MnXSwgcmF0ZU91dClcblx0XHRcdFx0XHRcdFx0XHRmcm9udG1hdHRlclsncHJvZ3Jlc3NpdmUtc3VtYXJpemF0aW9uLW1hdHVyaXR5J10gPSByYXRlRGlyZWN0aW9uKGZyb250bWF0dGVyWydwcm9ncmVzc2l2ZS1zdW1hcml6YXRpb24tbWF0dXJpdHknXSwgcmF0ZVByb2dyZXNzaXZlU3VtKVxuXHRcdFx0XHRcdFx0XHRcdGZyb250bWF0dGVyWydub3RlLW1hdHVyaXR5J10gPSByYXRlRGlyZWN0aW9uKGZyb250bWF0dGVyWydub3RlLW1hdHVyaXR5J10sIG5vdGVNYWp1cml0eSlcblx0XHRcdFx0XHRcdFx0XHQvL30gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdFx0XHQvL1x0Y29uc29sZS5lcnJvcihlKVxuXHRcdFx0XHRcdFx0XHRcdC8vfVxuXHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHR9KTtcdFxuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoZT8ubmFtZSA9PT0gJ1lBTUxQYXJzZUVycm9yJykge1xuXHRcdFx0XHRcdFx0XHQgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBVcGRhdGUgbWFqdXJpdHlzIGZhaWxlZFxuXHRcdFx0XHRcdCAgTWFsZm9ybWVkIGZyb250YW10dGVyIG9uIHRoaXMgZmlsZSA6ICR7ZmlsZS5wYXRofVxuXHRcdFx0XHRcdCAgXG5cdFx0XHRcdFx0ICAke2UubWVzc2FnZX1gO1xuXHRcdFx0XHRcdFx0XHQgIG5ldyBOb3RpY2UoZXJyb3JNZXNzYWdlLCA0MDAwKTtcblx0XHRcdFx0XHRcdFx0ICBjb25zb2xlLmVycm9yKGVycm9yTWVzc2FnZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdCAgfVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocG9pbnRzUmVjZWl2ZWQgPiAwKXtcblx0XHRcdFx0XHRcdG5ldyBOb3RpY2UoYCR7cG9pbnRzUmVjZWl2ZWR9IFBvaW50cyByZWNlaXZlZGApXG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhgJHtwb2ludHNSZWNlaXZlZH0gUG9pbnRzIHJlY2VpdmVkYClcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gSW5zaWRlIHlvdXIgZnVuY3Rpb24gd2hlcmUgeW91IHdhbnQgdG8gaW50cm9kdWNlIGEgZGVsYXlcblx0XHRcdFx0XHRzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRcdC8vIENvZGUgdGhhdCB5b3Ugd2FudCB0byBleGVjdXRlIGFmdGVyIHRoZSBkZWxheVxuXHRcdFx0XHRcdFx0Y29uc3QgaW5pdEJhZGdlIDogQmFkZ2UgPSBhd2FpdCBnZXRCYWRnZUZvckluaXRMZXZlbCh0aGlzLnNldHRpbmdzLnN0YXR1c0xldmVsKTtcblx0XHRcdFx0XHRcdG5ldyBOb3RpY2UoYFlvdSd2ZSBlYXJuZWQgdGhlIFwiJHtpbml0QmFkZ2UubmFtZX1cIiBiYWRnZS4gJHtpbml0QmFkZ2UuZGVzY3JpcHRpb259YClcbiAgICAgIFx0XHRcdFx0XHRjb25zb2xlLmxvZyhgWW91IGVhcm5lZCAke2luaXRCYWRnZS5uYW1lfSAtICR7aW5pdEJhZGdlLmRlc2NyaXB0aW9ufWApXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLmdpdmVJbml0QmFkZ2VJblByb2ZpbGUodGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSwgaW5pdEJhZGdlKTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucmVtb3ZlQmFkZ2VzV2hlbkluaXRMZXZlbEhpZ2hlcih0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lICx0aGlzLnNldHRpbmdzLnN0YXR1c0xldmVsKVxuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5ib29zdGVyRm9ySW5pdCgpXG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnVwZGF0ZVN0YXR1c0JhcihzdGF0dXNiYXJHYW1pZmljYXRpb24pXG5cdFx0XHRcdFx0fSwgMjAwMCk7IC8vIDIwMDAgbWlsbGlzZWNvbmRzID0gMiBzZWNvbmRzXG5cblxuXHRcdFx0XHRcdC8vIGNvbnN0IGluaXRCYWRnZSA6IEJhZGdlID0gYXdhaXQgZ2V0QmFkZ2VGb3JJbml0TGV2ZWwodGhpcy5zZXR0aW5ncy5zdGF0dXNMZXZlbClcblx0XHRcdFx0XHQvLyBhd2FpdCB0aGlzLmdpdmVJbml0QmFkZ2VJblByb2ZpbGUodGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSAsaW5pdEJhZGdlKVxuXHRcdFx0XHRcdC8vIGF3YWl0IHRoaXMucmVtb3ZlQmFkZ2VzV2hlbkluaXRMZXZlbEhpZ2hlcih0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lICx0aGlzLnNldHRpbmdzLnN0YXR1c0xldmVsKVxuXHRcdFx0XHRcdC8vIGF3YWl0IHRoaXMuYm9vc3RlckZvckluaXQoKVxuXHRcdFx0XHRcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRuZXcgTW9kYWxJbmZvcm1hdGlvbmJveCh0aGlzLmFwcCwgYEZpbmFsbGl6ZWQgZ2FtaWZpY2F0aW9uIGluaXRpYWxpc3RhdGlvbiFcXG5Db25ncmF0dWxhdGlvbiwgeW91IGVhcm5lZCAke3BvaW50c1JlY2VpdmVkfSBQb2ludHMhXFxuXFxuQ2hlY2sgdGhlIFByb2ZpbGUgUGFnZTogXFxcIiR7dGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZX0ubWRcXFwiXFxuXFxuWW91IHJlY2VpdmVkIGFuIGluaXRpYWxpc2F0aW9uIEJvb3N0ZXIgYWt0aXYgZm9yIHlvdXIgZmlyc3QgbGV2ZWwgdXBzLiBHYW1lIG9uIWApLm9wZW4oKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0fSxcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZUluaXRDb21tYW5kKXtcblx0XHRcdC8vIGNvbW1hbmQgY3JlYXRlIGF2YXRhciBwcm9maWxlIHBhZ2Vcblx0XHRcdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdFx0XHRpZDogJ2NyZWF0ZS1hdmF0YXItcGFnZScsXG5cdFx0XHRcdFx0bmFtZTogJ2NyZWF0ZSBwcm9maWxlIHBhZ2UnLFxuXHRcdFx0XHRcdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0XHRjb25zdCB7IHZhdWx0IH0gPSB0aGlzLmFwcDtcblx0XHRcdFx0XHRcdGNyZWF0ZUF2YXRhckZpbGUodGhpcy5hcHAsIHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUpXG5cdFx0XHRcdFx0XHRjb25zdCBjaGFydFN0cmluZyA9IGF3YWl0IHRoaXMuY3JlYXRlQ2hhcnQodmF1bHQpXG5cdFx0XHRcdFx0XHRyZXBsYWNlQ2hhcnRDb250ZW50KHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUsIGNoYXJ0U3RyaW5nKVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cblx0XHQvLyBjb21tYW5kOiByZXNldCBnYW1lXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAncmVzZXQtZ2FtZScsXG5cdFx0XHRuYW1lOiAncmVzZXQgdGhlIGdhbWUnLFxuXHRcdFx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IHtcblx0XHRcdFx0Ly9jb25zdCBhcHAgPSB3aW5kb3cuYXBwO1xuXHRcdFx0XHQvLyB3ZW5uIGVzIGtlaW5lIGVpbnNjaHJcdTAwRTRua3VuZyBnaWJ0IGlzdCBlcyB3ZXNlbnRsaWNoIHNjaG5lbGxlclxuXHRcdFx0XHQvL2NvbnN0IGZpbGVzID0gYXdhaXQgZ2V0RmlsZU1hcChhcHAsIHRoaXMuc2V0dGluZ3MudGFnc0V4Y2x1ZGUsIHRoaXMuc2V0dGluZ3MuZm9sZGVyRXhjbHVkZSk7XG5cdFx0XHRcdGF3YWl0IHRoaXMucmVtb3ZlS2V5c0Zyb21Gcm9udG1hdHRlcigpO1xuXHRcdFx0XHR0aGlzLnNldHRpbmdzLnN0YXR1c0xldmVsID0gMTtcblx0XHRcdFx0dGhpcy5zZXR0aW5ncy5zdGF0dXNQb2ludHMgPSAwO1xuXHRcdFx0XHR0aGlzLnNldHRpbmdzLnhwRm9yTmV4dExldmVsID0gMTAwMFxuXHRcdFx0XHR0aGlzLnNldHRpbmdzLmJhZGdlQm9vc3RlclN0YXRlID0gZmFsc2Vcblx0XHRcdFx0dGhpcy5zZXR0aW5ncy5iYWRnZUJvb3N0ZXJGYWN0b3IgPSAxXG5cdFx0XHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG5cdFx0XHRcdHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyh0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lLDApXG5cdFx0XHRcdGF3YWl0IHRoaXMudXBkYXRlU3RhdHVzQmFyKHN0YXR1c2JhckdhbWlmaWNhdGlvbilcblx0XHRcdFx0bmV3IE1vZGFsSW5mb3JtYXRpb25ib3godGhpcy5hcHAsIGBHYW1lIGlzIG5vdyByZXNldGVkLiBQbGVhc2UgZGVsZXRlIHRoZSBQcm9maWxlIFBhZ2U6IFxcXCIke3RoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWV9Lm1kXFxcIiBtYW51YWxseS5gKS5vcGVuKCk7XG5cdFx0XHR9LFxuXHRcdFx0XG5cdFx0fSk7XG5cblx0XHQvLyBjb21tYW5kOiB1cGRhdGUgY2hhcnQgaW4gQXZhdGFyIFBhZ2Vcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICd1cGRhdGUtY2hhcnQtYXZhdGFycGFnZScsXG5cdFx0XHRuYW1lOiAndXBkYXRlIGNoYXJ0IG9uIHByb2ZpbGUgcGFnZScsXG5cdFx0XHRjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHQvL2NvbnN0IGFwcCA9IHdpbmRvdy5hcHA7XG5cdFx0XHRcdC8vIHdlbm4gZXMga2VpbmUgZWluc2Noclx1MDBFNG5rdW5nIGdpYnQgaXN0IGVzIHdlc2VudGxpY2ggc2NobmVsbGVyXG5cdFx0XHRcdC8vY29uc3QgZmlsZXMgPSBhd2FpdCBnZXRGaWxlTWFwKGFwcCwgdGhpcy5zZXR0aW5ncy50YWdzRXhjbHVkZSwgdGhpcy5zZXR0aW5ncy5mb2xkZXJFeGNsdWRlKTtcblx0XHRcdFx0Y29uc3QgeyB2YXVsdCB9ID0gYXBwO1xuXHRcdFx0XHRjb25zdCBjaGFydFN0cmluZyA9IGF3YWl0IHRoaXMuY3JlYXRlQ2hhcnQodmF1bHQpXG5cdFx0XHRcdHJlcGxhY2VDaGFydENvbnRlbnQodGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSwgY2hhcnRTdHJpbmcpXG5cdFx0XHR9LFxuXHRcdH0pO1xuXG5cdFx0Lypcblx0XHQvLyBjb21tYW5kOiByYXRlIGZpbGVuYW1lXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAncmF0ZS1maWxlbmFtZS1sZW5ndGgnLFxuXHRcdFx0bmFtZTogJ1JhdGUgRmlsZW5hbWUgTGVuZ3RoJyxcblx0XHRcdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGZpbGU6IFRGaWxlIHwgbnVsbCA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0XHRcdGlmIChmaWxlKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnByb2Nlc3NGcm9udE1hdHRlcihmaWxlLCAoZnJvbnRtYXR0ZXIpID0+IHtcblx0XHRcdFx0XHRcdCAgXHQvL2NvbnNvbGUubG9nKCdjdXJyZW50IG1ldGFkYXRhOiAnLCBmcm9udG1hdHRlcik7XG5cdFx0XHRcdFx0XHQgIFx0Y29uc3QgcG9pbnRzTm90ZU1hanVyaXR5ID0gMTAwO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBwb2ludHNNYWp1cml0eSA9IDEwO1xuXHRcdFx0XHRcdFx0XHRpZiAocmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsndGl0bGUtY2xhc3MnXSwgcmF0ZUxlbmd0aEZpbGVuYW1lKGZpbGUubmFtZSkpID49IDEpe1xuXHRcdFx0XHRcdFx0XHRcdG5ldyBOb3RpY2UoYCR7cG9pbnRzTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWyd0aXRsZS1jbGFzcyddLCByYXRlTGVuZ3RoRmlsZW5hbWUoZmlsZS5uYW1lKSl9IFBvaW50cyByZWNlaXZlZGApXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5naXZlU3RhdHVzUG9pbnRzKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUscG9pbnRzTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWyd0aXRsZS1jbGFzcyddLCByYXRlTGVuZ3RoRmlsZW5hbWUoZmlsZS5uYW1lKSkpXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdCAgXHRmcm9udG1hdHRlclsndGl0bGUtY2xhc3MnXSA9IHJhdGVEaXJlY3Rpb24oZnJvbnRtYXR0ZXJbJ3RpdGxlLWNsYXNzJ10sIHJhdGVMZW5ndGhGaWxlbmFtZShmaWxlLm5hbWUpKVxuXHRcdFx0XHRcdFx0fSk7XHRcblx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0XHRpZiAoZT8ubmFtZSA9PT0gJ1lBTUxQYXJzZUVycm9yJykge1xuXHRcdFx0XHRcdFx0ICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgVXBkYXRlIHRpdGVsIG1hanVyaXR5IGZhaWxlZCBNYWxmb3JtZWQgZnJvbnRhbXR0ZXIgb24gdGhpcyBmaWxlIDogJHtmaWxlLnBhdGh9XG5cdFx0XHRcdCAgXG5cdFx0XHRcdCAgJHtlLm1lc3NhZ2V9YDtcblx0XHRcdFx0XHRcdCAgbmV3IE5vdGljZShlcnJvck1lc3NhZ2UsIDQwMDApO1xuXHRcdFx0XHRcdFx0ICBjb25zb2xlLmVycm9yKGVycm9yTWVzc2FnZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ICB9XG5cdFx0XHRcdH1cblx0XHRcdFx0YXdhaXQgdGhpcy51cGRhdGVTdGF0dXNCYXIoc3RhdHVzYmFyR2FtaWZpY2F0aW9uKVxuXHRcdFx0fSxcblx0XHR9KTtcblxuXHRcdC8vIGNvbW1hbmQ6IHJhdGUgb3V0bGlua3Ncblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdyYXRlLW91dGxpbmtzJyxcblx0XHRcdG5hbWU6ICdSYXRlIG91dGxpbmtzJyxcblx0XHRcdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGZpbGU6IFRGaWxlIHwgbnVsbCA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0XHRcdGlmIChmaWxlKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnByb2Nlc3NGcm9udE1hdHRlcihmaWxlLCAoZnJvbnRtYXR0ZXIpID0+IHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgcG9pbnRzTWFqdXJpdHkgPSAxMDtcblx0XHRcdFx0XHRcdFx0aWYgKHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ291dGxpbmstY2xhc3MnXSwgcmF0ZUxlbmd0aEZpbGVuYW1lKGZpbGUubmFtZSkpID49IDEpe1xuXHRcdFx0XHRcdFx0XHRcdG5ldyBOb3RpY2UoYCR7cG9pbnRzTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydvdXRsaW5rLWNsYXNzJ10sIHJhdGVMZW5ndGhGaWxlbmFtZShmaWxlLm5hbWUpKX0gUG9pbnRzIHJlY2VpdmVkYClcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmdpdmVTdGF0dXNQb2ludHModGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSxwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ291dGxpbmstY2xhc3MnXSwgcmF0ZUxlbmd0aEZpbGVuYW1lKGZpbGUubmFtZSkpKVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQgIFx0Ly9jb25zb2xlLmxvZygnY3VycmVudCBtZXRhZGF0YTogJywgZnJvbnRtYXR0ZXIpO1xuXHRcdFx0XHRcdFx0ICBcdGZyb250bWF0dGVyWydvdXRsaW5rLWNsYXNzJ10gPSByYXRlRGlyZWN0aW9uKGZyb250bWF0dGVyWydvdXRsaW5rLWNsYXNzJ10sIHJhdGVPdXRsaW5rcyhnZXROdW1iZXJPZk91dGxpbmtzKGZpbGUpKSlcblx0XHRcdFx0XHRcdH0pO1x0XG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0aWYgKGU/Lm5hbWUgPT09ICdZQU1MUGFyc2VFcnJvcicpIHtcblx0XHRcdFx0XHRcdCAgY29uc3QgZXJyb3JNZXNzYWdlID0gYFVwZGF0ZSBvdXRsaW5rIG1hanVyaXR5IGZhaWxlZFxuXHRcdFx0XHQgIE1hbGZvcm1lZCBmcm9udGFtdHRlciBvbiB0aGlzIGZpbGUgOiAke2ZpbGUucGF0aH1cblx0XHRcdFx0ICBcblx0XHRcdFx0ICAke2UubWVzc2FnZX1gO1xuXHRcdFx0XHRcdFx0ICBuZXcgTm90aWNlKGVycm9yTWVzc2FnZSwgNDAwMCk7XG5cdFx0XHRcdFx0XHQgIGNvbnNvbGUuZXJyb3IoZXJyb3JNZXNzYWdlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQgIH1cblx0XHRcdFx0fVxuXHRcdFx0XHRhd2FpdCB0aGlzLnVwZGF0ZVN0YXR1c0JhcihzdGF0dXNiYXJHYW1pZmljYXRpb24pXG5cdFx0XHR9LFxuXHRcdH0pO1xuXG5cblx0XHQvLyBjb21tYW5kOiByYXRlIGlubGlua3Ncblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdyYXRlLWlubGlua3MnLFxuXHRcdFx0bmFtZTogJ1JhdGUgaW5saW5rcycsXG5cdFx0XHRjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRjb25zdCBhcHAgPSB3aW5kb3cuYXBwO1xuXHRcdFx0XHQvLyBjb25zdCBjb3VudE1hcCA9IGF3YWl0IGdldEZpbGVDb3VudE1hcChhcHAsIHRoaXMuc2V0dGluZ3MudGFnc0V4Y2x1ZGUsIHRoaXMuc2V0dGluZ3MuZm9sZGVyRXhjbHVkZSk7XG5cdFx0XHRcdGNvbnN0IGZpbGU6IFRGaWxlICA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0XHRcdC8vIGNvbnN0IGJhc2VQYXRoID0gKHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIgYXMgYW55KS5iYXNlUGF0aFxuXHRcdFx0XHRjb25zdCBpbmxpbmtOdW1iZXIgPSBjb3VudF9pbmxpbmtzKGZpbGUpO1xuXHRcdFx0XHRjb25zdCBpbmxpbmtDbGFzcyA9IHJhdGVJbmxpbmtzKGlubGlua051bWJlcikvLywgbnVtQWxsRmlsZXMpXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5hcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKGZpbGUsIChmcm9udG1hdHRlcikgPT4ge1xuXHRcdFx0XHRcdCAgXHQvL2NvbnNvbGUubG9nKCdjdXJyZW50IG1ldGFkYXRhOiAnLCBmcm9udG1hdHRlcik7XG5cdFx0XHRcdFx0XHRjb25zdCBwb2ludHNNYWp1cml0eSA9IDEwO1xuXHRcdFx0XHRcdFx0aWYgKHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ2lubGluay1jbGFzcyddLCByYXRlTGVuZ3RoRmlsZW5hbWUoZmlsZS5uYW1lKSkgPj0gMSl7XG5cdFx0XHRcdFx0XHRcdG5ldyBOb3RpY2UoYCR7cG9pbnRzTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydpbmxpbmstY2xhc3MnXSwgcmF0ZUxlbmd0aEZpbGVuYW1lKGZpbGUubmFtZSkpfSBQb2ludHMgcmVjZWl2ZWRgKVxuXHRcdFx0XHRcdFx0XHR0aGlzLmdpdmVTdGF0dXNQb2ludHModGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSxwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ2lubGluay1jbGFzcyddLCByYXRlTGVuZ3RoRmlsZW5hbWUoZmlsZS5uYW1lKSkpXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0IFx0ZnJvbnRtYXR0ZXJbJ2lubGluay1jbGFzcyddID0gcmF0ZURpcmVjdGlvbihmcm9udG1hdHRlclsnaW5saW5rLWNsYXNzJ10sIGlubGlua0NsYXNzKVxuXHRcdFx0XHRcdH0pO1x0XG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRpZiAoZT8ubmFtZSA9PT0gJ1lBTUxQYXJzZUVycm9yJykge1xuXHRcdFx0XHRcdCAgY29uc3QgZXJyb3JNZXNzYWdlID0gYFVwZGF0ZSBpbmxpbmsgbWFqdXJpdHkgZmFpbGVkXG5cdFx0XHQgIE1hbGZvcm1lZCBmcm9udGFtdHRlciBvbiB0aGlzIGZpbGUgOiAke2ZpbGUucGF0aH1cblx0XHRcdCAgXG5cdFx0XHQgICR7ZS5tZXNzYWdlfWA7XG5cdFx0XHRcdFx0ICBuZXcgTm90aWNlKGVycm9yTWVzc2FnZSwgNDAwMCk7XG5cdFx0XHRcdFx0ICBjb25zb2xlLmVycm9yKGVycm9yTWVzc2FnZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQgIH1cblx0XHRcdFx0ICBhd2FpdCB0aGlzLnVwZGF0ZVN0YXR1c0JhcihzdGF0dXNiYXJHYW1pZmljYXRpb24pXG5cdFx0XHR9LFxuXHRcdH0pO1xuXG5cblx0XHQvLyBjb21tYW5kOiByYXRlIGxlbmd0aCBvZiBmaWxlIGNvbnRlbnRcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdyYXRlLWZpbGVubGVuZ3RoJyxcblx0XHRcdG5hbWU6ICdSYXRlIExlbmd0aCBvZiBmaWxlJyxcblx0XHRcdGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGZpbGU6IFRGaWxlICA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0XHRcdGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuXHRcdFx0XHQvLyBHZXQgdGhlIGZ1bGwgdGV4dCBvZiB0aGUgZmlsZVxuXHRcdFx0XHRjb25zdCBmaWxlQ29udGVudHMgPSBhY3RpdmVWaWV3LmVkaXRvci5nZXRWYWx1ZSgpO1xuXHRcdFx0XHRjb25zdCBmaWxlTmFtZSA9IGFjdGl2ZVZpZXcuZmlsZS5iYXNlbmFtZTtcblx0XHRcdFx0Y29uc3QgZmlsZUxlbmd0aCA9IGNvdW50Q2hhcmFjdGVyc0luQWN0aXZlRmlsZShmaWxlQ29udGVudHMsIGZpbGVOYW1lKVxuXHRcdFx0XHRcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLmFwcC5maWxlTWFuYWdlci5wcm9jZXNzRnJvbnRNYXR0ZXIoZmlsZSwgKGZyb250bWF0dGVyKSA9PiB7XG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdjdXJyZW50IG1ldGFkYXRhOiAnLCBmcm9udG1hdHRlcik7XG5cdFx0XHRcdFx0XHRjb25zdCBwb2ludHNNYWp1cml0eSA9IDEwO1xuXHRcdFx0XHRcdFx0aWYgKHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ25vdGUtbGVuZ3RoLWNsYXNzJ10sIHJhdGVMZW5ndGhGaWxlbmFtZShmaWxlLm5hbWUpKSA+PSAxKXtcblx0XHRcdFx0XHRcdFx0bmV3IE5vdGljZShgJHtwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ25vdGUtbGVuZ3RoLWNsYXNzJ10sIHJhdGVMZW5ndGhGaWxlbmFtZShmaWxlLm5hbWUpKX0gUG9pbnRzIHJlY2VpdmVkYClcblx0XHRcdFx0XHRcdFx0dGhpcy5naXZlU3RhdHVzUG9pbnRzKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUscG9pbnRzTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydub3RlLWxlbmd0aC1jbGFzcyddLCByYXRlTGVuZ3RoRmlsZW5hbWUoZmlsZS5uYW1lKSkpXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ICBcdGZyb250bWF0dGVyWydub3RlLWxlbmd0aC1jbGFzcyddID0gcmF0ZURpcmVjdGlvbihmcm9udG1hdHRlclsnbm90ZS1sZW5ndGgtY2xhc3MnXSwgZmlsZUxlbmd0aClcblx0XHRcdFx0XHR9KTtcdFxuXHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0aWYgKGU/Lm5hbWUgPT09ICdZQU1MUGFyc2VFcnJvcicpIHtcblx0XHRcdFx0XHQgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBVcGRhdGUgaW5saW5rIG1hanVyaXR5IGZhaWxlZFxuXHRcdFx0ICBNYWxmb3JtZWQgZnJvbnRhbXR0ZXIgb24gdGhpcyBmaWxlIDogJHtmaWxlLnBhdGh9XG5cdFx0XHQgIFxuXHRcdFx0ICAke2UubWVzc2FnZX1gO1xuXHRcdFx0XHRcdCAgbmV3IE5vdGljZShlcnJvck1lc3NhZ2UsIDQwMDApO1xuXHRcdFx0XHRcdCAgY29uc29sZS5lcnJvcihlcnJvck1lc3NhZ2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRhd2FpdCB0aGlzLnVwZGF0ZVN0YXR1c0JhcihzdGF0dXNiYXJHYW1pZmljYXRpb24pXG5cdFx0XHR9LFxuXHRcdH0pO1xuXG5cdFx0Ly8gY29tbWFuZDogcmF0ZSB0aXRsZSBsZW5ndGhcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdyYXRlLXRpdGVsbGVuZ3RoJyxcblx0XHRcdG5hbWU6ICdSYXRlIExlbmd0aCBvZiB0aXRlbCcsXG5cdFx0XHRjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRjb25zdCBmaWxlOiBURmlsZSAgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuXHRcdFx0XHRjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblx0XHRcdFx0Ly8gR2V0IHRoZSBmdWxsIHRleHQgb2YgdGhlIGZpbGVcblx0XHRcdFx0Y29uc3QgZmlsZUNvbnRlbnRzID0gYWN0aXZlVmlldy5lZGl0b3IuZ2V0VmFsdWUoKTtcblx0XHRcdFx0Y29uc3QgZmlsZU5hbWUgPSBhY3RpdmVWaWV3LmZpbGUuYmFzZW5hbWU7XG5cdFx0XHRcdGNvbnN0IGZpbGVOYW1lUmF0ZSA9IHJhdGVMZW5ndGhGaWxlbmFtZShmaWxlLm5hbWUpXG5cdFx0XHRcdFxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnByb2Nlc3NGcm9udE1hdHRlcihmaWxlLCAoZnJvbnRtYXR0ZXIpID0+IHtcblx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coJ2N1cnJlbnQgbWV0YWRhdGE6ICcsIGZyb250bWF0dGVyKTtcblx0XHRcdFx0XHRcdGNvbnN0IHBvaW50c01hanVyaXR5ID0gMTA7XG5cdFx0XHRcdFx0XHRpZiAocmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsndGl0bGUtY2xhc3MnXSwgcmF0ZUxlbmd0aEZpbGVuYW1lKGZpbGUubmFtZSkpID49IDEpe1xuXHRcdFx0XHRcdFx0XHRuZXcgTm90aWNlKGAke3BvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsndGl0bGUtY2xhc3MnXSwgcmF0ZUxlbmd0aEZpbGVuYW1lKGZpbGUubmFtZSkpfSBQb2ludHMgcmVjZWl2ZWRgKVxuXHRcdFx0XHRcdFx0XHR0aGlzLmdpdmVTdGF0dXNQb2ludHModGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSxwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ3RpdGxlLWNsYXNzJ10sIHJhdGVMZW5ndGhGaWxlbmFtZShmaWxlLm5hbWUpKSlcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQgIFx0ZnJvbnRtYXR0ZXJbJ3RpdGxlLWNsYXNzJ10gPSByYXRlRGlyZWN0aW9uKGZyb250bWF0dGVyWyd0aXRsZS1jbGFzcyddLCBmaWxlTmFtZVJhdGUpXG5cdFx0XHRcdFx0fSk7XHRcblx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdGlmIChlPy5uYW1lID09PSAnWUFNTFBhcnNlRXJyb3InKSB7XG5cdFx0XHRcdFx0ICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgVXBkYXRlIHRpbGUgbGVuZ3RoIG1hanVyaXR5IGZhaWxlZFxuXHRcdFx0ICBNYWxmb3JtZWQgZnJvbnRhbXR0ZXIgb24gdGhpcyBmaWxlIDogJHtmaWxlLnBhdGh9XG5cdFx0XHQgIFxuXHRcdFx0ICAke2UubWVzc2FnZX1gO1xuXHRcdFx0XHRcdCAgbmV3IE5vdGljZShlcnJvck1lc3NhZ2UsIDQwMDApO1xuXHRcdFx0XHRcdCAgY29uc29sZS5lcnJvcihlcnJvck1lc3NhZ2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRhd2FpdCB0aGlzLnVwZGF0ZVN0YXR1c0JhcihzdGF0dXNiYXJHYW1pZmljYXRpb24pXG5cdFx0XHR9LFxuXHRcdH0pO1xuXHRcdCovXG5cdFx0XG5cdFx0Ly8gY29tbWFuZDogcmF0ZSBub3RlIG1hdHVyaXR5XG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAncmF0ZS1ub3RlLW1hdHVyaXR5Jyxcblx0XHRcdG5hbWU6ICdSYXRlIG5vdGUgbWFqdXJpdHknLFxuXHRcdFx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IHtcblx0XHRcdFx0dGhpcy5jYWxjdWxhdGVOb3RlTWFqdXJpdHkoc3RhdHVzYmFyR2FtaWZpY2F0aW9uKTtcblx0XHRcdH0sXG5cdFx0fSk7XG5cdFx0XG5cblx0XHQvLyBjb21tYW5kOiBjaGFuZ2UgcHJvZ3Jlc3NpdmUgc3VtbWFyemF0aW9uIHN5bWJvbHNcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdjaGFuZ2UtcHJvZ3Jlc3NpdmUtZm9ybWF0dGluZycsXG5cdFx0XHRuYW1lOiAndG9nZ2xlIHByb2dyZXNzaXZlIHN1bW1hcml6YXRpb24gZm9ybWF0dGluZycsXG5cdFx0XHRjYWxsYmFjazogYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRyZXBsYWNlRm9ybWF0U3RyaW5ncyh0aGlzLnNldHRpbmdzLnByb2dyZXNzaXZlU3VtTGF5ZXIyLCB0aGlzLnNldHRpbmdzLnByb2dyZXNzaXZlU3VtTGF5ZXIzKTtcblx0XHRcdH0sXG5cdFx0fSk7XG5cblx0XHRcblx0XHRcblxuXHR9XG4gIFxuXG5cdG9udW5sb2FkKCkge1xuXHRcdGNvbnNvbGUubG9nKCdvYnNpZGlhbi1wa20tZ2FtaWZpY2F0aW9uIHVubG9hZGVkIScpO1xuXHR9XG5cblx0YXN5bmMgY2FsY3VsYXRlTm90ZU1hanVyaXR5KHN0YXR1c2JhckdhbWlmaWNhdGlvbjogSFRNTFNwYW5FbGVtZW50KXtcblx0XHRjb25zdCBmaWxlOiBURmlsZSB8IG51bGw9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0XHRpZiAoZmlsZSA9PSBudWxsKSB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ2dvdCBubyBmaWxlLCBwcm9wYWJseSBub25lIGlzIGFjdGl2ZScpXG5cdFx0XHR9XG5cdFx0XG5cdFx0XHQvLyBnZXQgZmlsZSBjb250ZW50IGxlbmd0aFxuXHRcdFx0Y29uc3QgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG5cdFx0XHRjb25zdCBmaWxlQ29udGVudHMgPSBhY3RpdmVWaWV3Py5lZGl0b3IuZ2V0VmFsdWUoKTtcblx0XHRcdGNvbnN0IGZpbGVOYW1lID0gYWN0aXZlVmlldz8uZmlsZS5iYXNlbmFtZTtcblxuXHRcdFx0bGV0IHJhdGVGaWxlTGVuZ3RoOiBudW1iZXIgPSAwO1xuXHRcdFx0bGV0IGZpbGVMZW5ndGg6IG51bWJlciA9IDA7XG5cdFx0XHRsZXQgcmF0ZVByb2dyZXNzaXZlU3VtOiBudW1iZXIgPSAwO1xuXG5cdFx0XHRpZiAoZmlsZUNvbnRlbnRzICE9PSB1bmRlZmluZWQgJiYgZmlsZU5hbWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRmaWxlTGVuZ3RoID0gY291bnRDaGFyYWN0ZXJzSW5BY3RpdmVGaWxlKGZpbGVDb250ZW50cywgZmlsZU5hbWUpO1xuXHRcdFx0XHRyYXRlRmlsZUxlbmd0aCA9IHJhdGVOb3RlTGVuZ3RoKGZpbGVMZW5ndGgpO1xuXG5cdFx0XHRcdC8vIENoZWNrIGlmIGZpbGVDb250ZW50cyBhbmQgZmlsZU5hbWUgYXJlIG5vdCBudWxsXG5cdFx0XHRcdGlmIChmaWxlQ29udGVudHMgIT09IG51bGwgJiYgZmlsZU5hbWUgIT09IG51bGwpIHtcblx0XHRcdFx0XHRjb25zdCB7IGNoYXJDb3VudCwgaGlnaGxpZ2h0ZWRDb3VudCwgYm9sZENvdW50IH0gPSBjb3VudExheWVyMkFuZExheWVyM0NoYXJhY3RlcnMoZmlsZUNvbnRlbnRzLCBmaWxlTmFtZSwgdGhpcy5zZXR0aW5ncy5wcm9ncmVzc2l2ZVN1bUxheWVyMiwgdGhpcy5zZXR0aW5ncy5wcm9ncmVzc2l2ZVN1bUxheWVyMyk7XG5cdFx0XHRcdFx0cmF0ZVByb2dyZXNzaXZlU3VtID0gcmF0ZVByb2dyZXNzaXZlU3VtbWFyaXphdGlvbihjaGFyQ291bnQsIGhpZ2hsaWdodGVkQ291bnQsIGJvbGRDb3VudCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0bGV0IGZpbGVOYW1lUmF0ZTogbnVtYmVyID0gMDtcblx0XHRcdC8vZ2V0IGlubGluayBjb3VudFxuXHRcdFx0bGV0IGlubGlua051bWJlciA9IDA7XG5cdFx0XHRsZXQgaW5saW5rQ2xhc3MgOiBudW1iZXIgPSAwO1xuXHRcdFx0Ly8gZ2V0IG91dGxpbmsgY291bnRcblx0XHRcdGxldCByYXRlT3V0IDogbnVtYmVyID0gMDtcblx0XHRcdFxuXHRcdFx0aWYgKGZpbGUgIT09IG51bGwpIHtcblx0XHRcdFx0Ly8gZ2V0IGZpbGUgbmFtZSBsZW5naHRcblx0XHRcdFx0ZmlsZU5hbWVSYXRlID0gcmF0ZUxlbmd0aEZpbGVuYW1lKGZpbGUubmFtZSA/PyAnJyk7XG5cdFx0XHRcdC8vIGdldCBpbmxpbmsgY291bnRcblx0XHRcdFx0aW5saW5rTnVtYmVyID0gY291bnRfaW5saW5rcyhmaWxlKTtcblx0XHRcdFx0aW5saW5rQ2xhc3MgPSByYXRlSW5saW5rcyhpbmxpbmtOdW1iZXIpLy8sIG51bUFsbEZpbGVzKVxuXHRcdFx0XHQvLyBnZXQgb3V0bGluayBjb3VudFxuXHRcdFx0XHRyYXRlT3V0ID0gcmF0ZU91dGxpbmtzKGdldE51bWJlck9mT3V0bGlua3MoZmlsZSkpO1xuXHRcdFx0XG5cdFx0XHRcblx0XHRcdFx0XHRcdFxuXG5cdFx0XHRcdGNvbnN0IG5vdGVNYWp1cml0eSA9IHJhdGVMZXZlbE9mTWF0dXJpdHkocmF0ZUZpbGVMZW5ndGgsIGZpbGVOYW1lUmF0ZSwgaW5saW5rQ2xhc3MsIHJhdGVPdXQsIHJhdGVQcm9ncmVzc2l2ZVN1bSk7XG5cblx0XHRcdFx0XG5cdFx0XHRcdFxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnByb2Nlc3NGcm9udE1hdHRlcihmaWxlLCAoZnJvbnRtYXR0ZXIpID0+IHtcblx0XHRcdFx0XHRcdGlmIChmcm9udG1hdHRlcikge1xuXHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coJ2N1cnJlbnQgbWV0YWRhdGE6ICcsIGZyb250bWF0dGVyKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Ly8gU3RhdHVzIFBvaW50c1xuXHRcdFx0XHRcdFx0Y29uc3QgcG9pbnRzTm90ZU1hanVyaXR5ID0gMTAwO1xuXHRcdFx0XHRcdFx0Y29uc3QgcG9pbnRzTWFqdXJpdHkgPSAxMDtcblx0XHRcdFx0XHRcdGxldCBwb2ludHNSZWNlaXZlZCA9IDA7IC8vIHRvIGhhdmUgb25lIG1lc3NhZ2UgYXQgdGhlIGVuZCBob3cgbWFueSBwb2ludHMgcmVjZWl2ZWRcblx0XHRcdFx0XHRcdC8vY29uc29sZS5sb2coYHJhdGUgZGlyZWN0aW9uOiAke3JhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ25vdGUtbWF0dXJpdHknXSwgbm90ZU1hanVyaXR5KX1gKVxuXHRcdFx0XHRcdFx0aWYgKHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ25vdGUtbWF0dXJpdHknXSwgbm90ZU1hanVyaXR5KSA+PSAxKXtcblx0XHRcdFx0XHRcdFx0Ly9uZXcgTm90aWNlKGAke3BvaW50c05vdGVNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydub3RlLW1hdHVyaXR5J10sIG5vdGVNYWp1cml0eSl9IFBvaW50cyByZWNlaXZlZGApXG5cdFx0XHRcdFx0XHRcdHBvaW50c1JlY2VpdmVkICs9IHBvaW50c05vdGVNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydub3RlLW1hdHVyaXR5J10sIG5vdGVNYWp1cml0eSlcblx0XHRcdFx0XHRcdFx0Y29uc3QgbmV3TGV2ZWwgPSB0aGlzLmdpdmVTdGF0dXNQb2ludHModGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSxwb2ludHNOb3RlTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhcImZyb250bWF0dGVyWydub3RlLW1hdHVyaXR5J11cIiwgbm90ZU1hanVyaXR5KSlcblx0XHRcdFx0XHRcdFx0dGhpcy5kZWNpc2lvbklmQmFkZ2UobmV3TGV2ZWwpXG5cblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoJ25vdGUtbWF0dXJpdHknIGluIGZyb250bWF0dGVyID09IGZhbHNlKXtcblx0XHRcdFx0XHRcdFx0Ly9uZXcgTm90aWNlKGAke3BvaW50c05vdGVNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCBub3RlTWFqdXJpdHkpfSBQb2ludHMgcmVjZWl2ZWRgKVxuXHRcdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNOb3RlTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhcIjBcIiwgbm90ZU1hanVyaXR5KVxuXHRcdFx0XHRcdFx0XHRjb25zdCBuZXdMZXZlbCA9IHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyh0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lLHBvaW50c05vdGVNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCBub3RlTWFqdXJpdHkpKVxuXHRcdFx0XHRcdFx0XHR0aGlzLmRlY2lzaW9uSWZCYWRnZShuZXdMZXZlbClcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ3RpdGxlLWNsYXNzJ10sIGZpbGVOYW1lUmF0ZSkgPj0gMSAmJiAndGl0bGUtY2xhc3MnIGluIGZyb250bWF0dGVyKXtcblx0XHRcdFx0XHRcdFx0Ly9uZXcgTm90aWNlKGAke3BvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsndGl0bGUtY2xhc3MnXSwgZmlsZU5hbWVSYXRlKX0gUG9pbnRzIHJlY2VpdmVkYClcblx0XHRcdFx0XHRcdFx0cG9pbnRzUmVjZWl2ZWQgKz0gcG9pbnRzTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsndGl0bGUtY2xhc3MnXSwgZmlsZU5hbWVSYXRlKVxuXHRcdFx0XHRcdFx0XHRjb25zdCBuZXdMZXZlbCA9IHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyh0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lLHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsndGl0bGUtY2xhc3MnXSwgZmlsZU5hbWVSYXRlKSlcblx0XHRcdFx0XHRcdFx0dGhpcy5kZWNpc2lvbklmQmFkZ2UobmV3TGV2ZWwpXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCd0aXRsZS1jbGFzcycgaW4gZnJvbnRtYXR0ZXIgPT0gZmFsc2Upe1xuXHRcdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCBmaWxlTmFtZVJhdGUpXG5cdFx0XHRcdFx0XHRcdGNvbnN0IG5ld0xldmVsID0gdGhpcy5naXZlU3RhdHVzUG9pbnRzKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUscG9pbnRzTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhcIjBcIiwgZmlsZU5hbWVSYXRlKSlcblx0XHRcdFx0XHRcdFx0dGhpcy5kZWNpc2lvbklmQmFkZ2UobmV3TGV2ZWwpXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmIChyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydub3RlLWxlbmd0aC1jbGFzcyddLCByYXRlRmlsZUxlbmd0aCkgPj0gMSl7XG5cdFx0XHRcdFx0XHRcdC8vbmV3IE5vdGljZShgJHtwb2ludHNNYWp1cml0eSAqIHJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ25vdGUtbGVuZ3RoLWNsYXNzJ10sIHJhdGVGaWxlTGVuZ3RoKX0gUG9pbnRzIHJlY2VpdmVkYClcblx0XHRcdFx0XHRcdFx0cG9pbnRzUmVjZWl2ZWQgKz0gcG9pbnRzTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnbm90ZS1sZW5ndGgtY2xhc3MnXSwgcmF0ZUZpbGVMZW5ndGgpXG5cdFx0XHRcdFx0XHRcdGNvbnN0IG5ld0xldmVsID0gdGhpcy5naXZlU3RhdHVzUG9pbnRzKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUscG9pbnRzTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydub3RlLWxlbmd0aC1jbGFzcyddLCByYXRlRmlsZUxlbmd0aCkpXG5cdFx0XHRcdFx0XHRcdHRoaXMuZGVjaXNpb25JZkJhZGdlKG5ld0xldmVsKVxuXHRcdFx0XHRcdFx0fWVsc2UgaWYgKCdub3RlLWxlbmd0aC1jbGFzcycgaW4gZnJvbnRtYXR0ZXIgPT0gZmFsc2Upe1xuXHRcdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCByYXRlRmlsZUxlbmd0aClcblx0XHRcdFx0XHRcdFx0Y29uc3QgbmV3TGV2ZWwgPSB0aGlzLmdpdmVTdGF0dXNQb2ludHModGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSxwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCByYXRlRmlsZUxlbmd0aCkpXG5cdFx0XHRcdFx0XHRcdHRoaXMuZGVjaXNpb25JZkJhZGdlKG5ld0xldmVsKVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAocmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnaW5saW5rLWNsYXNzJ10sIGlubGlua0NsYXNzKSA+PSAxKXtcblx0XHRcdFx0XHRcdFx0Ly9uZXcgTm90aWNlKGAke3BvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnaW5saW5rLWNsYXNzJ10sIGlubGlua0NsYXNzKX0gUG9pbnRzIHJlY2VpdmVkYClcblx0XHRcdFx0XHRcdFx0cG9pbnRzUmVjZWl2ZWQgKz0gcG9pbnRzTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnaW5saW5rLWNsYXNzJ10sIGlubGlua0NsYXNzKVxuXHRcdFx0XHRcdFx0XHRjb25zdCBuZXdMZXZlbCA9IHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyh0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lLHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnaW5saW5rLWNsYXNzJ10sIGlubGlua0NsYXNzKSlcblx0XHRcdFx0XHRcdFx0dGhpcy5kZWNpc2lvbklmQmFkZ2UobmV3TGV2ZWwpXG5cdFx0XHRcdFx0XHR9ZWxzZSBpZiAoJ2lubGluay1jbGFzcycgaW4gZnJvbnRtYXR0ZXIgPT0gZmFsc2Upe1xuXHRcdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCBpbmxpbmtDbGFzcylcblx0XHRcdFx0XHRcdFx0Y29uc3QgbmV3TGV2ZWwgPSB0aGlzLmdpdmVTdGF0dXNQb2ludHModGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSxwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCBpbmxpbmtDbGFzcykpXG5cdFx0XHRcdFx0XHRcdHRoaXMuZGVjaXNpb25JZkJhZGdlKG5ld0xldmVsKVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAocmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnb3V0bGluay1jbGFzcyddLCByYXRlT3V0KSA+PSAxKXtcblx0XHRcdFx0XHRcdFx0Ly9uZXcgTm90aWNlKGAke3BvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnb3V0bGluay1jbGFzcyddLCByYXRlT3V0KX0gUG9pbnRzIHJlY2VpdmVkYClcblx0XHRcdFx0XHRcdFx0cG9pbnRzUmVjZWl2ZWQgKz0gcG9pbnRzTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnb3V0bGluay1jbGFzcyddLCByYXRlT3V0KVxuXHRcdFx0XHRcdFx0XHRjb25zdCBuZXdMZXZlbCA9IHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyh0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lLHBvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsnb3V0bGluay1jbGFzcyddLCByYXRlT3V0KSlcblx0XHRcdFx0XHRcdFx0dGhpcy5kZWNpc2lvbklmQmFkZ2UobmV3TGV2ZWwpXG5cdFx0XHRcdFx0XHR9ZWxzZSBpZiAoJ291dGxpbmstY2xhc3MnIGluIGZyb250bWF0dGVyID09IGZhbHNlKXtcblx0XHRcdFx0XHRcdFx0cG9pbnRzUmVjZWl2ZWQgKz0gcG9pbnRzTWFqdXJpdHkqcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhcIjBcIiwgcmF0ZU91dClcblx0XHRcdFx0XHRcdFx0Y29uc3QgbmV3TGV2ZWwgPSB0aGlzLmdpdmVTdGF0dXNQb2ludHModGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSxwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKFwiMFwiLCByYXRlT3V0KSlcblx0XHRcdFx0XHRcdFx0dGhpcy5kZWNpc2lvbklmQmFkZ2UobmV3TGV2ZWwpXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmIChyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydwcm9ncmVzc2l2ZS1zdW1hcml6YXRpb24tbWF0dXJpdHknXSwgcmF0ZVByb2dyZXNzaXZlU3VtKSA+PSAxKXtcblx0XHRcdFx0XHRcdFx0Ly9uZXcgTm90aWNlKGAke3BvaW50c01hanVyaXR5ICogcmF0ZURpcmVjdGlvbkZvclN0YXR1c1BvaW50cyhmcm9udG1hdHRlclsncHJvZ3Jlc3NpdmUtc3VtYXJpemF0aW9uLW1hdHVyaXR5J10sIHJhdGVQcm9ncmVzc2l2ZVN1bSl9IFBvaW50cyByZWNlaXZlZGApXG5cdFx0XHRcdFx0XHRcdHBvaW50c1JlY2VpdmVkICs9IHBvaW50c01hanVyaXR5KnJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoZnJvbnRtYXR0ZXJbJ3Byb2dyZXNzaXZlLXN1bWFyaXphdGlvbi1tYXR1cml0eSddLCByYXRlUHJvZ3Jlc3NpdmVTdW0pXG5cdFx0XHRcdFx0XHRcdGNvbnN0IG5ld0xldmVsID0gdGhpcy5naXZlU3RhdHVzUG9pbnRzKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUscG9pbnRzTWFqdXJpdHkgKiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydwcm9ncmVzc2l2ZS1zdW1hcml6YXRpb24tbWF0dXJpdHknXSwgcmF0ZVByb2dyZXNzaXZlU3VtKSlcblx0XHRcdFx0XHRcdFx0dGhpcy5kZWNpc2lvbklmQmFkZ2UobmV3TGV2ZWwpXG5cdFx0XHRcdFx0XHR9ZWxzZSBpZiAoJ3Byb2dyZXNzaXZlLXN1bWFyaXphdGlvbi1tYXR1cml0eScgaW4gZnJvbnRtYXR0ZXIgPT0gZmFsc2Upe1xuXHRcdFx0XHRcdFx0XHRwb2ludHNSZWNlaXZlZCArPSBwb2ludHNNYWp1cml0eSpyYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKGZyb250bWF0dGVyWydwcm9ncmVzc2l2ZS1zdW1hcml6YXRpb24tbWF0dXJpdHknXSwgcmF0ZVByb2dyZXNzaXZlU3VtKVxuXHRcdFx0XHRcdFx0XHRjb25zdCBuZXdMZXZlbCA9IHRoaXMuZ2l2ZVN0YXR1c1BvaW50cyh0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lLHBvaW50c01hanVyaXR5KnJhdGVEaXJlY3Rpb25Gb3JTdGF0dXNQb2ludHMoXCIwXCIsIHJhdGVQcm9ncmVzc2l2ZVN1bSkpXG5cdFx0XHRcdFx0XHRcdHRoaXMuZGVjaXNpb25JZkJhZGdlKG5ld0xldmVsKVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAocG9pbnRzUmVjZWl2ZWQgPiAwKXtcblx0XHRcdFx0XHRcdFx0bmV3IE5vdGljZShgJHtwb2ludHNSZWNlaXZlZCAqIHRoaXMuc2V0dGluZ3MuYmFkZ2VCb29zdGVyRmFjdG9yfSBQb2ludHMgcmVjZWl2ZWRgKVxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhgJHtwb2ludHNSZWNlaXZlZH0gUG9pbnRzIHJlY2VpdmVkYClcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0ZnJvbnRtYXR0ZXJbJ3RpdGxlLWNsYXNzJ10gPSByYXRlRGlyZWN0aW9uKGZyb250bWF0dGVyWyd0aXRsZS1jbGFzcyddLCBmaWxlTmFtZVJhdGUpXG5cdFx0XHRcdFx0XHRmcm9udG1hdHRlclsnbm90ZS1sZW5ndGgtY2xhc3MnXSA9IHJhdGVEaXJlY3Rpb24oZnJvbnRtYXR0ZXJbJ25vdGUtbGVuZ3RoLWNsYXNzJ10sIHJhdGVGaWxlTGVuZ3RoKVxuXHRcdFx0XHRcdFx0ZnJvbnRtYXR0ZXJbJ2lubGluay1jbGFzcyddID0gcmF0ZURpcmVjdGlvbihmcm9udG1hdHRlclsnaW5saW5rLWNsYXNzJ10sIGlubGlua0NsYXNzKVxuXHRcdFx0XHRcdFx0ZnJvbnRtYXR0ZXJbJ291dGxpbmstY2xhc3MnXSA9IHJhdGVEaXJlY3Rpb24oZnJvbnRtYXR0ZXJbJ291dGxpbmstY2xhc3MnXSwgcmF0ZU91dClcblx0XHRcdFx0XHRcdGZyb250bWF0dGVyWydwcm9ncmVzc2l2ZS1zdW1hcml6YXRpb24tbWF0dXJpdHknXSA9IHJhdGVEaXJlY3Rpb24oZnJvbnRtYXR0ZXJbJ3Byb2dyZXNzaXZlLXN1bWFyaXphdGlvbi1tYXR1cml0eSddLCByYXRlUHJvZ3Jlc3NpdmVTdW0pXG5cdFx0XHRcdFx0XHRmcm9udG1hdHRlclsnbm90ZS1tYXR1cml0eSddID0gcmF0ZURpcmVjdGlvbihmcm9udG1hdHRlclsnbm90ZS1tYXR1cml0eSddLCBub3RlTWFqdXJpdHkpXG5cblx0XHRcdFx0XHRcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRcdCk7XHRcblx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdGlmIChlPy5uYW1lID09PSAnWUFNTFBhcnNlRXJyb3InKSB7XG5cdFx0XHRcdFx0Y29uc3QgZXJyb3JNZXNzYWdlID0gYFVwZGF0ZSBtYWp1cml0eXMgZmFpbGVkIE1hbGZvcm1lZCBmcm9udGFtdHRlciBvbiB0aGlzIGZpbGUgOiAke2ZpbGUucGF0aH0gJHtlLm1lc3NhZ2V9YDtcblx0XHRcdFx0XHRuZXcgTm90aWNlKGVycm9yTWVzc2FnZSwgNDAwMCk7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihlcnJvck1lc3NhZ2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRcblxuXHRcdFx0XHRjb25zb2xlLmxvZyhgdGl0bGUtY2xhc3M6ICR7ZmlsZU5hbWVSYXRlfWApO1xuXHRcdFx0XHRjb25zb2xlLmxvZyhgbm90ZS1sZW5ndGgtY2xhc3M6ICR7cmF0ZUZpbGVMZW5ndGh9YCk7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGBpbmxpbmstY2xhc3M6ICR7aW5saW5rQ2xhc3N9YCk7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGBvdXRsaW5rLWNsYXNzOiAke3JhdGVPdXR9YCk7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGByYXRlUHJvZ3Jlc3NpdmVTdW06ICR7cmF0ZVByb2dyZXNzaXZlU3VtfWApO1xuXHRcdFx0XHRjb25zb2xlLmxvZyhgbm90ZS1tYXR1cml0eTogJHtub3RlTWFqdXJpdHl9YCk7XG5cblx0XHRcdFx0bmV3IE5vdGljZSgnbm90ZSBtYWp1cml0eSB1cGRhdGVkIScpO1xuXHRcdFx0XHRhd2FpdCB0aGlzLnVwZGF0ZVN0YXR1c0JhcihzdGF0dXNiYXJHYW1pZmljYXRpb24pXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdmaWxlIHdhcyBub3QgZm91bmQgdG8gY2FsY3VsYXRlIG1hanVyaXRpZXMuIE1ha2Ugc3VyZSBvbmUgaXMgYWN0aXZlLicpXG5cdFx0XHR9XG5cdH1cblxuXG5cblx0YXN5bmMgdXBkYXRlU3RhdHVzQmFyKHN0YXR1c2JhcjogSFRNTFNwYW5FbGVtZW50KXtcblx0XHQvKlxuXHRcdHdyaXRlcyBjdXJyZW50IGxldmVsIHVuZCBjYWxjdWxhdGVzIHdpdGggMTAgdGlja3MgcHJlY2lzaW9uIGEgcHJvZ3Jlc3NiYXIuXG5cdFx0LS0tXG5cdFx0YWxwaGE6IHN0YXR1cyBwb2ludHMgdG8gcmVhY2ggQ1VSUkVOVCBsZXZlbCB8IGxldmVsLnBvaW50c1xuXHRcdGJldGE6IHN0YXR1cyBwb2ludHMgdG8gcmVhY2ggTkVYVCBsZXZlbCB8IGxldmVsLnBvaW50c05leHRcblx0XHRnYW1tYTogY3VycmVudCBzdGF0dXMgcG9pbnRzIHwgc2V0dGluZ3Muc3RhdHVzUG9pbnRzXG5cdFx0cHJvemVudCA9IChnYW1tYSAtIGFscGhhKSAvIChiZXRhIC0gYWxwaGEpICogMTAwJVxuXHRcdCovXG5cblx0XHRjb25zdCBsZXZlbCA9IGdldExldmVsRm9yUG9pbnRzKHRoaXMuc2V0dGluZ3Muc3RhdHVzUG9pbnRzKVxuXHRcdGNvbnN0IHByb2dyZXNzYmFyUGVyY2VudCA9ICh0aGlzLnNldHRpbmdzLnN0YXR1c1BvaW50cyAtIGxldmVsLnBvaW50cykvKGxldmVsLnBvaW50c05leHQgLSBsZXZlbC5wb2ludHMpKjEwMDtcblx0XHRjb25zdCBjaGFyTnVtUHJvZ3Jlc3NiYXIgPSAxMFxuXHRcdGxldCBiYWxrZW4gPSBNYXRoLnJvdW5kKHByb2dyZXNzYmFyUGVyY2VudCAvIGNoYXJOdW1Qcm9ncmVzc2Jhcilcblx0XHRsZXQgcHJvZ3Jlc3NiYXIgPSAnJ1xuXHRcdGZvciAobGV0IGk9MTsgaSA8PSBjaGFyTnVtUHJvZ3Jlc3NiYXI7IGkrKyl7XG5cdFx0XHRpZiAoaSA8PSBiYWxrZW4pe1xuXHRcdFx0XHRwcm9ncmVzc2JhciArPSAnPSdcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHByb2dyZXNzYmFyICs9ICctJ1xuXHRcdFx0fVxuXHRcdH1cblx0XHRzdGF0dXNiYXIuc2V0VGV4dChgXHVEODNDXHVERkIyfGx2bDogJHt0aGlzLnNldHRpbmdzLnN0YXR1c0xldmVsfSB8ICR7cHJvZ3Jlc3NiYXJ9YClcblx0fVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdFNldHRpbmdzLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuXHRcdGNvbnNvbGUubG9nKCdsb2FkU2V0dGluZ3MoKScpXG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0fVx0XG5cblx0YXN5bmMgZ2V0Q3JlYXRpb25UaW1lKGZpbGU6IFRGaWxlKTogUHJvbWlzZTxEYXRlPiB7XG5cdFx0Y29uc3QgZmlsZVBhdGggPSBwYXRoLmpvaW4odGhpcy5hcHAudmF1bHQuZ2V0UmVzb3VyY2VQYXRoKGZpbGUpKTsgLy8gcGF0aC5qb2luKHRoaXMub2JzaWRpYW4udmF1bHQucGF0aCwgZmlsZSk7XG5cdFx0Y29uc3QgY3JlYXRpb25UaW1lID0gZnMuc3RhdFN5bmMoZmlsZVBhdGgpLmN0aW1lO1xuXHRcdHJldHVybiBuZXcgRGF0ZShjcmVhdGlvblRpbWUpO1xuXHQgIH0gIFxuXHQgIFxuXHRhc3luYyBnaXZlU3RhdHVzUG9pbnRzKGF2YXRhclBhZ2VOYW1lOiBzdHJpbmcsIHBvaW50c1RvQWRkOiBudW1iZXIpOiBQcm9taXNlPGJvb2xlYW4+e1xuXHRcdGNvbnN0IGV4aXN0aW5nRmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoYCR7YXZhdGFyUGFnZU5hbWV9Lm1kYCk7XG5cdFx0aWYgKGV4aXN0aW5nRmlsZSA9PSBudWxsKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhgRmlsZSAke2F2YXRhclBhZ2VOYW1lfS5tZCBkb2VzIG5vdCBleGlzdGApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdGNvbnN0IGZpbGUgPSBleGlzdGluZ0ZpbGUgYXMgVEZpbGU7XG5cdFx0XG5cdFx0Ly8gYm9vc3RlciBGYWt0b3IgZm9yIFBvaW50c1xuXHRcdGxldCBib29zdGVyRmFjdG9yID0gMTtcblx0XHQvL2xvYWQgZnJvbSBzZXR0aW5ncyBpZiBib29zdGVyIGlzIGFrdGl2XG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MuYmFkZ2VCb29zdGVyU3RhdGUgPT0gdHJ1ZSl7XG5cdFx0XHRib29zdGVyRmFjdG9yID0gdGhpcy5zZXR0aW5ncy5iYWRnZUJvb3N0ZXJGYWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly9jb25zb2xlLmxvZyhgY3VycmVudCBzdGF0dXNQb2ludHM6ICR7dGhpcy5zZXR0aW5ncy5zdGF0dXNQb2ludHN9YClcblx0XHRjb25zdCBjb250ZW50ID0gYXdhaXQgYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG5cdFx0bGV0IHJlZmVyZW5jZTogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cdFx0bGV0IGVuZDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cdFx0bGV0IHN0YXJ0OiBudW1iZXIgfCBudWxsID0gbnVsbDtcblx0XG5cdFx0Y29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KFwiXFxuXCIpO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGxpbmUgPSBsaW5lc1tpXS50cmltKCk7XG5cdFx0XHRpZiAobGluZSA9PT0gXCJebGV2ZWxBbmRQb2ludHNcIikge1xuXHRcdFx0XHRpZiAocmVmZXJlbmNlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0cmVmZXJlbmNlID0gaTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyByZWFkIGN1cnJlbnQgUG9pbnRzIGZyb20gc2V0dGluZ3Ncblx0XHRjb25zdCBuZXdQb2ludHMgPSBwb2ludHNUb0FkZCAqIGJvb3N0ZXJGYWN0b3IgKyB0aGlzLnNldHRpbmdzLnN0YXR1c1BvaW50c1xuXHRcdFxuXHRcdC8vIHdyaXRlIHRvIHNldHRpbmdzIHZhbHVlXG5cdFx0dGhpcy5zZXR0aW5ncy5zdGF0dXNQb2ludHMgPSBuZXdQb2ludHNcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpXG5cdFx0XG5cdFx0Y29uc3QgbGV2ZWwgPSBnZXRMZXZlbEZvclBvaW50cyhuZXdQb2ludHMpO1xuXHRcdGxldCBuZXdMZXZlbCA9IDA7XG5cdFx0bGV0IG5leHRMZXZlbEF0ID0gdGhpcy5zZXR0aW5ncy54cEZvck5leHRMZXZlbDtcblx0XHRsZXQgcmVjZWl2ZUJhZGdlOiBib29sZWFuID0gZmFsc2Vcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5zdGF0dXNMZXZlbCA8IGxldmVsLmxldmVsKXtcblx0XHRcdC8vIExldmVsIFVwIGFyY2hpdmVkXG5cdFx0XHRuZXcgTm90aWNlKGBXaXRoICR7bmV3UG9pbnRzfSBwb2ludHMsIHRoZSBjdXJyZW50IGxldmVsIGlzICR7bGV2ZWwubGV2ZWx9LmApXG5cdFx0XHQvLyBjaGVjayBmaXJzdCBpZiB0aGlzIG1lYW5zIGEgbmV3IGJhZGdlXG5cdFx0XHRyZWNlaXZlQmFkZ2UgPSBjaGVja0lmUmVjZWl2ZUFCYWRnZSh0aGlzLnNldHRpbmdzLnN0YXR1c0xldmVsLCBsZXZlbC5sZXZlbClcblx0XHRcdHRoaXMuc2V0dGluZ3Muc3RhdHVzTGV2ZWwgPSBsZXZlbC5sZXZlbDtcblx0XHRcdG5ld0xldmVsID0gbGV2ZWwubGV2ZWw7XG5cdFx0XHRuZXh0TGV2ZWxBdCA9IGxldmVsLnBvaW50c05leHQ7XG5cdFx0XHR0aGlzLnNldHRpbmdzLnhwRm9yTmV4dExldmVsID0gbGV2ZWwucG9pbnRzTmV4dDtcblx0XHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncylcblx0XHR9XG5cblx0XHRjb25zdCBwcm9ncmVzc0JhckVuZCA9IG5leHRMZXZlbEF0IC0gbmV3UG9pbnRzO1xuXHRcdC8vY29uc29sZS5sb2coYG5ld1BvaW50czogJHtuZXdQb2ludHN9XFxubmV4dExldmVsQDogJHtuZXh0TGV2ZWxBdH1cXG5wcm9nbGVzc0JhckVuZDogJHtwcm9ncmVzc0JhckVuZH1gKVxuXHRcdGNvbnN0IG5ld1BvaW50c1N0cmluZyA9ICd8IExldmVsICB8ICcgKyBsZXZlbC5sZXZlbCArICcgfFxcbnwgUG9pbnRzIHwgJyArIG5ld1BvaW50cyArICcgICAgfFxcbl5sZXZlbEFuZFBvaW50c1xcblxcYFxcYFxcYGNoYXJ0XFxudHlwZTogYmFyXFxubGFiZWxzOiBbRXhwcmlyaWVuY2VdXFxuc2VyaWVzOlxcbiAgLSB0aXRsZTogcG9pbnRzIHJlYWNoZWRcXG4gICAgZGF0YTogWycgKyBuZXdQb2ludHMgKyAnXVxcbiAgLSB0aXRsZTogcG9pbnRzIHRvIGVhcm4gdG8gbGV2ZWwgdXBcXG4gICAgZGF0YTogWycgKyBwcm9ncmVzc0JhckVuZCArICddXFxueE1pbjogJyArIGxldmVsLnBvaW50cyArICdcXG54TWF4OiAnICsgbGV2ZWwucG9pbnRzTmV4dCArICdcXG50ZW5zaW9uOiAwLjJcXG53aWR0aDogNDAlXFxubGFiZWxDb2xvcnM6IGZhbHNlXFxuZmlsbDogZmFsc2VcXG5iZWdpbkF0WmVybzogZmFsc2VcXG5iZXN0Rml0OiBmYWxzZVxcbmJlc3RGaXRUaXRsZTogdW5kZWZpbmVkXFxuYmVzdEZpdE51bWJlcjogMFxcbnN0YWNrZWQ6IHRydWVcXG5pbmRleEF4aXM6IHlcXG54VGl0bGU6IFwicHJvZ3Jlc3NcIlxcbmxlZ2VuZDogZmFsc2VcXG5cXGBcXGBcXGAnXG5cdFx0aWYgKHJlZmVyZW5jZSAhPSBudWxsKXtcblx0XHRcdGVuZCA9IHJlZmVyZW5jZSArIDI0O1xuXHRcdFx0c3RhcnQgPSByZWZlcmVuY2UgLSAyO1xuXHRcdFx0Y29uc3QgbmV3TGluZXMgPSBbLi4ubGluZXMuc2xpY2UoMCwgc3RhcnQpLCBuZXdQb2ludHNTdHJpbmcsIC4uLmxpbmVzLnNsaWNlKGVuZCldO1xuXHRcdFx0YXdhaXQgYXBwLnZhdWx0Lm1vZGlmeShmaWxlLCBuZXdMaW5lcy5qb2luKFwiXFxuXCIpKTtcblx0XHR9XG5cdFx0Ly9jb25zb2xlLmxvZyhgbmV3TGV2ZWw6ICR7bmV3TGV2ZWx9XFxucG9pbnRzVG9BZGQ6ICR7cG9pbnRzVG9BZGQgKiBib29zdGVyRmFjdG9yfWApXG5cdFx0Ly9uZXcgTm90aWNlKGAke3BvaW50c1RvQWRkICogYm9vc3RlckZhY3Rvcn0gcG9pbnRzIHJlY2VpdmVkYClcblx0XHRyZXR1cm4gcmVjZWl2ZUJhZGdlXG5cdFx0XG5cdH0gIFxuXG5cblx0YXN5bmMgZ2l2ZUJhZGdlSW5Qcm9maWxlKGF2YXRhclBhZ2VOYW1lOiBzdHJpbmcsIGJhZGdlOiBCYWRnZSl7XG5cdFx0Y29uc3QgZXhpc3RpbmdGaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChgJHthdmF0YXJQYWdlTmFtZX0ubWRgKTtcblx0XHRpZiAoZXhpc3RpbmdGaWxlID09IG51bGwpIHtcblx0XHRcdGNvbnNvbGUubG9nKGBGaWxlICR7YXZhdGFyUGFnZU5hbWV9Lm1kIGRvZXMgbm90IGV4aXN0YCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0Y29uc3QgZmlsZSA9IGV4aXN0aW5nRmlsZSBhcyBURmlsZTtcblx0XG5cdFx0Y29uc3QgY29udGVudCA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGZpbGUpO1xuXHRcdGxldCByZWZlcmVuY2U6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXHRcdGxldCByZWZlcmVuY2UyOiBudW1iZXIgfCBudWxsID0gbnVsbDtcblx0XHRsZXQgZW5kOiBudW1iZXIgfCBudWxsID0gbnVsbDtcblx0XHRsZXQgc3RhcnQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXHRcdGxldCBlbmQyOiBudW1iZXIgfCBudWxsID0gbnVsbDtcblx0XHRsZXQgc3RhcnQyOiBudW1iZXIgfCBudWxsID0gbnVsbDtcblx0XG5cdFx0Y29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KFwiXFxuXCIpO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGxpbmUgPSBsaW5lc1tpXS50cmltKCk7XG5cdFx0XHRpZiAobGluZSA9PT0gXCIjIyMjIGFjaGlldmVkXCIpIHtcblx0XHRcdFx0aWYgKHJlZmVyZW5jZSA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdHJlZmVyZW5jZSA9IGk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChsaW5lID09PSBiYWRnZS5sZXZlbCArIFwiOiAqXCIgKyBiYWRnZS5uYW1lICsgXCIqXCIpe1xuXHRcdFx0XHRpZiAocmVmZXJlbmNlMiA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdHJlZmVyZW5jZTIgPSBpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChyZWZlcmVuY2UgIT0gbnVsbCAmJiByZWZlcmVuY2UyICE9IG51bGwpe1xuXHRcdFx0ZW5kID0gcmVmZXJlbmNlICsgMTtcblx0XHRcdHN0YXJ0ID0gcmVmZXJlbmNlICsgMTtcblx0XHRcdFxuXHRcdFx0ZW5kMiA9IHJlZmVyZW5jZTIgKyAyO1xuXHRcdFx0c3RhcnQyID0gcmVmZXJlbmNlMiArIDE7XG5cdFx0XHRcblx0XHRcdGNvbnN0IGJhZGdlU3RyaW5nID0gXCIqKlwiICsgYmFkZ2UubmFtZSArIFwiKiogXCIgKyBiYWRnZS5sZXZlbCArIFwiXFxuPiBcIiArIGJhZGdlLmRlc2NyaXB0aW9uICsgXCJcXG5cIlxuXHRcdFx0Y29uc3QgbmV3TGluZXMgPSBbLi4ubGluZXMuc2xpY2UoMCwgc3RhcnQpLCBiYWRnZVN0cmluZywgLi4ubGluZXMuc2xpY2UoZW5kKV07XG5cdFx0XHRjb25zdCBuZXdMaW5lczIgPSBbLi4ubmV3TGluZXMuc2xpY2UoMCwgc3RhcnQyKSwgLi4ubmV3TGluZXMuc2xpY2UoZW5kMildXG5cdFx0XHRhd2FpdCBhcHAudmF1bHQubW9kaWZ5KGZpbGUsIG5ld0xpbmVzMi5qb2luKFwiXFxuXCIpKTtcblx0XHRcdGNvbnNvbGUubG9nKGBiYWRnZVN0cmluZzogJHtiYWRnZVN0cmluZ31gKVxuXHRcdH1cblx0fSAgXG5cblx0YXN5bmMgZ2l2ZUluaXRCYWRnZUluUHJvZmlsZShhdmF0YXJQYWdlTmFtZTogc3RyaW5nLCBiYWRnZTogQmFkZ2Upe1xuXHRcdGNvbnN0IGV4aXN0aW5nRmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoYCR7YXZhdGFyUGFnZU5hbWV9Lm1kYCk7XG5cdFx0aWYgKGV4aXN0aW5nRmlsZSA9PSBudWxsKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhgRmlsZSAke2F2YXRhclBhZ2VOYW1lfS5tZCBkb2VzIG5vdCBleGlzdGApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdGNvbnN0IGZpbGUgPSBleGlzdGluZ0ZpbGUgYXMgVEZpbGU7XG5cdFxuXHRcdGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBhcHAudmF1bHQucmVhZChmaWxlKTtcblx0XHRsZXQgcmVmZXJlbmNlOiBudW1iZXIgfCBudWxsID0gbnVsbDtcblx0XHRsZXQgZW5kOiBudW1iZXIgfCBudWxsID0gbnVsbDtcblx0XHRsZXQgc3RhcnQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXHRcdFxuXHRcdGNvbnN0IGxpbmVzID0gY29udGVudC5zcGxpdChcIlxcblwiKTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBsaW5lID0gbGluZXNbaV0udHJpbSgpO1xuXHRcdFx0aWYgKGxpbmUgPT09IFwiIyMjIyBhY2hpZXZlZFwiKSB7XG5cdFx0XHRcdGlmIChyZWZlcmVuY2UgPT09IG51bGwpIHtcblx0XHRcdFx0XHRyZWZlcmVuY2UgPSBpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChyZWZlcmVuY2UgIT0gbnVsbCApe1xuXHRcdFx0ZW5kID0gcmVmZXJlbmNlICsgMjtcblx0XHRcdHN0YXJ0ID0gcmVmZXJlbmNlICsgMTtcblx0XHRcdFxuXHRcdFx0Y29uc3QgYmFkZ2VTdHJpbmcgPSBcIioqXCIgKyBiYWRnZS5uYW1lICsgXCIqKlxcbj4gXCIgKyBiYWRnZS5kZXNjcmlwdGlvbiArIFwiXFxuXCJcblx0XHRcdGNvbnN0IG5ld0xpbmVzID0gWy4uLmxpbmVzLnNsaWNlKDAsIHN0YXJ0KSwgYmFkZ2VTdHJpbmcsIC4uLmxpbmVzLnNsaWNlKGVuZCldO1xuXHRcdFx0YXdhaXQgYXBwLnZhdWx0Lm1vZGlmeShmaWxlLCBuZXdMaW5lcy5qb2luKFwiXFxuXCIpKTtcblx0XHRcdGNvbnNvbGUubG9nKGBiYWRnZVN0cmluZzogJHtiYWRnZVN0cmluZ31gKVxuXHRcdH1cblx0fVxuXHRcblx0YXN5bmMgcmVtb3ZlQmFkZ2VzV2hlbkluaXRMZXZlbEhpZ2hlcihhdmF0YXJQYWdlTmFtZTogc3RyaW5nLCBsZXZlbDogbnVtYmVyKXtcblx0XHRjb25zdCBleGlzdGluZ0ZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGAke2F2YXRhclBhZ2VOYW1lfS5tZGApO1xuXHRcdGlmIChleGlzdGluZ0ZpbGUgPT0gbnVsbCkge1xuXHRcdFx0Y29uc29sZS5sb2coYEZpbGUgJHthdmF0YXJQYWdlTmFtZX0ubWQgZG9lcyBub3QgZXhpc3RgKTtcblx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRjb25zdCBmaWxlID0gZXhpc3RpbmdGaWxlIGFzIFRGaWxlO1xuXHRcblx0XHRjb25zdCBjb250ZW50ID0gYXdhaXQgYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG5cdFx0bGV0IHJlZmVyZW5jZTogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cdFx0bGV0IHJlZmVyZW5jZTI6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXHRcdGxldCBlbmQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xuXHRcdGxldCBzdGFydDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cdFx0XG5cdFx0Y29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KFwiXFxuXCIpO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGxpbmUgPSBsaW5lc1tpXS50cmltKCk7XG5cdFx0XHRpZiAobGluZSA9PT0gXCIjIyMjIG91dHN0YW5kaW5nXCIpIHtcblx0XHRcdFx0aWYgKHJlZmVyZW5jZSA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdHJlZmVyZW5jZSA9IGk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChyZWZlcmVuY2UgIT0gbnVsbCAmJiByZWZlcmVuY2UyID09IG51bGwpe1xuXHRcdFx0XHQvLyBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggdGhlIGxldmVsIG51bWJlclxuXHRcdFx0XHRjb25zdCBsZXZlbFJlZ2V4ID0gL2xldmVsIChcXGQrKS87XG5cdFx0XHRcdC8vIEV4dHJhY3QgdGhlIGxldmVsIG51bWJlciB1c2luZyB0aGUgcmVndWxhciBleHByZXNzaW9uXG5cdFx0XHRcdGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaChsZXZlbFJlZ2V4KTtcblxuXHRcdFx0XHRpZihtYXRjaCl7XG5cdFx0XHRcdFx0Y29uc3QgbGV2ZWxOdW1iZXIgPSBwYXJzZUludChtYXRjaFsxXSwgMTApOyAvLyBDb252ZXJ0IHRoZSBtYXRjaGVkIG51bWJlciB0byBhbiBpbnRlZ2VyXG5cdFx0XHRcdFx0aWYgKGxldmVsTnVtYmVyIDwgbGV2ZWwpIHtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVmZXJlbmNlMiA9IGlcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gXG5cdFx0XHR9XHRcdFx0XG5cdFx0fVxuXHRcdGlmIChyZWZlcmVuY2UgIT0gbnVsbCAmJiByZWZlcmVuY2UyICE9IG51bGwpe1xuXHRcdFx0c3RhcnQgPSByZWZlcmVuY2UgKyAxO1xuXHRcdFx0ZW5kID0gcmVmZXJlbmNlMjtcblx0XHRcdGNvbnN0IG5ld0xpbmVzID0gWy4uLmxpbmVzLnNsaWNlKDAsIHN0YXJ0KSwgLi4ubGluZXMuc2xpY2UoZW5kKV07XG5cdFx0XHRhd2FpdCBhcHAudmF1bHQubW9kaWZ5KGZpbGUsIG5ld0xpbmVzLmpvaW4oXCJcXG5cIikpO1xuXHRcdH1cblx0fVxuXG5cdFxuXHRhc3luYyBjcmVhdGVDaGFydCh2YXVsdDogVmF1bHQpOiBQcm9taXNlPHN0cmluZz57XG5cdFx0Y29uc3QgZmlsZXMgPSB2YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG5cdFx0Y29uc3QgZWFybGllc3RGaWxlID0gZmluZEVhcmxpZXN0RGF0ZUZpbGUoZmlsZXMpXG5cdFx0bGV0IGVhcmxpZXN0RGF0ZSA9IGVhcmxpZXN0RmlsZS5zdGF0LmN0aW1lXG5cdFx0aWYgKGVhcmxpZXN0RmlsZS5zdGF0Lm10aW1lIDwgZWFybGllc3RGaWxlLnN0YXQuY3RpbWUgKXtcblx0XHRcdGVhcmxpZXN0RGF0ZSA9IGVhcmxpZXN0RmlsZS5zdGF0Lm10aW1lXG5cdFx0fVxuXHRcdFxuXHRcdGxldCBtb250aENvdW50ZXIgPSAwIC8vZm9ybWF0KG5ldyBEYXRlKGVhcmxpZXN0RGF0ZSksICdNTScpO1xuXHRcdGxldCBkYXRlQ291bnQgPSBuZXcgRGF0ZShlYXJsaWVzdERhdGUpOyAvLyB1bSBlcyBob2Noelx1MDBFNGhsZW4genUga1x1MDBGNm5uZW5cblx0XHRjb25zdCBmaWxlRGF0ZU1vbnRoTWFwID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcblx0XHRjb25zdCBmaWxlRGF0ZU1vbnRoTWFwTW9kID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcblx0XHRjb25zdCBtb250aGNvdW50ID0gbW9udGhzQmV0d2VlbihuZXcgRGF0ZShlYXJsaWVzdERhdGUpLCBuZXcgRGF0ZSgpKVxuXHRcdGxldCBkYXRlU3RyaW5nID0gZGF0ZUNvdW50LmdldE1vbnRoKCkrMSArIFwiLlwiICsgZGF0ZUNvdW50LmdldEZ1bGxZZWFyKClcblx0XHRsZXQgeUxhYmVsID0gXCJcIlxuXHRcdC8vIGNyZWF0ZSBCYXNlIGZvciBjb3VudGluZyBjcmVhdGVkXG5cdFx0d2hpbGUgKG1vbnRoQ291bnRlciA8IG1vbnRoY291bnQpe1xuXHRcdFx0ZGF0ZVN0cmluZyA9IGRhdGVDb3VudC5nZXRNb250aCgpKzEgKyBcIi5cIiArIGRhdGVDb3VudC5nZXRGdWxsWWVhcigpXG5cdFx0XHQvL2NvbnNvbGUubG9nKGBkYXRlU3RyaW5nOiAke2RhdGVTdHJpbmd9YClcblx0XHRcdHlMYWJlbCA9IHlMYWJlbCArIGRhdGVTdHJpbmcgKyBcIiwgXCJcblx0XHRcdGRhdGVDb3VudC5zZXRNb250aChkYXRlQ291bnQuZ2V0TW9udGgoKSArIDEpXG5cdFx0XHRtb250aENvdW50ZXIgKz0gMTtcblx0XHRcdGZpbGVEYXRlTW9udGhNYXAuc2V0KGRhdGVTdHJpbmcsIDApXG5cdFx0fVxuXHRcdHlMYWJlbCA9IHlMYWJlbC5zbGljZSgwLHlMYWJlbC5sZW5ndGgtMilcblx0XG5cdFx0bW9udGhDb3VudGVyID0gMFxuXHRcdGRhdGVDb3VudCA9IG5ldyBEYXRlKGVhcmxpZXN0RGF0ZSk7IC8vIHVtIGVzIGhvY2h6XHUwMEU0aGxlbiB6dSBrXHUwMEY2bm5lblxuXHRcdGRhdGVTdHJpbmcgPSBkYXRlQ291bnQuZ2V0TW9udGgoKSsxICsgXCIuXCIgKyBkYXRlQ291bnQuZ2V0RnVsbFllYXIoKVxuXHRcdC8vIGNyZWF0ZSBCYXNlIGZvciBjb3VudGluZyBtb2RpZmllZFxuXHRcdHdoaWxlIChtb250aENvdW50ZXIgPCBtb250aGNvdW50KXtcblx0XHRcdGRhdGVTdHJpbmcgPSBkYXRlQ291bnQuZ2V0TW9udGgoKSsxICsgXCIuXCIgKyBkYXRlQ291bnQuZ2V0RnVsbFllYXIoKVxuXHRcdFx0Ly9jb25zb2xlLmxvZyhgZGF0ZVN0cmluZzogJHtkYXRlU3RyaW5nfWApXG5cdFx0XHRkYXRlQ291bnQuc2V0TW9udGgoZGF0ZUNvdW50LmdldE1vbnRoKCkgKyAxKVxuXHRcdFx0bW9udGhDb3VudGVyICs9IDE7XG5cdFx0XHRmaWxlRGF0ZU1vbnRoTWFwTW9kLnNldChkYXRlU3RyaW5nLCAwKVxuXHRcdH1cblx0XG5cdFx0Ly8gY291bnQgaG93IG1hbnkgZmlsZXMgaW4gZWFjaCBtb250aFxuXHRcdGNvbnN0IGNyZWF0aW9uRGF0ZXMgPSBnZXRDcmVhdGlvbkRhdGVzKGZpbGVzKVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY3JlYXRpb25EYXRlcy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRmaWxlRGF0ZU1vbnRoTWFwLnNldChmb3JtYXQoY3JlYXRpb25EYXRlc1tpXSwgJ00ueXl5eScpLGZpbGVEYXRlTW9udGhNYXAuZ2V0KGZvcm1hdChjcmVhdGlvbkRhdGVzW2ldLCAnTS55eXl5JykpKzEpXG5cdFx0fVxuXHRcblx0XHQvLyBjb3VudCBob3cgbWFueSBtb2QgZmlsZXMgaW4gZWFjaCBtb250aFxuXHRcdGNvbnN0IG1vZGlmaWNhdGlvbkRhdGVzID0gZ2V0TW9kaWZpY2F0aW9uRGF0ZXMoZmlsZXMpXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBtb2RpZmljYXRpb25EYXRlcy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRmaWxlRGF0ZU1vbnRoTWFwTW9kLnNldChmb3JtYXQobW9kaWZpY2F0aW9uRGF0ZXNbaV0sICdNLnl5eXknKSxmaWxlRGF0ZU1vbnRoTWFwTW9kLmdldChmb3JtYXQobW9kaWZpY2F0aW9uRGF0ZXNbaV0sICdNLnl5eXknKSkrMSlcblx0XHR9XG5cdFxuXHRcblx0Lypcblx0XHQvLyBjb3VudCBlYWNoIGZpbGUgb25seSBvbmVzLCBpZiBpdCBnb3QgbW9kaWZpZWQgaW4gc2FtZSBtb250aCBzaGFsbCBub3QgY291bnRlZCBhcyBjcmVhdGVkIHRvb1xuXHRcdGNvbnN0IGNyZWF0aW9uRGF0ZXMgPSBnZXRDcmVhdGlvbkRhdGVzKGZpbGVzKVxuXHRcdGNvbnN0IG1vZGlmaWNhdGlvbkRhdGVzID0gZ2V0TW9kaWZpY2F0aW9uRGF0ZXMoZmlsZXMpXG5cdFx0Y29uc29sZS5sb2coYG1vZGlmaWNhdGlvbkRhdGVzLmxlbmd0aDogJHttb2RpZmljYXRpb25EYXRlcy5sZW5ndGh9XFx0Y3JlYXRpb25EYXRlcy5sZW5ndGg6ICR7Y3JlYXRpb25EYXRlcy5sZW5ndGh9YClcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNyZWF0aW9uRGF0ZXMubGVuZ3RoOyBpKyspe1xuXHRcdFx0aWYoZmlsZURhdGVNb250aE1hcE1vZC5nZXQoZm9ybWF0KG1vZGlmaWNhdGlvbkRhdGVzW2ldLCAnTS55eXl5JykpID09IGZpbGVEYXRlTW9udGhNYXAuZ2V0KGZvcm1hdChjcmVhdGlvbkRhdGVzW2ldLCAnTS55eXl5JykpKXtcblx0XHRcdFx0ZmlsZURhdGVNb250aE1hcC5zZXQoZm9ybWF0KGNyZWF0aW9uRGF0ZXNbaV0sICdNLnl5eXknKSxmaWxlRGF0ZU1vbnRoTWFwLmdldChmb3JtYXQoY3JlYXRpb25EYXRlc1tpXSwgJ00ueXl5eScpKSsxKVxuXHRcdFx0fSAvL2Vsc2Uge1xuXHRcdFx0XHQvL2ZpbGVEYXRlTW9udGhNYXBNb2Quc2V0KGZvcm1hdChtb2RpZmljYXRpb25EYXRlc1tpXSwgJ00ueXl5eScpLGZpbGVEYXRlTW9udGhNYXBNb2QuZ2V0KGZvcm1hdChtb2RpZmljYXRpb25EYXRlc1tpXSwgJ00ueXl5eScpKSsxKVxuXHRcdFx0Ly99XG5cdFx0fVxuXHQqL1xuXHRcblx0XHQvLyBidWlsZCBDaGFydCBTdHJpbmcgY3JlYXRlZFxuXHRcdGxldCBjaGFyU3RyaW5nQ3JlYXRlZCA9IFwiXCJcblx0XHRmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBmaWxlRGF0ZU1vbnRoTWFwKSB7XG5cdFx0XHQvL2NvbnNvbGUubG9nKGBrZXk6ICR7a2V5fSwgdmFsdWU6ICR7dmFsdWV9YCk7XG5cdFx0XHRjaGFyU3RyaW5nQ3JlYXRlZCA9IGNoYXJTdHJpbmdDcmVhdGVkICsgdmFsdWUgKyBcIiwgXCJcblx0XHR9XG5cdFx0Y2hhclN0cmluZ0NyZWF0ZWQgPSBjaGFyU3RyaW5nQ3JlYXRlZC5zbGljZSgwLGNoYXJTdHJpbmdDcmVhdGVkLmxlbmd0aC0yKVxuXHRcdC8vY29uc29sZS5sb2coYGNoYXJTdHJpbmdDcmVhdGVkOiAke2NoYXJTdHJpbmdDcmVhdGVkfWApO1xuXHRcblx0XG5cdFx0Ly8gYnVpbGQgQ2hhcnQgU3RyaW5nIG1vZGlmaWVkXG5cdFx0bGV0IGNoYXJTdHJpbmdNb2RpZmllZCA9IFwiXCJcblx0XHRmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBmaWxlRGF0ZU1vbnRoTWFwTW9kKSB7XG5cdFx0XHQvL2NvbnNvbGUubG9nKGBrZXk6ICR7a2V5fSwgdmFsdWU6ICR7dmFsdWV9YCk7XG5cdFx0XHRjaGFyU3RyaW5nTW9kaWZpZWQgPSBjaGFyU3RyaW5nTW9kaWZpZWQgKyB2YWx1ZSArIFwiLCBcIlxuXHRcdH1cblx0XHRjaGFyU3RyaW5nTW9kaWZpZWQgPSBjaGFyU3RyaW5nTW9kaWZpZWQuc2xpY2UoMCxjaGFyU3RyaW5nTW9kaWZpZWQubGVuZ3RoLTIpXG5cdFx0Ly9jb25zb2xlLmxvZyhgY2hhclN0cmluZ01vZGlmaWVkOiAke2NoYXJTdHJpbmdNb2RpZmllZH1gKTtcblx0XG5cdFxuXHRcdC8vIGNyZWF0ZSBjaGFydFxuXHRcdGNvbnN0IGNoYXJ0U3RyaW5nID0gY3JlYXRlQ2hhcnRGb3JtYXQoeUxhYmVsLCBjaGFyU3RyaW5nQ3JlYXRlZCwgY2hhclN0cmluZ01vZGlmaWVkLCB0aGlzLnNldHRpbmdzLmNoYXJ0UmVkdXppZXJ1bmdNb25hdGUpXG5cdFx0Ly9jb25zb2xlLmxvZyhgY2hhcnRTdHJpbmc6ICR7Y2hhcnRTdHJpbmd9YCk7XG5cdFx0cmV0dXJuIGNoYXJ0U3RyaW5nXG5cdH1cblxuXHRhc3luYyBkZWNpc2lvbklmQmFkZ2UobmV3TGV2ZWw6IFByb21pc2U8Ym9vbGVhbj4pe1xuXHRcdG5ld0xldmVsLnRoZW4oKHJlc3VsdDogYm9vbGVhbik9PiB7XG5cdFx0XHRpZihyZXN1bHQpe1xuXHRcdFx0XHRjb25zdCBiYWRnZSA6IEJhZGdlID0gZ2V0QmFkZ2VGb3JMZXZlbCh0aGlzLnNldHRpbmdzLnN0YXR1c0xldmVsLCBmYWxzZSlcblx0XHRcdFx0bmV3IE5vdGljZShgWW91J3ZlIGVhcm5lZCB0aGUgXCIke2JhZGdlLm5hbWV9XCIgYmFkZ2UuICR7YmFkZ2UuZGVzY3JpcHRpb259YClcblx0XHRcdFx0Y29uc29sZS5sb2coYFlvdSd2ZSBlYXJuZWQgdGhlIFwiJHtiYWRnZS5uYW1lfVwiIGJhZGdlLiAke2JhZGdlLmRlc2NyaXB0aW9ufWApXG5cdFx0XHRcdC8vY29uc29sZS5sb2coYGJhZGdlIGZvciBsZXZlbCAke3RoaXMuc2V0dGluZ3Muc3RhdHVzTGV2ZWx9IGlzICR7YmFkZ2UubmFtZX0gLSAke2JhZGdlLmxldmVsfWApXG5cdFx0XHRcdHRoaXMuZ2l2ZUJhZGdlSW5Qcm9maWxlKHRoaXMuc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUsIGJhZGdlKVxuXHRcdFx0XHR0aGlzLnNldHRpbmdzLmJhZGdlQm9vc3RlclN0YXRlID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMuc2V0dGluZ3MuYmFkZ2VCb29zdGVyRmFjdG9yID0gMTtcblx0XHRcdFx0dGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0XG5cdGFzeW5jIHJlbW92ZUtleXNGcm9tRnJvbnRtYXR0ZXIoKSB7XG5cdFx0Ly9jb25zdCB7IFZhdWx0LCBURmlsZSB9ID0gd2luZG93LmFwcDtcblx0XHRjb25zdCB7IHZhdWx0IH0gPSB0aGlzLmFwcFxuXHRcdC8vY29uc3QgdmF1bHQgPSBWYXVsdC5yZW9wZW4oKTtcblx0XHRcblx0XHQvLyBHZXQgYWxsIE1hcmtkb3duIGZpbGVzIGluIHRoZSB2YXVsdFxuXHRcdC8vY29uc3QgbWFya2Rvd25GaWxlcyA9IHZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcblx0XHRjb25zdCBmaWxlQ291bnRNYXAgPSBhd2FpdCBnZXRGaWxlQ291bnRNYXAodGhpcy5hcHAsIHRoaXMuc2V0dGluZ3MudGFnc0V4Y2x1ZGUsIHRoaXMuc2V0dGluZ3MuZm9sZGVyRXhjbHVkZSk7XG5cdFx0Zm9yIChjb25zdCBmaWxlTmFtZSBvZiBmaWxlQ291bnRNYXAua2V5cygpKSB7XG5cdFx0XHRjb25zdCBmaWxlcyA9IHZhdWx0LmdldEZpbGVzKCk7XG5cdFx0XHRjb25zdCBmaWxlID0gZmlsZXMuZmluZChmaWxlID0+IGZpbGUuYmFzZW5hbWUgPT09IGZpbGVOYW1lKTtcblx0XHRcdGlmICghZmlsZSkge1xuXHRcdFx0XHRjb25zb2xlLndhcm4oYEZpbGUgJHtmaWxlTmFtZX0gbm90IGZvdW5kLmApO1xuXHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHQvL2NvbnN0IGZpbGVDb250ZW50cyA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGZpbGUpO1xuXHRcdFx0Y29uc29sZS5sb2coYFByb2Nlc3NpbmcgZmlsZSAke2ZpbGVOYW1lfWApO1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0YXdhaXQgdGhpcy5hcHAuZmlsZU1hbmFnZXIucHJvY2Vzc0Zyb250TWF0dGVyKGZpbGUsIChmcm9udG1hdHRlcikgPT4ge1xuXHRcdFx0XHRcdGRlbGV0ZSBmcm9udG1hdHRlclsndGl0bGUtY2xhc3MnXVxuXHRcdFx0XHRcdGRlbGV0ZSBmcm9udG1hdHRlclsnbm90ZS1sZW5ndGgtY2xhc3MnXVxuXHRcdFx0XHRcdGRlbGV0ZSBmcm9udG1hdHRlclsnaW5saW5rLWNsYXNzJ11cblx0XHRcdFx0XHRkZWxldGUgZnJvbnRtYXR0ZXJbJ291dGxpbmstY2xhc3MnXVxuXHRcdFx0XHRcdGRlbGV0ZSBmcm9udG1hdHRlclsncHJvZ3Jlc3NpdmUtc3VtYXJpemF0aW9uLW1hdHVyaXR5J11cblx0XHRcdFx0XHRkZWxldGUgZnJvbnRtYXR0ZXJbJ25vdGUtbWF0dXJpdHknXVxuXHRcdFx0XHR9KTtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0aWYgKGU/Lm5hbWUgPT09ICdZQU1MUGFyc2VFcnJvcicpIHtcblx0XHRcdFx0XHRjb25zdCBlcnJvck1lc3NhZ2UgPSBgVXBkYXRlIG1hanVyaXR5cyBmYWlsZWQgTWFsZm9ybWVkIGZyb250YW10dGVyICR7ZS5tZXNzYWdlfWA7XG5cdFx0XHRcdFx0bmV3IE5vdGljZShlcnJvck1lc3NhZ2UsIDQwMDApO1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyb3JNZXNzYWdlKTtcblx0XHRcdFx0fVxuXHRcdCAgXHR9XG5cdFx0XHQvLyBuZXcgTm90aWNlKGBSZW1vdmVkIHNwZWNpZmllZCBrZXlzIGZyb20gZnJvbnRtYXR0ZXIgZnJvbSBmaWxlIFxcXCIke2ZpbGVOYW1lfVxcXCIuYCk7XG5cdCAgXHR9XG5cdH1cblxuXHRhc3luYyB3aGljaExldmVsTmV4dEJhZGdlKGN1cnJlbnRMZXZlbDogbnVtYmVyKTogUHJvbWlzZTxudW1iZXI+e1xuXHRcdGxldCBuZXh0QmFkZ2VMZXZlbDogbnVtYmVyID0gMFxuXHRcdGZvciAobGV0IGkgPSBjdXJyZW50TGV2ZWw7IGkgPCAxMTA7IGkrKyl7XG5cdFx0XHRjb25zdCBiYWRnZSA6IEJhZGdlID0gZ2V0QmFkZ2VGb3JMZXZlbChpLCB0cnVlKVxuXHRcdFx0Ly8gUmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIHRoZSBsZXZlbCBudW1iZXJcblx0XHRcdGNvbnN0IGxldmVsUmVnZXggPSAvbGV2ZWwgKFxcZCspLztcblx0XHRcdC8vIEV4dHJhY3QgdGhlIGxldmVsIG51bWJlciB1c2luZyB0aGUgcmVndWxhciBleHByZXNzaW9uXG5cdFx0XHRjb25zdCBtYXRjaCA9IGJhZGdlLmxldmVsLm1hdGNoKGxldmVsUmVnZXgpO1xuXHRcdFx0aWYobWF0Y2gpe1xuXHRcdFx0XHRjb25zdCBsZXZlbE51bWJlciA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCk7IC8vIENvbnZlcnQgdGhlIG1hdGNoZWQgbnVtYmVyIHRvIGFuIGludGVnZXJcblx0XHRcdFx0aWYgKGxldmVsTnVtYmVyID4gY3VycmVudExldmVsICYmIG5leHRCYWRnZUxldmVsID09IDAgKSB7XG5cdFx0XHRcdFx0bmV4dEJhZGdlTGV2ZWwgPSBsZXZlbE51bWJlcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBcdFxuXHRcdH1cblx0XHRyZXR1cm4gbmV4dEJhZGdlTGV2ZWxcblx0fVxuXG5cdGFzeW5jIGJvb3N0ZXJGb3JJbml0KCk6IFByb21pc2U8bnVtYmVyPiB7XG5cdFx0Y29uc3QgbmV4dEJhZGdlQXQgPSBhd2FpdCB0aGlzLndoaWNoTGV2ZWxOZXh0QmFkZ2UodGhpcy5zZXR0aW5ncy5zdGF0dXNMZXZlbClcblx0XHRjb25zdCBzdGF0dXNQb2ludHNUb1JlYWNoID0gc3RhdHVzUG9pbnRzRm9yTGV2ZWwobmV4dEJhZGdlQXQpXG5cdFx0Ly9jb25zb2xlLmxvZyhgc3RhdHVzUG9pbnRzVG9SZWFjaCBmb3IgbmV4dCBCYWRnZTogJHtzdGF0dXNQb2ludHNUb1JlYWNofWApXG5cdFx0Ly8gNTAgTm90ZXMgZnJvbSBMZXZlbCAxIHRvIDUgdG8gZ2V0IHRoZSBmaXJzdCBiYWRnZS5cblx0XHQvLyAzMDAgUG9pbnRzIGluIGF2ZXJhZ2UgZm9yIGEgTm90ZS5cblx0XHRjb25zdCBib29zdGVyRmFjdG9yID0gTWF0aC5yb3VuZCgoc3RhdHVzUG9pbnRzVG9SZWFjaCAtIHRoaXMuc2V0dGluZ3Muc3RhdHVzUG9pbnRzKS81MC8zMDApO1xuXHRcdHRoaXMuc2V0dGluZ3MuYmFkZ2VCb29zdGVyRmFjdG9yID0gYm9vc3RlckZhY3RvclxuXHRcdHRoaXMuc2V0dGluZ3MuYmFkZ2VCb29zdGVyU3RhdGUgPSB0cnVlXG5cdFx0dGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKVxuXHRcdC8vY29uc29sZS5sb2coYGJvb3N0ZXJGYWt0b3I6ICR7Ym9vc3RlckZhY3Rvcn1gKSBcblx0XHRyZXR1cm4gYm9vc3RlckZhY3RvclxuXHR9XG5cblx0YXN5bmMgb3BlbkF2YXRhckZpbGUoKSB7XG5cdFx0Y29uc3QgZXhpc3RpbmdGaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChgJHt0aGlzLnNldHRpbmdzLmF2YXRhclBhZ2VOYW1lfS5tZGApO1xuXHRcdGlmIChleGlzdGluZ0ZpbGUpeyAvLyAmJiBcIm9wZW5cIiBpbiBleGlzdGluZ0ZpbGUpIHtcblx0XHRcdGNvbnN0IHNvdXJjZVBhdGggPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpPy5wYXRoIHx8ICcnO1xuXHRcdFx0YXBwLndvcmtzcGFjZS5vcGVuTGlua1RleHQoZXhpc3RpbmdGaWxlLnBhdGgsIHNvdXJjZVBhdGgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcIkZpbGUgbm90IGZvdW5kIG9yIHVuYWJsZSB0byBvcGVuLlwiKTtcblx0XHR9XG5cdH1cbn1cdCAgXG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUF2YXRhckZpbGUoYXBwOiBBcHAsIGZpbGVOYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcblx0Ly9zZXR0aW5nczogR2FtaWZpY2F0aW9uUGx1Z2luU2V0dGluZ3M7XG5cdC8vIERlZmluZSB0aGUgZmlsZSBuYW1lIGFuZCBjb250ZW50XG5cdC8vY29uc3QgZmlsZU5hbWUgPSAnQXZhdGFyIC0gR2FtaWZpY2F0aW9uJzsgLy8gdGhpcy5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZTtcblx0Ly9jb25zb2xlLmxvZyhgZmlsZU5hbWU6ICR7ZmlsZU5hbWV9YClcblx0Y29uc3QgZmlsZUNvbnRlbnQgPSBgIyBBdmF0YXJcblxufCAgICAgICAgfCAgICAgfFxufCAtLS0tLS0gfCAtLS0gfFxufCBMZXZlbCAgfCAwICAgIHxcbnwgUG9pbnRzIHwgMCAgICB8XG5ebGV2ZWxBbmRQb2ludHNcdFxuXFxgXFxgXFxgY2hhcnRcbnR5cGU6IGJhclxubGFiZWxzOiBbRXhwcmlyaWVuY2VdXG5zZXJpZXM6XG4gIC0gdGl0bGU6IHBvaW50cyByZWFjaGVkXG4gICAgZGF0YTogWzBdXG4gIC0gdGl0bGU6IHBvaW50cyB0byBlYXJuIHRvIGxldmVsIHVwXG4gICAgZGF0YTogWzEwMDBdXG54TWluOiAwXG54TWF4OiAxMDAwXG50ZW5zaW9uOiAwLjJcbndpZHRoOiA0MCVcbmxhYmVsQ29sb3JzOiBmYWxzZVxuZmlsbDogZmFsc2VcbmJlZ2luQXRaZXJvOiBmYWxzZVxuYmVzdEZpdDogZmFsc2VcbmJlc3RGaXRUaXRsZTogdW5kZWZpbmVkXG5iZXN0Rml0TnVtYmVyOiAwXG5zdGFja2VkOiB0cnVlXG5pbmRleEF4aXM6IHlcbnhUaXRsZTogXCJwcm9ncmVzc1wiXG5sZWdlbmQ6IGZhbHNlXG5cXGBcXGBcXGBcblxufCBMZXZlbCB8IENvdW50IHxcbnwgOi0tLTogfCA6LS0tOiB8XG58IE1hanVyaXR5IDUgfFxcYCQ9ZHYucGFnZXMoKS53aGVyZShwID0+IFs1LCAnNScsICc1XHUyN0ExXHVGRTBGJywgJzVcdTJCMDdcdUZFMEYnLCAnNVx1MkIwNlx1RkUwRiddLmluY2x1ZGVzKHAuZmlsZS5mcm9udG1hdHRlclsnbm90ZS1tYXR1cml0eSddKSkubGVuZ3RoXFxgfFxufCBNYWp1cml0eSA0IHxcXGAkPWR2LnBhZ2VzKCkud2hlcmUocCA9PiBbNCwgJzQnLCAnNFx1MjdBMVx1RkUwRicsICc0XHUyQjA3XHVGRTBGJywgJzRcdTJCMDZcdUZFMEYnXS5pbmNsdWRlcyhwLmZpbGUuZnJvbnRtYXR0ZXJbJ25vdGUtbWF0dXJpdHknXSkpLmxlbmd0aFxcYHxcbnwgTWFqdXJpdHkgMyB8XFxgJD1kdi5wYWdlcygpLndoZXJlKHAgPT4gWzMsICczJywgJzNcdTI3QTFcdUZFMEYnLCAnM1x1MkIwN1x1RkUwRicsICczXHUyQjA2XHVGRTBGJ10uaW5jbHVkZXMocC5maWxlLmZyb250bWF0dGVyWydub3RlLW1hdHVyaXR5J10pKS5sZW5ndGhcXGB8XG58IE1hanVyaXR5IDIgfFxcYCQ9ZHYucGFnZXMoKS53aGVyZShwID0+IFsyLCAnMicsICcyXHUyN0ExXHVGRTBGJywgJzJcdTJCMDdcdUZFMEYnLCAnMlx1MkIwNlx1RkUwRiddLmluY2x1ZGVzKHAuZmlsZS5mcm9udG1hdHRlclsnbm90ZS1tYXR1cml0eSddKSkubGVuZ3RoXFxgfFxufCBNYWp1cml0eSAxIHxcXGAkPWR2LnBhZ2VzKCkud2hlcmUocCA9PiBbMSwgJzEnLCAnMVx1MjdBMVx1RkUwRicsICcxXHUyQjA3XHVGRTBGJywgJzFcdTJCMDZcdUZFMEYnXS5pbmNsdWRlcyhwLmZpbGUuZnJvbnRtYXR0ZXJbJ25vdGUtbWF0dXJpdHknXSkpLmxlbmd0aFxcYHxcbnwgTWFqdXJpdHkgMCB8XFxgJD1kdi5wYWdlcygpLndoZXJlKHAgPT4gWzAsICcwJywgJzBcdTI3QTFcdUZFMEYnLCAnMFx1MkIwN1x1RkUwRicsICcwXHUyQjA2XHVGRTBGJ10uaW5jbHVkZXMocC5maWxlLmZyb250bWF0dGVyWydub3RlLW1hdHVyaXR5J10pKS5sZW5ndGhcXGB8XG5cblxuXFxgXFxgXFxgY2hhcnRcbnR5cGU6IGJhclxubGFiZWxzOiBbMCwgMCwgMF1cbnNlcmllczpcbiAgLSB0aXRsZTogY3JlYXRlZFxuICAgIGRhdGE6IFswLCAwLCAwXVxuICAtIHRpdGxlOiBtb2RpZmllZFxuICAgIGRhdGE6IFswLCAwLCAwXVxudGVuc2lvbjogMC4yXG53aWR0aDogODAgJVxubGFiZWxDb2xvcnM6IGZhbHNlXG5maWxsOiBmYWxzZVxuYmVnaW5BdFplcm86IGZhbHNlXG5iZXN0Rml0OiBmYWxzZVxuYmVzdEZpdFRpdGxlOiB1bmRlZmluZWRcbmJlc3RGaXROdW1iZXI6IDBcbnN0YWNrZWQ6IHRydWVcbnlUaXRsZTogXCJOdW1iZXIgb2YgTm90ZXNcIlxueFRpdGxlOiBcIk1vbnRoc1wiXG54TWluOiAwXG5cXGBcXGBcXGBcbl5DaGFydE1vbnRoXG5cblxuIyMjIEJhZGdlc1xuIyMjIyBhY2hpZXZlZFxuXG5cbiMjIyMgb3V0c3RhbmRpbmdcbmxldmVsIDU6ICpFbmxpZ2h0ZW5lZCBOb3ZpY2UqXG5sZXZlbCAxMDogKkN1cmlvdXMgQ29ubm9pc3NldXIqXG5sZXZlbCAyMDogKkJyYWluaWFjIFRyYWlsYmxhemVyKlxubGV2ZWwgMjc6ICpTY2hvbGFybHkgVHJhaWxibGF6ZXIqXG5sZXZlbCAzNTogKkluZm8gTmluamEgTWFzdGVyKlxubGV2ZWwgNDI6ICpXaXNlIE93bCBHdXJ1KlxubGV2ZWwgNTA6ICpFaW5zdGVpbiBJbmNhcm5hdGUqXG5sZXZlbCA2MDogKk1hc3Rlcm1pbmQgU2FnZSpcbmxldmVsIDc1OiAqQ2VyZWJyYWwgTWFlc3RybypcbmxldmVsIDgyOiAqWmVuIEtub3dsZWRnZSBLZWVwZXIqXG5sZXZlbCA5MDogKkdyYW5kIEFyY2hpdmlzdCBPdmVybG9yZCpcbmxldmVsIDEwMDogKk9tbmlzY2llbnQgU2FnZSBvZiBFdmVyeXRoaW5nKlxuXG5cblxuIyMjICoqbm90ZS1tYXR1cml0eSA9IDUqKlxuXFxgXFxgXFxgZGF0YXZpZXdcbkxpc3QgTm90ZU1hdHVyaXR5Q291bnRcbmZyb20gXCJcIlxuV2hlcmUgbm90ZS1tYXR1cml0eSA9IDUgb3Igbm90ZS1tYXR1cml0eSA9IFwiNVwiIG9yIG5vdGUtbWF0dXJpdHkgPSBcIjVcdTI3QTFcdUZFMEZcIiBvciBub3RlLW1hdHVyaXR5ID0gXCI1XHUyQjA2XHVGRTBGXCIgb3Igbm90ZS1tYXR1cml0eSA9IFwiNVx1MkIwN1x1RkUwRlwiXG5cXGBcXGBcXGBcblxuIyMjICoqbm90ZS1tYXR1cml0eSA9IDQqKlxuXFxgXFxgXFxgZGF0YXZpZXdcbkxpc3QgTm90ZU1hdHVyaXR5Q291bnRcbmZyb20gXCJcIlxuV2hlcmUgbm90ZS1tYXR1cml0eSA9IDQgb3Igbm90ZS1tYXR1cml0eSA9IFwiNFwiIG9yIG5vdGUtbWF0dXJpdHkgPSBcIjRcdTI3QTFcdUZFMEZcIiBvciBub3RlLW1hdHVyaXR5ID0gXCI0XHUyQjA2XHVGRTBGXCIgb3Igbm90ZS1tYXR1cml0eSA9IFwiNFx1MkIwN1x1RkUwRlwiXG5cXGBcXGBcXGBcblxuIyMjIG5vdGUtbWF0dXJpdHkgPSAzXG5cXGBcXGBcXGBkYXRhdmlld1xuTGlzdCBOb3RlTWF0dXJpdHlDb3VudFxuZnJvbSBcIlwiXG5XaGVyZSBub3RlLW1hdHVyaXR5ID0gMyBvciBub3RlLW1hdHVyaXR5ID0gXCIzXCIgb3Igbm90ZS1tYXR1cml0eSA9IFwiM1x1MjdBMVx1RkUwRlwiIG9yIG5vdGUtbWF0dXJpdHkgPSBcIjNcdTJCMDZcdUZFMEZcIiBvciBub3RlLW1hdHVyaXR5ID0gXCIzXHUyQjA3XHVGRTBGXCJcblxcYFxcYFxcYFxuXG4jIyMgbm90ZS1tYXR1cml0eSA9IDJcblxcYFxcYFxcYGRhdGF2aWV3XG5MaXN0IE5vdGVNYXR1cml0eUNvdW50XG5mcm9tIFwiXCJcbldoZXJlIG5vdGUtbWF0dXJpdHkgPSAyIG9yIG5vdGUtbWF0dXJpdHkgPSBcIjJcIiBvciBub3RlLW1hdHVyaXR5ID0gXCIyXHUyN0ExXHVGRTBGXCIgb3Igbm90ZS1tYXR1cml0eSA9IFwiMlx1MkIwNlx1RkUwRlwiIG9yIG5vdGUtbWF0dXJpdHkgPSBcIjJcdTJCMDdcdUZFMEZcIlxuXFxgXFxgXFxgXG5cbiMjIyBub3RlLW1hdHVyaXR5ID0gMVxuXFxgXFxgXFxgZGF0YXZpZXdcbkxpc3QgTm90ZU1hdHVyaXR5Q291bnRcbmZyb20gXCJcIlxuV2hlcmUgbm90ZS1tYXR1cml0eSA9IDEgb3Igbm90ZS1tYXR1cml0eSA9IFwiMVwiIG9yIG5vdGUtbWF0dXJpdHkgPSBcIjFcdTI3QTFcdUZFMEZcIiBvciBub3RlLW1hdHVyaXR5ID0gXCIxXHUyQjA2XHVGRTBGXCIgb3Igbm90ZS1tYXR1cml0eSA9IFwiMVx1MkIwN1x1RkUwRlwiXG5cXGBcXGBcXGBcblxuIyMjIG5vdGUtbWF0dXJpdHkgPSAwXG5cXGBcXGBcXGBkYXRhdmlld1xuTGlzdCBOb3RlTWF0dXJpdHlDb3VudFxuZnJvbSBcIlwiXG5XaGVyZSBub3RlLW1hdHVyaXR5ID0gMCBvciBub3RlLW1hdHVyaXR5ID0gXCIwXCIgb3Igbm90ZS1tYXR1cml0eSA9IFwiMFx1MjdBMVx1RkUwRlwiIG9yIG5vdGUtbWF0dXJpdHkgPSBcIjBcdTJCMDZcdUZFMEZcIiBvciBub3RlLW1hdHVyaXR5ID0gXCIwXHUyQjA3XHVGRTBGXCJcblxcYFxcYFxcYFxuYDtcblxuXHRjb25zdCBleGlzdGluZ0ZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGAke2ZpbGVOYW1lfS5tZGApO1xuXHRpZiAoZXhpc3RpbmdGaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcblx0XHRjb25zb2xlLmxvZyhgRmlsZSAke2ZpbGVOYW1lfS5tZCBhbHJlYWR5IGV4aXN0c2ApO1xuXHRcdHJldHVybjtcblx0fVxuXHQvLyBDcmVhdGUgdGhlIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHZhdWx0XG5cdGNvbnN0IGZpbGU6IFRGaWxlID0gYXdhaXQgYXBwLnZhdWx0LmNyZWF0ZShgJHtmaWxlTmFtZX0ubWRgLCBmaWxlQ29udGVudCk7XG5cdFxuXG59XG5cblxuY2xhc3MgTW9kYWxJbmZvcm1hdGlvbmJveCBleHRlbmRzIE1vZGFsIHtcbiAgICBwcml2YXRlIGRpc3BsYXlUZXh0OiBzdHJpbmc7IC8vIFN0b3JlIHRoZSB0ZXh0IHRvIGJlIGRpc3BsYXllZFxuXG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGRpc3BsYXlUZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy5kaXNwbGF5VGV4dCA9IGRpc3BsYXlUZXh0OyAvLyBTdG9yZSB0aGUgcGFzc2VkIHRleHRcbiAgICB9XG5cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgICBjb250ZW50RWwuc2V0VGV4dCh0aGlzLmRpc3BsYXlUZXh0KTsgLy8gVXNlIHRoZSBzdG9yZWQgdGV4dFxuICAgIH1cblxuICAgIG9uQ2xvc2UoKSB7XG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgICBjb250ZW50RWwuZW1wdHkoKTtcbiAgICB9XG59XG5cblxuYXN5bmMgZnVuY3Rpb24gcmVwbGFjZUZvcm1hdFN0cmluZ3MobGF5ZXIyOiBzdHJpbmcsIGxheWVyMzogc3RyaW5nKSB7XG5cdGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuICBcblx0aWYgKCFhY3RpdmVWaWV3KSB7XG5cdCAgY29uc29sZS5lcnJvcihcIk5vIGFjdGl2ZSBNYXJrZG93biB2aWV3IGZvdW5kLlwiKTtcblx0ICByZXR1cm47XG5cdH1cbiAgXG5cdGNvbnN0IGVkaXRvciA9IGFjdGl2ZVZpZXcuZWRpdG9yO1xuXHRjb25zdCBzZWxlY3RlZFRleHQgPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XG4gIFxuXHRpZiAoIXNlbGVjdGVkVGV4dCkge1xuXHQgIGNvbnNvbGUuZXJyb3IoXCJObyB0ZXh0IHNlbGVjdGVkIChmb3IgcHJvZ3Jlc3NpdmUgc3VtbWFyaXphdGlvbiBzd2l0Y2ggTGF5ZXIgMiAmIDMpLlwiKTtcblx0ICByZXR1cm47XG5cdH1cbiAgXG5cdHZhciByZXBsYWNlZFRleHQgPSBzZWxlY3RlZFRleHQucmVwbGFjZUFsbChsYXllcjIsIFwiXHUwMEE3XHUwMEE3XHUwMEE3XHUwMEE3XCIpO1xuXHRyZXBsYWNlZFRleHQgPSByZXBsYWNlZFRleHQucmVwbGFjZUFsbChsYXllcjMsIFwiXHUyMEFDXHUyMEFDXHUyMEFDXHUyMEFDXCIpXG5cdHJlcGxhY2VkVGV4dCA9IHJlcGxhY2VkVGV4dC5yZXBsYWNlQWxsKFwiXHUyMEFDXHUyMEFDXHUyMEFDXHUyMEFDXCIsIGxheWVyMilcblx0cmVwbGFjZWRUZXh0ID0gcmVwbGFjZWRUZXh0LnJlcGxhY2VBbGwoXCJcdTAwQTdcdTAwQTdcdTAwQTdcdTAwQTdcIiwgbGF5ZXIzKVxuXHRcblx0ZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24ocmVwbGFjZWRUZXh0KTtcbn1cbiAgXG5mdW5jdGlvbiByYXRlRGlyZWN0aW9uRm9yU3RhdHVzUG9pbnRzKHJhdGluZ0N1cnJlbnQ6IHN0cmluZywgcmF0aW5nTmV3OiBudW1iZXIpOiBudW1iZXIge1xuXHRsZXQgcmF0aW5nRmFrdG9yID0gMFxuXHQvL2NvbnNvbGUubG9nKGByYXRpbmdDdXJyZW50OiAke3BhcnNlSW50KHJhdGluZ0N1cnJlbnQsIDEwKX1gKVxuXHRpZiAocGFyc2VJbnQocmF0aW5nQ3VycmVudCwgMTApIDwgcmF0aW5nTmV3KXtcblx0XHRyYXRpbmdGYWt0b3IgPSByYXRpbmdOZXcgLSBwYXJzZUludChyYXRpbmdDdXJyZW50LCAxMClcblx0XHQvL2NvbnNvbGUubG9nKGByYXRpbmdGYWt0b3I6ICR7cmF0aW5nRmFrdG9yfVxcdCByYXRpbmdOZXc6ICR7cmF0aW5nTmV3fVxcdHJhdGluZ2N1cnJlbnQ6ICR7cmF0aW5nQ3VycmVudH1gKVxuXHR9IGVsc2Uge1xuXHRcdHJhdGluZ0Zha3RvciA9IDBcblx0fVxuXG5cdHJldHVybiByYXRpbmdGYWt0b3Jcbn1cblxuXG5cbiAgXG4gIFxuXG5cblxuXG4iLCAiaW1wb3J0IHsgQXBwLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IGdhbWlmaWNhdGlvbiBmcm9tICcuL21haW4nO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdFNldHRpbmdzOiBQYXJ0aWFsPElTZXR0aW5ncz4gPSB7XG4gIGVuYWJsZUluaXRDb21tYW5kOiB0cnVlLFxuICBiaW5kRW50ZXI6IHRydWUsXG4gIGJpbmRUYWI6IHRydWUsXG4gIGF2YXRhclBhZ2VOYW1lOiAnQXZhdGFyIC0gR2FtaWZpY2F0aW9uJyxcbiAgdGFnc0V4Y2x1ZGU6ICcnLFxuICBmb2xkZXJFeGNsdWRlOiAnRXhjYWxpZHJhdycsXG4gIHByb2dyZXNzaXZlU3VtTGF5ZXIyOiAnPT0nLFxuICBwcm9ncmVzc2l2ZVN1bUxheWVyMzogJyoqJyxcbiAgbnVtQWxsRmlsZXM6IDEsXG4gIG51bUFsbEZpbGVzQ291bnQ6IDAsXG4gIGNoYXJ0UmVkdXppZXJ1bmdNb25hdGU6IDAsXG4gIHN0YXR1c1BvaW50czogMCxcbiAgc3RhdHVzTGV2ZWw6IDEsXG4gIHhwRm9yTmV4dExldmVsOiAxMDAwLFxuICBnYW1pZmljYXRpb25TdGFydERhdGU6ICcxMi4wOC4yMDIzJyxcbiAgYmFkZ2VCb29zdGVyU3RhdGU6IGZhbHNlLFxuICBiYWRnZUJvb3N0ZXJGYWN0b3I6IDEsXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIElTZXR0aW5ncyB7XG4gIGVuYWJsZUluaXRDb21tYW5kOiBib29sZWFuO1xuICBiaW5kRW50ZXI6IGJvb2xlYW47XG4gIGJpbmRUYWI6IGJvb2xlYW47XG4gIGF2YXRhclBhZ2VOYW1lOiBzdHJpbmc7XG4gIHRhZ3NFeGNsdWRlOiBzdHJpbmc7XG4gIGZvbGRlckV4Y2x1ZGU6IHN0cmluZztcbiAgcHJvZ3Jlc3NpdmVTdW1MYXllcjI6IHN0cmluZztcbiAgcHJvZ3Jlc3NpdmVTdW1MYXllcjM6IHN0cmluZztcbiAgbnVtQWxsRmlsZXM6IG51bWJlcjtcbiAgbnVtQWxsRmlsZXNDb3VudDogbnVtYmVyO1xuICBjaGFydFJlZHV6aWVydW5nTW9uYXRlOiBudW1iZXI7XG4gIHN0YXR1c1BvaW50czogbnVtYmVyO1xuICBzdGF0dXNMZXZlbDogbnVtYmVyO1xuICB4cEZvck5leHRMZXZlbDogbnVtYmVyO1xuICBnYW1pZmljYXRpb25TdGFydERhdGU6IHN0cmluZztcbiAgYmFkZ2VCb29zdGVyU3RhdGU6IGJvb2xlYW47XG4gIGJhZGdlQm9vc3RlckZhY3RvcjogbnVtYmVyO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBHYW1pZmljYXRpb25QbHVnaW5TZXR0aW5ncyBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuXHRwcml2YXRlIHJlYWRvbmx5IHBsdWdpbjogZ2FtaWZpY2F0aW9uO1xuICBcbiAgcHVibGljIGVuYWJsZUluaXRDb21tYW5kOiBib29sZWFuO1xuICBwdWJsaWMgYmluZEVudGVyOiBib29sZWFuO1xuICBwdWJsaWMgYmluZFRhYjogYm9vbGVhbjtcbiAgcHVibGljIGF2YXRhclBhZ2VOYW1lOiBzdHJpbmc7XG4gIHB1YmxpYyB0YWdzRXhjbHVkZTogc3RyaW5nO1xuICBwdWJsaWMgZm9sZGVyRXhjbHVkZTogc3RyaW5nO1xuICBwdWJsaWMgcHJvZ3Jlc3NpdmVTdW1MYXllcjI6IHN0cmluZztcbiAgcHVibGljIHByb2dyZXNzaXZlU3VtTGF5ZXIzOiBzdHJpbmc7XG4gIHB1YmxpYyBudW1BbGxGaWxlczogbnVtYmVyO1xuICBwdWJsaWMgbnVtQWxsRmlsZXNDb3VudDogbnVtYmVyO1xuICBwdWJsaWMgY2hhcnRSZWR1emllcnVuZ01vbmF0ZTogbnVtYmVyO1xuICBwdWJsaWMgc3RhdHVzUG9pbnRzOiBudW1iZXI7XG4gIHB1YmxpYyBzdGF0dXNMZXZlbDogbnVtYmVyO1xuICBwdWJsaWMgeHBGb3JOZXh0TGV2ZWw6IG51bWJlcjtcbiAgcHVibGljIGdhbWlmaWNhdGlvblN0YXJ0RGF0ZTogc3RyaW5nO1xuICBwdWJsaWMgYmFkZ2VCb29zdGVyU3RhdGU6IGJvb2xlYW47XG4gIHB1YmxpYyBiYWRnZUJvb3N0ZXJGYWN0b3I6IG51bWJlcjtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBnYW1pZmljYXRpb24pIHtcblx0ICBzdXBlcihhcHAsIHBsdWdpbik7XG5cdCAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdH1cbiAgXG5cdHB1YmxpYyBkaXNwbGF5KCk6IHZvaWQge1xuXHRcdGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG5cdFx0Y29udGFpbmVyRWwuYWRkQ2xhc3MoXCJleGNhbGlkcmF3LXNldHRpbmdzXCIpO1xuXHRcdHRoaXMuY29udGFpbmVyRWwuZW1wdHkoKTtcblxuXHRcdGNvbnN0IGNvZmZlZURpdiA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdihcImNvZmZlZVwiKTtcblx0XHRjb2ZmZWVEaXYuYWRkQ2xhc3MoXCJleC1jb2ZmZWUtZGl2XCIpO1xuXHRcdGNvbnN0IGNvZmZlZUxpbmsgPSBjb2ZmZWVEaXYuY3JlYXRlRWwoXCJhXCIsIHtcblx0XHRocmVmOiBcImh0dHBzOi8va28tZmkuY29tL2FuZHJlYXN0cmViaW5nXCIsXG5cdFx0fSk7XG5cdFx0Y29uc3QgY29mZmVlSW1nID0gY29mZmVlTGluay5jcmVhdGVFbChcImltZ1wiLCB7XG5cdFx0YXR0cjoge1xuXHRcdFx0c3JjOiBcImh0dHBzOi8vY2RuLmtvLWZpLmNvbS9jZG4va29maTMucG5nP3Y9M1wiLFxuXHRcdH0sXG5cdFx0fSk7XG5cdFx0Y29mZmVlSW1nLmhlaWdodCA9IDQ1O1xuXG5cdFx0Ly9jb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xuXHRcdC8vY29udGFpbmVyRWwuZW1wdHkoKTtcbiAgXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnR2FtaWZ5IHlvdXIgUEtNIC0gU2V0dGluZ3MnIH0pO1xuXHRcdGNvbnNvbGUubG9nKCdzZXR0aW5ncyBjYWxsZWQnKVxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJyN0YWdzIHRvIGlnbm9yZScpXG5cdFx0XHQuc2V0RGVzYygnZW50ZXIgdGFncyB3aXRob3V0ICMgYW5kIHNlcGFyYXRlIHdpdGggXCIsIFwiLlxcbkluY2x1ZGUgbmVzdGVkIHRhZ3MuJylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHlvdXIgdGFnMSwgdGFnMi9zdWJ0YWcsIFx1MjAyNicpXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy50YWdzRXhjbHVkZSlcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnRhZ3NFeGNsdWRlID0gdmFsdWU7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdH0pKTtcblxuXHRcdFx0XHRcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdmb2xkZXIgdG8gaWdub3JlJylcblx0XHRcdC5zZXREZXNjKCdlbnRlciBmb2xkZXIgd2hpY2hzIGNvbnRlbnQgc2hhbGwgYmUgaWdub3JlZC4gU2VwYXJhdGUgd2l0aCBcIiwgXCIuJylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHlvdXIgZm9sZGVyMSwgZm9sZGVyMiwgXHUyMDI2Jylcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbGRlckV4Y2x1ZGUpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZygnZm9sZGVyIHRvIGV4Y2x1ZGU6ICcgKyB2YWx1ZSk7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9sZGVyRXhjbHVkZSA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdQcm9maWxlIFBhZ2UgTmFtZScpXG5cdFx0XHQuc2V0RGVzYygneW91IGNhbiBjaGFuZ2UgaGVyZSB0aGUgbmFtZSBvZiB5b3VyIHByb2ZpbGUgcGFnZSBpZiB5b3UgbGlrZS4nKVxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XG5cdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCduYW1lJylcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coJ2ZvbGRlciB0byBleGNsdWRlOiAnICsgdmFsdWUpO1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuYXZhdGFyUGFnZU5hbWUgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG5cdFx0XHRcdFxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ090aGVyIFNldHRpbmdzJyB9KTtcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdEaXNhYmxlIEluaXQgQ29tbWFuZCcpXG5cdFx0XHQuc2V0RGVzYygneW91IGNhbiByZW1vdmUgdGhlIGluaXQgY29tbWFuZCBmcm9tIGNvbW1hbmQgcHJvbXB0IGJ5IHN3aXRjaGluZyBvZmYuXFxucmVzdGFydCBuZWVkZWQuJylcblx0XHRcdC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT4gXG5cdFx0XHRcdHRvZ2dsZVxuICAgICAgICAgIFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlSW5pdENvbW1hbmQpXG4gICAgICAgIFx0XHRcdC5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgICAgICAgIFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZUluaXRDb21tYW5kID0gdmFsdWU7XG4gICAgICAgICAgICBcdFx0XHR0aGlzLnBsdWdpbi5zYXZlRGF0YSh0aGlzLnBsdWdpbi5zZXR0aW5ncyk7XG4gICAgICAgICAgXHRcdFx0fSksXG5cdFx0XHQpO1xuXG5cdFx0XG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnbGltaXQgdGhlIHZpc2libGUgbW9udGggaW4gdGhlIGNoYXJ0IG9uIHlvdXIgYXZhdGFyIHBhZ2U6ICcgKyB0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdmF0YXJQYWdlTmFtZSlcblx0XHRcdC5zZXREZXNjKCdpZiAwLCBhbGwgbW9udGggd2lsbCBiZSBzaG93bi4gRW50ZXIgYSBudW1iZXIgaG93IG1hbnkgbW9udGggc2hhbGwgYmUgc2hvd24uJylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignTnVtYmVyIG9mIE1vbnRoIHRvIHNob3cnKVxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jaGFydFJlZHV6aWVydW5nTW9uYXRlLnRvU3RyaW5nKCkpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuY2hhcnRSZWR1emllcnVuZ01vbmF0ZSA9IHBhcnNlSW50KHZhbHVlKTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG5cbiAgXG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdQcm9ncmVzc2l2ZSBTdW1tYXJpemF0aW9uJylcblx0XHRcdC5zZXREZXNjKCd5b3UgY2FuIGNoYW5nZSB3aGljaCBmb3JtYXR0aW5nIHlvdSB1c2UgZm9yIExheWVyIDIgYW5kIDMuJylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignTGF5ZXIgMiBpcyB1c3VhbGx5ICoqJylcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvZ3Jlc3NpdmVTdW1MYXllcjIpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coJ2ZvbGRlciB0byBleGNsdWRlOiAnICsgdmFsdWUpO1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvZ3Jlc3NpdmVTdW1MYXllcjIgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSlcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuXHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignTGF5ZXIgMyBpcyB1c3VhbGx5ID09Jylcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvZ3Jlc3NpdmVTdW1MYXllcjMpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coJ2ZvbGRlciB0byBleGNsdWRlOiAnICsgdmFsdWUpO1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvZ3Jlc3NpdmVTdW1MYXllcjMgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0fSkpO1xuXG5cdH1cbiAgfSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgfSwgX3R5cGVvZihvYmopO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCAiaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNEYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiB2YWx1ZSBhIGRhdGU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIERhdGUuIFRoZSBmdW5jdGlvbiB3b3JrcyBmb3IgZGF0ZXMgdHJhbnNmZXJyZWQgYWNyb3NzIGlmcmFtZXMuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZShOYU4pKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBzb21lIHZhbHVlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKCcyMDE0LTAyLTMxJylcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIG9iamVjdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSh7fSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8IF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBEYXRlXSc7XG59IiwgImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTtcblxuICAvLyBDbG9uZSB0aGUgZGF0ZVxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IF90eXBlb2YoYXJndW1lbnQpID09PSAnb2JqZWN0JyAmJiBhcmdTdHIgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ251bWJlcicgfHwgYXJnU3RyID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgU3RyaW5nXScpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlN0YXJ0aW5nIHdpdGggdjIuMC4wLWJldGEuMSBkYXRlLWZucyBkb2Vzbid0IGFjY2VwdCBzdHJpbmdzIGFzIGRhdGUgYXJndW1lbnRzLiBQbGVhc2UgdXNlIGBwYXJzZUlTT2AgdG8gcGFyc2Ugc3RyaW5ncy4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjc3RyaW5nLWFyZ3VtZW50c1wiKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufSIsICJpbXBvcnQgaXNEYXRlIGZyb20gXCIuLi9pc0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9XG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiBAcGFyYW0geyp9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHZhbGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgyMDE0LCAxLCAzMSkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWx1ZSwgY29udmVydGFibGUgaW50byBhIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKDEzOTM4MDQ4MDAwMDApXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNWYWxpZChkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIGlmICghaXNEYXRlKGRpcnR5RGF0ZSkgJiYgdHlwZW9mIGRpcnR5RGF0ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgcmV0dXJuICFpc05hTihOdW1iZXIoZGF0ZSkpO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0ludGVnZXIoZGlydHlOdW1iZXIpIHtcbiAgaWYgKGRpcnR5TnVtYmVyID09PSBudWxsIHx8IGRpcnR5TnVtYmVyID09PSB0cnVlIHx8IGRpcnR5TnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuICByZXR1cm4gbnVtYmVyIDwgMCA/IE1hdGguY2VpbChudW1iZXIpIDogTWF0aC5mbG9vcihudW1iZXIpO1xufSIsICJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBhZGRNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNzUwIG1pbGxpc2Vjb25kcyB0byAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gYWRkTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MzAuNzUwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59IiwgImltcG9ydCBhZGRNaWxsaXNlY29uZHMgZnJvbSBcIi4uL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN1Yk1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBzdWJ0cmFjdGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBzdWJ0cmFjdGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFN1YnRyYWN0IDc1MCBtaWxsaXNlY29uZHMgZnJvbSAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gc3ViTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MjkuMjUwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1Yk1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIC1hbW91bnQpO1xufSIsICJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0RheU9mWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZZZWFyVGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciBkaWZmZXJlbmNlID0gdGltZXN0YW1wIC0gc3RhcnRPZlllYXJUaW1lc3RhbXA7XG4gIHJldHVybiBNYXRoLmZsb29yKGRpZmZlcmVuY2UgLyBNSUxMSVNFQ09ORFNfSU5fREFZKSArIDE7XG59IiwgImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSAxO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwgImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhcik7XG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCAiaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgeWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwgImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENJU09XZWVrKGRhdGUpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkYXRlKS5nZXRUaW1lKCk7XG5cbiAgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwgInZhciBkZWZhdWx0T3B0aW9ucyA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRPcHRpb25zKCkge1xuICByZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdE9wdGlvbnMobmV3T3B0aW9ucykge1xuICBkZWZhdWx0T3B0aW9ucyA9IG5ld09wdGlvbnM7XG59IiwgImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8ud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAwKTtcblxuICAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsICJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJGZpcnN0V2Vla0NvbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpO1xuXG4gIC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuICB2YXIgZmlyc3RXZWVrT2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZOZXh0WWVhciwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWtPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mVGhpc1llYXIsIG9wdGlvbnMpO1xuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwgImltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpO1xuICB2YXIgeWVhciA9IGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWsgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vlay5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWssIG9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCAiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ1dlZWsoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuICB3aGlsZSAob3V0cHV0Lmxlbmd0aCA8IHRhcmdldExlbmd0aCkge1xuICAgIG91dHB1dCA9ICcwJyArIG91dHB1dDtcbiAgfVxuICByZXR1cm4gc2lnbiArIG91dHB1dDtcbn0iLCAiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24geShkYXRlLCB0b2tlbikge1xuICAgIC8vIEZyb20gaHR0cDovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS0zMS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9Gb3JtYXRfdG9rZW5zXG4gICAgLy8gfCBZZWFyICAgICB8ICAgICB5IHwgeXkgfCAgIHl5eSB8ICB5eXl5IHwgeXl5eXkgfFxuICAgIC8vIHwtLS0tLS0tLS0tfC0tLS0tLS18LS0tLXwtLS0tLS0tfC0tLS0tLS18LS0tLS0tLXxcbiAgICAvLyB8IEFEIDEgICAgIHwgICAgIDEgfCAwMSB8ICAgMDAxIHwgIDAwMDEgfCAwMDAwMSB8XG4gICAgLy8gfCBBRCAxMiAgICB8ICAgIDEyIHwgMTIgfCAgIDAxMiB8ICAwMDEyIHwgMDAwMTIgfFxuICAgIC8vIHwgQUQgMTIzICAgfCAgIDEyMyB8IDIzIHwgICAxMjMgfCAgMDEyMyB8IDAwMTIzIHxcbiAgICAvLyB8IEFEIDEyMzQgIHwgIDEyMzQgfCAzNCB8ICAxMjM0IHwgIDEyMzQgfCAwMTIzNCB8XG4gICAgLy8gfCBBRCAxMjM0NSB8IDEyMzQ1IHwgNDUgfCAxMjM0NSB8IDEyMzQ1IHwgMTIzNDUgfFxuXG4gICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModG9rZW4gPT09ICd5eScgPyB5ZWFyICUgMTAwIDogeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gTShkYXRlLCB0b2tlbikge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICByZXR1cm4gdG9rZW4gPT09ICdNJyA/IFN0cmluZyhtb250aCArIDEpIDogYWRkTGVhZGluZ1plcm9zKG1vbnRoICsgMSwgMik7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gZChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIGEoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF0ZS5nZXRVVENIb3VycygpIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlO1xuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlWzBdO1xuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlID09PSAnYW0nID8gJ2EubS4nIDogJ3AubS4nO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gaChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIEgoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIG0oZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDTWludXRlcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gcyhkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiBTKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIHZhciBmcmFjdGlvbmFsU2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMykpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZnJhY3Rpb25hbFNlY29uZHMsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsICJpbXBvcnQgZ2V0VVRDRGF5T2ZZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuaW1wb3J0IGxpZ2h0Rm9ybWF0dGVycyBmcm9tIFwiLi4vbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG52YXIgZGF5UGVyaW9kRW51bSA9IHtcbiAgYW06ICdhbScsXG4gIHBtOiAncG0nLFxuICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgbm9vbjogJ25vb24nLFxuICBtb3JuaW5nOiAnbW9ybmluZycsXG4gIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgbmlnaHQ6ICduaWdodCdcbn07XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCBNaWxsaXNlY29uZHMgaW4gZGF5ICAgICAgICAgICAgfFxuICogfCAgYiAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgfCAgQiAgfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgfFxuICogfCAgYyAgfCBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2VlayAgfCAgQyogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZSAgfCBMb2NhbCBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgfCAgRSAgfCBEYXkgb2Ygd2VlayAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgRiogfCBEYXkgb2Ygd2VlayBpbiBtb250aCAgICAgICAgICAgfFxuICogfCAgZyogfCBNb2RpZmllZCBKdWxpYW4gZGF5ICAgICAgICAgICAgfCAgRyAgfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaSEgfCBJU08gZGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgfCAgSSEgfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgfFxuICogfCAgaiogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfCAgSiogfCBMb2NhbGl6ZWQgaG91ciB3L28gZGF5IHBlcmlvZCAgfFxuICogfCAgayAgfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgfCAgSyAgfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbCogfCAoZGVwcmVjYXRlZCkgICAgICAgICAgICAgICAgICAgfCAgTCAgfCBTdGFuZC1hbG9uZSBtb250aCAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbyEgfCBPcmRpbmFsIG51bWJlciBtb2RpZmllciAgICAgICAgfCAgTyAgfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgfFxuICogfCAgcCEgfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgfCAgUCEgfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgfFxuICogfCAgcSAgfCBTdGFuZC1hbG9uZSBxdWFydGVyICAgICAgICAgICAgfCAgUSAgfCBRdWFydGVyICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgciogfCBSZWxhdGVkIEdyZWdvcmlhbiB5ZWFyICAgICAgICAgfCAgUiEgfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgdCEgfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgfCAgVCEgfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgfFxuICogfCAgdSAgfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgfCAgVSogfCBDeWNsaWMgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgdiogfCBUaW1lem9uZSAoZ2VuZXJpYyBub24tbG9jYXQuKSAgfCAgViogfCBUaW1lem9uZSAobG9jYXRpb24pICAgICAgICAgICAgfFxuICogfCAgdyAgfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgfCAgVyogfCBXZWVrIG9mIG1vbnRoICAgICAgICAgICAgICAgICAgfFxuICogfCAgeCAgfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgfCAgWCAgfCBUaW1lem9uZSAoSVNPLTg2MDEpICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgfFxuICogfCAgeiAgfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgfCAgWiogfCBUaW1lem9uZSAoYWxpYXNlcykgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAhIGFyZSBub24tc3RhbmRhcmQsIGJ1dCBpbXBsZW1lbnRlZCBieSBkYXRlLWZuczpcbiAqIC0gYG9gIG1vZGlmaWVzIHRoZSBwcmV2aW91cyB0b2tlbiB0byB0dXJuIGl0IGludG8gYW4gb3JkaW5hbCAoc2VlIGBmb3JtYXRgIGRvY3MpXG4gKiAtIGBpYCBpcyBJU08gZGF5IG9mIHdlZWsuIEZvciBgaWAgYW5kIGBpaWAgaXMgcmV0dXJucyBudW1lcmljIElTTyB3ZWVrIGRheXMsXG4gKiAgIGkuZS4gNyBmb3IgU3VuZGF5LCAxIGZvciBNb25kYXksIGV0Yy5cbiAqIC0gYElgIGlzIElTTyB3ZWVrIG9mIHllYXIsIGFzIG9wcG9zZWQgdG8gYHdgIHdoaWNoIGlzIGxvY2FsIHdlZWsgb2YgeWVhci5cbiAqIC0gYFJgIGlzIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLCBhcyBvcHBvc2VkIHRvIGBZYCB3aGljaCBpcyBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICogICBgUmAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBJYCBhbmQgYGlgXG4gKiAgIGZvciB1bml2ZXJzYWwgSVNPIHdlZWstbnVtYmVyaW5nIGRhdGUsIHdoZXJlYXNcbiAqICAgYFlgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgd2AgYW5kIGBlYFxuICogICBmb3Igd2Vlay1udW1iZXJpbmcgZGF0ZSBzcGVjaWZpYyB0byB0aGUgbG9jYWxlLlxuICogLSBgUGAgaXMgbG9uZyBsb2NhbGl6ZWQgZGF0ZSBmb3JtYXRcbiAqIC0gYHBgIGlzIGxvbmcgbG9jYWxpemVkIHRpbWUgZm9ybWF0XG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIEVyYVxuICBHOiBmdW5jdGlvbiBHKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBlcmEgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPiAwID8gMSA6IDA7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gQUQsIEJDXG4gICAgICBjYXNlICdHJzpcbiAgICAgIGNhc2UgJ0dHJzpcbiAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBBLCBCXG4gICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3RcbiAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiB5KGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAneW8nKSB7XG4gICAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnkoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIFkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHNpZ25lZFdlZWtZZWFyID0gZ2V0VVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucyk7XG4gICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICB2YXIgd2Vla1llYXIgPSBzaWduZWRXZWVrWWVhciA+IDAgPyBzaWduZWRXZWVrWWVhciA6IDEgLSBzaWduZWRXZWVrWWVhcjtcblxuICAgIC8vIFR3byBkaWdpdCB5ZWFyXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHR3b0RpZ2l0WWVhciwgMik7XG4gICAgfVxuXG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICdZbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUGFkZGluZ1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIFIoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgaXNvV2Vla1llYXIgPSBnZXRVVENJU09XZWVrWWVhcihkYXRlKTtcblxuICAgIC8vIFBhZGRpbmdcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiB1KGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBRdWFydGVyXG4gIFE6IGZ1bmN0aW9uIFEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAnUSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgY2FzZSAnUVEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG4gICAgICBjYXNlICdRbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuICAgICAgY2FzZSAnUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuICAgICAgY2FzZSAnUVFRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG4gICAgICBjYXNlICdRUVFRJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gcShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdxJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG4gICAgICBjYXNlICdxcSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG4gICAgICBjYXNlICdxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG4gICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gTShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICBjYXNlICdNTSc6XG4gICAgICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG4gICAgICBjYXNlICdNbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcbiAgICAgIGNhc2UgJ01NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAgIGNhc2UgJ01NTU0nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiBmdW5jdGlvbiBMKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMTCc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcbiAgICAgIGNhc2UgJ0xvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG4gICAgICBjYXNlICdMTExMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuICAgICAgY2FzZSAnTExMTCc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIHdlZWsgb2YgeWVhclxuICB3OiBmdW5jdGlvbiB3KGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciB3ZWVrID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKTtcbiAgICBpZiAodG9rZW4gPT09ICd3bycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IGZ1bmN0aW9uIEkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSBnZXRVVENJU09XZWVrKGRhdGUpO1xuICAgIGlmICh0b2tlbiA9PT0gJ0lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvV2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gZChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuZChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIEQoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mWWVhciA9IGdldFVUQ0RheU9mWWVhcihkYXRlKTtcbiAgICBpZiAodG9rZW4gPT09ICdEbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwge1xuICAgICAgICB1bml0OiAnZGF5T2ZZZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiBmdW5jdGlvbiBFKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgJ0VFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgJ0VFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gZShkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKE50aCBkYXkgb2Ygd2VlayB3aXRoIGN1cnJlbnQgbG9jYWxlIG9yIHdlZWtTdGFydHNPbilcbiAgICAgIGNhc2UgJ2UnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcbiAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2VlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdlZWVlJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2Vla1xuICBjOiBmdW5jdGlvbiBjKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG4gICAgICBjYXNlICdjYyc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcbiAgICAgIGNhc2UgJ2NvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdjY2NjJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gaShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgaXNvRGF5T2ZXZWVrID0gZGF5T2ZXZWVrID09PSAwID8gNyA6IGRheU9mV2VlaztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcbiAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29EYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAybmRcbiAgICAgIGNhc2UgJ2lvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnaWlpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiBhKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0sIFBNLCBtaWRuaWdodCwgbm9vblxuICBiOiBmdW5jdGlvbiBiKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYic6XG4gICAgICBjYXNlICdiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYmJiYic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiBCKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuICAgIGlmIChob3VycyA+PSAxNykge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ldmVuaW5nO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uYWZ0ZXJub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gNCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5tb3JuaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5pZ2h0O1xuICAgIH1cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdCJzpcbiAgICAgIGNhc2UgJ0JCJzpcbiAgICAgIGNhc2UgJ0JCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdCQkJCJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiBoKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2hvJykge1xuICAgICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG4gICAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMTI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiBIKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuSChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IGZ1bmN0aW9uIEsoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG4gICAgaWYgKHRva2VuID09PSAnS28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiBmdW5jdGlvbiBrKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG4gICAgaWYgKHRva2VuID09PSAna28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gbShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdtbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDTWludXRlcygpLCB7XG4gICAgICAgIHVuaXQ6ICdtaW51dGUnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIHMoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnc28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ1NlY29uZHMoKSwge1xuICAgICAgICB1bml0OiAnc2Vjb25kJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMucyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiBTKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gWChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIGlmICh0aW1lem9uZU9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuICdaJztcbiAgICB9XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhgXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYWGBcbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGAnKzAwOjAwJ2Agb3IgZXF1aXZhbGVudClcbiAgeDogZnVuY3Rpb24geChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4YFxuICAgICAgY2FzZSAneHh4eCc6XG4gICAgICBjYXNlICd4eCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eHhgXG4gICAgICBjYXNlICd4eHh4eCc6XG4gICAgICBjYXNlICd4eHgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChHTVQpXG4gIE86IGZ1bmN0aW9uIE8oZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuICAgICAgY2FzZSAnT09PTyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXRpb24pXG4gIHo6IGZ1bmN0aW9uIHooZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuICAgICAgY2FzZSAnenp6eic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFNlY29uZHMgdGltZXN0YW1wXG4gIHQ6IGZ1bmN0aW9uIHQoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihvcmlnaW5hbERhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gVChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBvcmlnaW5hbERhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVTaG9ydChvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApO1xuICB2YXIgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyhvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIGlmIChvZmZzZXQgJSA2MCA9PT0gMCkge1xuICAgIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgICByZXR1cm4gc2lnbiArIGFkZExlYWRpbmdaZXJvcyhNYXRoLmFicyhvZmZzZXQpIC8gNjAsIDIpO1xuICB9XG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCksIDIpO1xuICB2YXIgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCAidmFyIGRhdGVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xudmFyIHRpbWVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gdGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgY2FzZSAncHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICBjYXNlICdwcHBwJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xudmFyIGRhdGVUaW1lTG9uZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uIGRhdGVUaW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHZhciBtYXRjaFJlc3VsdCA9IHBhdHRlcm4ubWF0Y2goLyhQKykocCspPy8pIHx8IFtdO1xuICB2YXIgZGF0ZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsxXTtcbiAgdmFyIHRpbWVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMl07XG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuICBzd2l0Y2ggKGRhdGVQYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0LnJlcGxhY2UoJ3t7ZGF0ZX19JywgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKS5yZXBsYWNlKCd7e3RpbWV9fScsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59O1xudmFyIGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9uZ0Zvcm1hdHRlcnM7IiwgIi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSB7XG4gIHZhciB1dGNEYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSwgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSkpO1xuICB1dGNEYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSAtIHV0Y0RhdGUuZ2V0VGltZSgpO1xufSIsICJ2YXIgcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zID0gWydEJywgJ0REJ107XG52YXIgcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMgPSBbJ1lZJywgJ1lZWVknXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgaWYgKHRva2VuID09PSAnWVlZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnRCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnREQnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9XG59IiwgInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xudmFyIGZvcm1hdERpc3RhbmNlID0gZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICBpZiAodHlwZW9mIHRva2VuVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQudG9TdHJpbmcoKSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiAmJiBvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2luICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIGFnbyc7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0RGlzdGFuY2U7IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn0iLCAiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzXCI7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBNTU1NIGRvLCB5JyxcbiAgbG9uZzogJ01NTU0gZG8sIHknLFxuICBtZWRpdW06ICdNTU0gZCwgeScsXG4gIHNob3J0OiAnTU0vZGQveXl5eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdoOm1tOnNzIGEgenp6eicsXG4gIGxvbmc6ICdoOm1tOnNzIGEgeicsXG4gIG1lZGl1bTogJ2g6bW06c3MgYScsXG4gIHNob3J0OiAnaDptbSBhJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwgInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcbnZhciBmb3JtYXRSZWxhdGl2ZSA9IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdFJlbGF0aXZlOyIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5SW5kZXgsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29udGV4dCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuY29udGV4dCA/IFN0cmluZyhvcHRpb25zLmNvbnRleHQpIDogJ3N0YW5kYWxvbmUnO1xuICAgIHZhciB2YWx1ZXNBcnJheTtcbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YXIgX3dpZHRoID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLnZhbHVlc1tfd2lkdGhdIHx8IGFyZ3MudmFsdWVzW19kZWZhdWx0V2lkdGhdO1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4O1xuICAgIC8vIEB0cy1pZ25vcmU6IEZvciBzb21lIHJlYXNvbiBUeXBlU2NyaXB0IGp1c3QgZG9uJ3Qgd2FudCB0byBtYXRjaCBpdCwgbm8gbWF0dGVyIGhvdyBoYXJkIHdlIHRyeS4gSSBjaGFsbGVuZ2UgeW91IHRvIHRyeSB0byByZW1vdmUgaXQhXG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn0iLCAiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanNcIjtcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydCJywgJ0EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnQkMnLCAnQUQnXSxcbiAgd2lkZTogWydCZWZvcmUgQ2hyaXN0JywgJ0Fubm8gRG9taW5pJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUTEnLCAnUTInLCAnUTMnLCAnUTQnXSxcbiAgd2lkZTogWycxc3QgcXVhcnRlcicsICcybmQgcXVhcnRlcicsICczcmQgcXVhcnRlcicsICc0dGggcXVhcnRlciddXG59O1xuXG4vLyBOb3RlOiBpbiBFbmdsaXNoLCB0aGUgbmFtZXMgb2YgZGF5cyBvZiB0aGUgd2VlayBhbmQgbW9udGhzIGFyZSBjYXBpdGFsaXplZC5cbi8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuLy8gR2VuZXJhbGx5LCBmb3JtYXR0ZWQgZGF0ZXMgc2hvdWxkIGxvb2sgbGlrZSB0aGV5IGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc2VudGVuY2UsXG4vLyBlLmcuIGluIFNwYW5pc2ggbGFuZ3VhZ2UgdGhlIHdlZWtkYXlzIGFuZCBtb250aHMgc2hvdWxkIGJlIGluIHRoZSBsb3dlcmNhc2UuXG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydKJywgJ0YnLCAnTScsICdBJywgJ00nLCAnSicsICdKJywgJ0EnLCAnUycsICdPJywgJ04nLCAnRCddLFxuICBhYmJyZXZpYXRlZDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICB3aWRlOiBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ10sXG4gIHNob3J0OiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gIGFiYnJldmlhdGVkOiBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddLFxuICB3aWRlOiBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9XG59O1xudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyLCBfb3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcblxuICAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGAuXG4gIC8vXG4gIC8vIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLlxuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCc7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnbmQnO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bWJlciArICd0aCc7XG59O1xudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIGFyZ3VtZW50Q2FsbGJhY2socXVhcnRlcikge1xuICAgICAgcmV0dXJuIHF1YXJ0ZXIgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucykgPyBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSkgOiBmaW5kS2V5KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhrZXkpIDoga2V5O1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59XG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgJiYgcHJlZGljYXRlKG9iamVjdFtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoUGF0dGVybkZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MubWF0Y2hQYXR0ZXJuKTtcbiAgICBpZiAoIW1hdGNoUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLnBhcnNlUGF0dGVybik7XG4gICAgaWYgKCFwYXJzZVJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHBhcnNlUmVzdWx0WzBdKSA6IHBhcnNlUmVzdWx0WzBdO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59IiwgImltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzXCI7XG5pbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzXCI7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSh0aHxzdHxuZHxyZCk/IHF1YXJ0ZXIvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZlYnxtYXJ8YXByfG1heXxqdW58anVsfGF1Z3xzZXB8b2N0fG5vdnxkZWMpL2ksXG4gIHdpZGU6IC9eKGphbnVhcnl8ZmVicnVhcnl8bWFyY2h8YXByaWx8bWF5fGp1bmV8anVseXxhdWd1c3R8c2VwdGVtYmVyfG9jdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmovaSwgL15mL2ksIC9ebS9pLCAvXmEvaSwgL15tL2ksIC9eai9pLCAvXmovaSwgL15hL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXSxcbiAgYW55OiBbL15qYS9pLCAvXmYvaSwgL15tYXIvaSwgL15hcC9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmF1L2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdHdmXS9pLFxuICBzaG9ydDogL14oc3V8bW98dHV8d2V8dGh8ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW58bW9ufHR1ZXx3ZWR8dGh1fGZyaXxzYXQpL2ksXG4gIHdpZGU6IC9eKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9edy9pLCAvXnQvaSwgL15mL2ksIC9ecy9pXSxcbiAgYW55OiBbL15zdS9pLCAvXm0vaSwgL150dS9pLCAvXncvaSwgL150aC9pLCAvXmYvaSwgL15zYS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGF8cHxtaXxufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaSxcbiAgYW55OiAvXihbYXBdXFwuP1xccz9tXFwuP3xtaWRuaWdodHxub29ufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvXm1pL2ksXG4gICAgbm9vbjogL15uby9pLFxuICAgIG1vcm5pbmc6IC9tb3JuaW5nL2ksXG4gICAgYWZ0ZXJub29uOiAvYWZ0ZXJub29uL2ksXG4gICAgZXZlbmluZzogL2V2ZW5pbmcvaSxcbiAgICBuaWdodDogL25pZ2h0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiB2YWx1ZUNhbGxiYWNrKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIHZhbHVlQ2FsbGJhY2soaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwgImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tIFwiLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tIFwiLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tIFwiLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSBcIi4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoIGZyb20gXCIuL19saWIvbWF0Y2gvaW5kZXguanNcIjtcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnZW4tVVMnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDAgLyogU3VuZGF5ICovLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsICJpbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0TG9jYWxlOyIsICJpbXBvcnQgaXNWYWxpZCBmcm9tIFwiLi4vaXNWYWxpZC9pbmRleC5qc1wiO1xuaW1wb3J0IHN1Yk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9uZ0Zvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tIFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qc1wiOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcbnZhciBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1t5WVFxTUx3SWREZWNpaEhLa21zXW98KFxcdylcXDEqfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xuXG4vLyBUaGlzIFJlZ0V4cCBjYXRjaGVzIHN5bWJvbHMgZXNjYXBlZCBieSBxdW90ZXMsIGFuZCBhbHNvXG4vLyBzZXF1ZW5jZXMgb2Ygc3ltYm9scyBQLCBwLCBhbmQgdGhlIGNvbWJpbmF0aW9ucyBsaWtlIGBQUFBQUFBQcHBwcHBgXG52YXIgbG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvUCtwK3xQK3xwK3wnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcbnZhciBlc2NhcGVkU3RyaW5nUmVnRXhwID0gL14nKFteXSo/KSc/JC87XG52YXIgZG91YmxlUXVvdGVSZWdFeHAgPSAvJycvZztcbnZhciB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG5cbi8qKlxuICogQG5hbWUgZm9ybWF0XG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEZvcm1hdCB0aGUgZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIGluIHRoZSBnaXZlbiBmb3JtYXQuIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqID4gXHUyNkEwXHVGRTBGIFBsZWFzZSBub3RlIHRoYXQgdGhlIGBmb3JtYXRgIHRva2VucyBkaWZmZXIgZnJvbSBNb21lbnQuanMgYW5kIG90aGVyIGxpYnJhcmllcy5cbiAqID4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogVGhlIGNoYXJhY3RlcnMgd3JhcHBlZCBiZXR3ZWVuIHR3byBzaW5nbGUgcXVvdGVzIGNoYXJhY3RlcnMgKCcpIGFyZSBlc2NhcGVkLlxuICogVHdvIHNpbmdsZSBxdW90ZXMgaW4gYSByb3csIHdoZXRoZXIgaW5zaWRlIG9yIG91dHNpZGUgYSBxdW90ZWQgc2VxdWVuY2UsIHJlcHJlc2VudCBhICdyZWFsJyBzaW5nbGUgcXVvdGUuXG4gKiAoc2VlIHRoZSBsYXN0IGV4YW1wbGUpXG4gKlxuICogRm9ybWF0IG9mIHRoZSBzdHJpbmcgaXMgYmFzZWQgb24gVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZVxuICogd2l0aCBhIGZldyBhZGRpdGlvbnMgKHNlZSBub3RlIDcgYmVsb3cgdGhlIHRhYmxlKS5cbiAqXG4gKiBBY2NlcHRlZCBwYXR0ZXJuczpcbiAqIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBhdHRlcm4gfCBSZXN1bHQgZXhhbXBsZXMgICAgICAgICAgICAgICAgICAgfCBOb3RlcyB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tfFxuICogfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRy4uR0dHICB8IEFELCBCQyAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0cgICAgfCBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHRyAgIHwgQSwgQiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBDYWxlbmRhciB5ZWFyICAgICAgICAgICAgICAgICAgIHwgeSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHlvICAgICAgfCA0NHRoLCAxc3QsIDB0aCwgMTd0aCAgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5ICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5eSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgIHwgWSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlvICAgICAgfCA0NHRoLCAxc3QsIDE5MDB0aCwgMjAxN3RoICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZWSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgIHwgUiAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSICAgICAgfCAtNDMsIDAwLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlIgICAgIHwgLTA0MywgMDAwLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUiAgICB8IC0wMDQzLCAwMDAwLCAwMDAxLCAxOTAwLCAyMDE3ICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlJSICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUsNyB8XG4gKiB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICAgfCB1ICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXUgICAgICB8IC00MywgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dSAgICAgfCAtMDQzLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1ICAgIHwgLTAwNDMsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dXUgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgUXVhcnRlciAoZm9ybWF0dGluZykgICAgICAgICAgICB8IFEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUVEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgUXVhcnRlciAoc3RhbmQtYWxvbmUpICAgICAgICAgICB8IHEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcXEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgTW9udGggKGZvcm1hdHRpbmcpICAgICAgICAgICAgICB8IE0gICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU0gICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTSAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTU0gICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTW9udGggKHN0YW5kLWFsb25lKSAgICAgICAgICAgICB8IEwgICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTEwgICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTCAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTEwgICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgICB8IHcgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3byAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd3cgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgICB8IEkgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSUkgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgICB8IGQgICAgICAgfCAxLCAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzFzdCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGQgICAgICB8IDAxLCAwMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgICB8IEQgICAgICAgfCAxLCAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzY1dGgsIDM2NnRoICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREQgICAgICB8IDAxLCAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERERCAgICAgfCAwMDEsIDAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREREICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBEYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgICAgIHwgRS4uRUVFICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUVFICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICB8IGkgICAgICAgfCAxLCAyLCAzLCAuLi4sIDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgN3RoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWkgICAgICB8IDAxLCAwMiwgLi4uLCAwNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWkgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpaSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCA3ICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgfCBlICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW8gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWUgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZWUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoc3RhbmQtYWxvbmUpIHwgYyAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjYyAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2MgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjYyAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2NjICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICB8IGEuLmFhICAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWEgICAgIHwgYW0sIHBtICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYSAgICB8IGEubS4sIHAubS4gICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWFhICAgfCBhLCBwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgfCBiLi5iYiAgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiICAgICB8IGFtLCBwbSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmIgICAgfCBhLm0uLCBwLm0uLCBub29uLCBtaWRuaWdodCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiYiAgIHwgYSwgcCwgbiwgbWkgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgIHwgQi4uQkJCICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkIgICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCQiAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgIHwgaCAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAxMnRoICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBoaCAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgIHwgSCAgICAgICB8IDAsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhvICAgICAgfCAwdGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBISCAgICAgIHwgMDAsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgIHwgSyAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAwdGggICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLSyAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgIHwgayAgICAgICB8IDI0LCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtvICAgICAgfCAyNHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrayAgICAgIHwgMjQsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbSAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1vICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbSAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcyAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNvICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzcyAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgIHwgUyAgICAgICB8IDAsIDEsIC4uLiwgOSAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTICAgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1MgICAgIHwgMDAwLCAwMDEsIC4uLiwgOTk5ICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTUyAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvIFopICAgICAgICB8IFggICAgICAgfCAtMDgsICswNTMwLCBaICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWCAgICAgIHwgLTA4MDAsICswNTMwLCBaICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYICAgICB8IC0wODowMCwgKzA1OjMwLCBaICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFggICAgfCAtMDgwMCwgKzA1MzAsIFosICsxMjM0NTYgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYWCAgIHwgLTA4OjAwLCArMDU6MzAsIFosICsxMjozNDo1NiAgICAgIHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgIHwgeCAgICAgICB8IC0wOCwgKzA1MzAsICswMCAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4ICAgICAgfCAtMDgwMCwgKzA1MzAsICswMDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHggICAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eCAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAsICsxMjM0NTYgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHh4ICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwLCArMTI6MzQ6NTYgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICAgfCBPLi4uT09PIHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgT09PTyAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIgICAgIHxcbiAqIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pICB8IHouLi56enogfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCA2ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB6enp6ICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiw2ICAgfFxuICogfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgIHwgdCAgICAgICB8IDUxMjk2OTUyMCAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHR0ICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgfCBUICAgICAgIHwgNTEyOTY5NTIwOTAwICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVFQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgICB8IFAgICAgICAgfCAwNC8yOS8xNDUzICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUCAgICAgIHwgQXByIDI5LCAxNDUzICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQICAgICB8IEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFAgICAgfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICAgfCBwICAgICAgIHwgMTI6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHAgICAgICB8IDEyOjAwOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcCAgICAgfCAxMjowMDowMCBBTSBHTVQrMiAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHBwICAgIHwgMTI6MDA6MDAgQU0gR01UKzAyOjAwICAgICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBDb21iaW5hdGlvbiBvZiBkYXRlIGFuZCB0aW1lICAgIHwgUHAgICAgICB8IDA0LzI5LzE0NTMsIDEyOjAwIEFNICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQcHAgICAgfCBBcHIgMjksIDE0NTMsIDEyOjAwOjAwIEFNICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBwcHAgIHwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUHBwcHB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICB8IDIsNyAgIHxcbiAqIE5vdGVzOlxuICogMS4gXCJGb3JtYXR0aW5nXCIgdW5pdHMgKGUuZy4gZm9ybWF0dGluZyBxdWFydGVyKSBpbiB0aGUgZGVmYXVsdCBlbi1VUyBsb2NhbGVcbiAqICAgIGFyZSB0aGUgc2FtZSBhcyBcInN0YW5kLWFsb25lXCIgdW5pdHMsIGJ1dCBhcmUgZGlmZmVyZW50IGluIHNvbWUgbGFuZ3VhZ2VzLlxuICogICAgXCJGb3JtYXR0aW5nXCIgdW5pdHMgYXJlIGRlY2xpbmVkIGFjY29yZGluZyB0byB0aGUgcnVsZXMgb2YgdGhlIGxhbmd1YWdlXG4gKiAgICBpbiB0aGUgY29udGV4dCBvZiBhIGRhdGUuIFwiU3RhbmQtYWxvbmVcIiB1bml0cyBhcmUgYWx3YXlzIG5vbWluYXRpdmUgc2luZ3VsYXI6XG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBMTExMJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZCdgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBNTU1NJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZHUnYFxuICpcbiAqIDIuIEFueSBzZXF1ZW5jZSBvZiB0aGUgaWRlbnRpY2FsIGxldHRlcnMgaXMgYSBwYXR0ZXJuLCB1bmxlc3MgaXQgaXMgZXNjYXBlZCBieVxuICogICAgdGhlIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIChzZWUgYmVsb3cpLlxuICogICAgSWYgdGhlIHNlcXVlbmNlIGlzIGxvbmdlciB0aGFuIGxpc3RlZCBpbiB0YWJsZSAoZS5nLiBgRUVFRUVFRUVFRUVgKVxuICogICAgdGhlIG91dHB1dCB3aWxsIGJlIHRoZSBzYW1lIGFzIGRlZmF1bHQgcGF0dGVybiBmb3IgdGhpcyB1bml0LCB1c3VhbGx5XG4gKiAgICB0aGUgbG9uZ2VzdCBvbmUgKGluIGNhc2Ugb2YgSVNPIHdlZWtkYXlzLCBgRUVFRWApLiBEZWZhdWx0IHBhdHRlcm5zIGZvciB1bml0c1xuICogICAgYXJlIG1hcmtlZCB3aXRoIFwiMlwiIGluIHRoZSBsYXN0IGNvbHVtbiBvZiB0aGUgdGFibGUuXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU0nKSAvLz0+ICdOb3YnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NJykgLy89PiAnTidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqIDMuIFNvbWUgcGF0dGVybnMgY291bGQgYmUgdW5saW1pdGVkIGxlbmd0aCAoc3VjaCBhcyBgeXl5eXl5eXlgKS5cbiAqICAgIFRoZSBvdXRwdXQgd2lsbCBiZSBwYWRkZWQgd2l0aCB6ZXJvcyB0byBtYXRjaCB0aGUgbGVuZ3RoIG9mIHRoZSBwYXR0ZXJuLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAneXl5eXl5eXknKSAvLz0+ICcwMDAwMjAxNydgXG4gKlxuICogNC4gYFFRUVFRYCBhbmQgYHFxcXFxYCBjb3VsZCBiZSBub3Qgc3RyaWN0bHkgbnVtZXJpY2FsIGluIHNvbWUgbG9jYWxlcy5cbiAqICAgIFRoZXNlIHRva2VucyByZXByZXNlbnQgdGhlIHNob3J0ZXN0IGZvcm0gb2YgdGhlIHF1YXJ0ZXIuXG4gKlxuICogNS4gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIHBhdHRlcm5zIGFyZSBCLkMuIHllYXJzOlxuICpcbiAqICAgIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICogICAgfCBBQyAxIHwgICAxIHwgICAxIHxcbiAqICAgIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gKiAgICB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICpcbiAqICAgIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAqICAgIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZDpcbiAqXG4gKiAgICB8IFllYXIgfCBgeXlgIHwgYHV1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tLXwtLS0tLS18XG4gKiAgICB8IDEgICAgfCAgIDAxIHwgICAwMSB8XG4gKiAgICB8IDE0ICAgfCAgIDE0IHwgICAxNCB8XG4gKiAgICB8IDM3NiAgfCAgIDc2IHwgIDM3NiB8XG4gKiAgICB8IDE0NTMgfCAgIDUzIHwgMTQ1MyB8XG4gKlxuICogICAgVGhlIHNhbWUgZGlmZmVyZW5jZSBpcyB0cnVlIGZvciBsb2NhbCBhbmQgSVNPIHdlZWstbnVtYmVyaW5nIHllYXJzIChgWWAgYW5kIGBSYCksXG4gKiAgICBleGNlcHQgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhcnMgYXJlIGRlcGVuZGVudCBvbiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gXG4gKiAgICBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAoY29tcGFyZSBbZ2V0SVNPV2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0SVNPV2Vla1llYXJ9XG4gKiAgICBhbmQgW2dldFdlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldFdlZWtZZWFyfSkuXG4gKlxuICogNi4gU3BlY2lmaWMgbm9uLWxvY2F0aW9uIHRpbWV6b25lcyBhcmUgY3VycmVudGx5IHVuYXZhaWxhYmxlIGluIGBkYXRlLWZuc2AsXG4gKiAgICBzbyByaWdodCBub3cgdGhlc2UgdG9rZW5zIGZhbGwgYmFjayB0byBHTVQgdGltZXpvbmVzLlxuICpcbiAqIDcuIFRoZXNlIHBhdHRlcm5zIGFyZSBub3QgaW4gdGhlIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqICAgIC0gYGlgOiBJU08gZGF5IG9mIHdlZWtcbiAqICAgIC0gYElgOiBJU08gd2VlayBvZiB5ZWFyXG4gKiAgICAtIGBSYDogSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqICAgIC0gYHRgOiBzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgVGA6IG1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYG9gOiBvcmRpbmFsIG51bWJlciBtb2RpZmllclxuICogICAgLSBgUGA6IGxvbmcgbG9jYWxpemVkIGRhdGVcbiAqICAgIC0gYHBgOiBsb25nIGxvY2FsaXplZCB0aW1lXG4gKlxuICogOC4gYFlZYCBhbmQgYFlZWVlgIHRva2VucyByZXByZXNlbnQgd2Vlay1udW1iZXJpbmcgeWVhcnMgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggeWVhcnMuXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiA5LiBgRGAgYW5kIGBERGAgdG9rZW5zIHJlcHJlc2VudCBkYXlzIG9mIHRoZSB5ZWFyIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIGRheXMgb2YgdGhlIG1vbnRoLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCAtIHRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU9MV0gLSB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIgdG9rZW5zIGBZWWAgYW5kIGBZWVlZYDtcbiAqICAgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSBkYXkgb2YgeWVhciB0b2tlbnMgYERgIGFuZCBgRERgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmdcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBkYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBsb2NhbGl6ZWAgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBmb3JtYXRMb25nYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgN1xuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxMSBGZWJydWFyeSAyMDE0IGluIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIpLCBcImRvICdkZScgTU1NTSB5eXl5XCIsIHtcbiAqICAgbG9jYWxlOiBlb0xvY2FsZVxuICogfSlcbiAqIC8vPT4gJzItYSBkZSBqdWxpbyAyMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBFc2NhcGUgc3RyaW5nIGJ5IHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzOlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIsIDE1KSwgXCJoICdvJydjbG9jaydcIilcbiAqIC8vPT4gXCIzIG8nY2xvY2tcIlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdChkaXJ0eURhdGUsIGRpcnR5Rm9ybWF0U3RyLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfb3B0aW9ucyRsb2NhbGUsIF9yZWYyLCBfcmVmMywgX3JlZjQsIF9vcHRpb25zJGZpcnN0V2Vla0NvbiwgX29wdGlvbnMkbG9jYWxlMiwgX29wdGlvbnMkbG9jYWxlMiRvcHRpLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIsIF9yZWY1LCBfcmVmNiwgX3JlZjcsIF9vcHRpb25zJHdlZWtTdGFydHNPbiwgX29wdGlvbnMkbG9jYWxlMywgX29wdGlvbnMkbG9jYWxlMyRvcHRpLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwzLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0O1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGZvcm1hdFN0ciA9IFN0cmluZyhkaXJ0eUZvcm1hdFN0cik7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciBsb2NhbGUgPSAoX3JlZiA9IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubG9jYWxlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRsb2NhbGUgIT09IHZvaWQgMCA/IF9vcHRpb25zJGxvY2FsZSA6IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IGRlZmF1bHRMb2NhbGU7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSB0b0ludGVnZXIoKF9yZWYyID0gKF9yZWYzID0gKF9yZWY0ID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMiA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUyID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMiRvcHRpID0gX29wdGlvbnMkbG9jYWxlMi5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUyJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTIkb3B0aS5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWY0ICE9PSB2b2lkIDAgPyBfcmVmNCA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogMSk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWY1ID0gKF9yZWY2ID0gKF9yZWY3ID0gKF9vcHRpb25zJHdlZWtTdGFydHNPbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9vcHRpb25zJHdlZWtTdGFydHNPbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkd2Vla1N0YXJ0c09uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyRvcHRpID0gX29wdGlvbnMkbG9jYWxlMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTMkb3B0aS53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY3ICE9PSB2b2lkIDAgPyBfcmVmNyA6IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjYgIT09IHZvaWQgMCA/IF9yZWY2IDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0LndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjUgIT09IHZvaWQgMCA/IF9yZWY1IDogMCk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG4gIGlmICghbG9jYWxlLmxvY2FsaXplKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gbG9jYWxpemUgcHJvcGVydHknKTtcbiAgfVxuICBpZiAoIWxvY2FsZS5mb3JtYXRMb25nKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gZm9ybWF0TG9uZyBwcm9wZXJ0eScpO1xuICB9XG4gIHZhciBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgaWYgKCFpc1ZhbGlkKG9yaWdpbmFsRGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIH1cblxuICAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG4gIHZhciB0aW1lem9uZU9mZnNldCA9IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlKTtcbiAgdmFyIHV0Y0RhdGUgPSBzdWJNaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlLCB0aW1lem9uZU9mZnNldCk7XG4gIHZhciBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZVxuICB9O1xuICB2YXIgcmVzdWx0ID0gZm9ybWF0U3RyLm1hdGNoKGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICdwJyB8fCBmaXJzdENoYXJhY3RlciA9PT0gJ1AnKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcpO1xuICAgIH1cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIC8vIFJlcGxhY2UgdHdvIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIHdpdGggb25lIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJcbiAgICBpZiAoc3Vic3RyaW5nID09PSBcIicnXCIpIHtcbiAgICAgIHJldHVybiBcIidcIjtcbiAgICB9XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG4gICAgdmFyIGZvcm1hdHRlciA9IGZvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zKSAmJiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIFN0cmluZyhkaXJ0eURhdGUpKTtcbiAgICAgIH1cbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgU3RyaW5nKGRpcnR5RGF0ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcm1hdHRlcih1dGNEYXRlLCBzdWJzdHJpbmcsIGxvY2FsZS5sb2NhbGl6ZSwgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYCcgKyBmaXJzdENoYXJhY3RlciArICdgJyk7XG4gICAgfVxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY2xlYW5Fc2NhcGVkU3RyaW5nKGlucHV0KSB7XG4gIHZhciBtYXRjaGVkID0gaW5wdXQubWF0Y2goZXNjYXBlZFN0cmluZ1JlZ0V4cCk7XG4gIGlmICghbWF0Y2hlZCkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuICByZXR1cm4gbWF0Y2hlZFsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59IiwgImltcG9ydCB7IFRGaWxlLCBBcHAsIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XHJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmF0ZVByb2dyZXNzaXZlU3VtbWFyaXphdGlvbihjaGFyQ291bnRUb3RhbDogbnVtYmVyLCBsYXllcjJjb3VudDogbnVtYmVyLCBsYXllcjNjb3VudDogbnVtYmVyKTogbnVtYmVyIHtcclxuXHRjb25zdCBwZXJjZW50TGF5ZXIyID0gbGF5ZXIyY291bnQgKiAxMDAgLyBjaGFyQ291bnRUb3RhbDtcclxuICAgIGNvbnN0IHBlcmNlbnRMYXllcjMgPSBsYXllcjNjb3VudCAqIDEwMCAvIGxheWVyMmNvdW50O1xyXG5cdHZhciBsYXllcjJtYWp1cml0eSA9IDA7XHJcblx0dmFyIGxheWVyM21hanVyaXR5ID0gMDtcclxuXHR2YXIgbWFqdXJpdHkgPSAwO1xyXG5cdGlmIChjaGFyQ291bnRUb3RhbCA8IDMwMDApIHtcclxuXHRcdG1hanVyaXR5ID0gMDtcclxuXHRcdC8vY29uc29sZS5sb2coYE5vdGUgaXMgbm90IGxvbmcgZW5vdWdoIHRvIGdldCBpbnRvIGNhbGN1bGF0aW9uIGZvciBtYWp1cml0eS4gVGhlIHRvdGFsIGNoYXJhY3RlciBjb3VudCBpcyAke2NoYXJDb3VudFRvdGFsfWApO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRpZiAocGVyY2VudExheWVyMiA9PSAwKSB7XHJcblx0XHRcdGxheWVyMm1hanVyaXR5ID0gMDtcclxuXHRcdH0gZWxzZSBpZiAocGVyY2VudExheWVyMiA8PSAxMCkge1xyXG5cdFx0XHRsYXllcjJtYWp1cml0eSA9IDU7XHJcblx0XHR9IGVsc2UgaWYgKHBlcmNlbnRMYXllcjIgPD0gMjApIHtcclxuXHRcdFx0bGF5ZXIybWFqdXJpdHkgPSA0O1xyXG5cdFx0fSBlbHNlIGlmIChwZXJjZW50TGF5ZXIyIDw9IDMwKSB7XHJcblx0XHRcdGxheWVyMm1hanVyaXR5ID0gMztcclxuXHRcdH0gZWxzZSBpZiAocGVyY2VudExheWVyMiA8PSA0MCkge1xyXG5cdFx0XHRsYXllcjJtYWp1cml0eSA9IDI7XHJcblx0XHR9IGVsc2UgaWYgKHBlcmNlbnRMYXllcjIgPD0gNDApIHtcclxuXHRcdFx0bGF5ZXIybWFqdXJpdHkgPSAxO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bGF5ZXIybWFqdXJpdHkgPSAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChsYXllcjNjb3VudCA9PSAwKSB7XHJcblx0XHRcdGxheWVyM21hanVyaXR5ID0gMDtcclxuXHRcdH0gZWxzZSBpZiAocGVyY2VudExheWVyMyA8PSAxMCkge1xyXG5cdFx0XHRsYXllcjNtYWp1cml0eSA9IDU7XHJcblx0XHR9IGVsc2UgaWYgKHBlcmNlbnRMYXllcjMgPD0gMjApIHtcclxuXHRcdFx0bGF5ZXIzbWFqdXJpdHkgPSA0O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bGF5ZXIzbWFqdXJpdHkgPSAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChsYXllcjJtYWp1cml0eSA9PSAxICYmIGxheWVyM21hanVyaXR5ID09IDApIHtcclxuXHRcdFx0bWFqdXJpdHkgPSAxO1xyXG5cdFx0fSBlbHNlIGlmIChsYXllcjJtYWp1cml0eSA9PSAyICYmIGxheWVyM21hanVyaXR5ID09IDApIHtcclxuXHRcdFx0bWFqdXJpdHkgPSAyO1xyXG5cdFx0fSBlbHNlIGlmIChsYXllcjJtYWp1cml0eSA+PSAzICYmIGxheWVyM21hanVyaXR5ID09IDApIHtcclxuXHRcdFx0bWFqdXJpdHkgPSAzO1xyXG5cdFx0fSBlbHNlIGlmICgobGF5ZXIybWFqdXJpdHkgPT0gMyB8fCBsYXllcjJtYWp1cml0eSA9PSA0KSAmJiAobGF5ZXIzbWFqdXJpdHkgPT0gNCB8fCBsYXllcjNtYWp1cml0eSA9PSA1KSkge1xyXG5cdFx0XHRtYWp1cml0eSA9IDQ7XHJcblx0XHR9IGVsc2UgaWYgKGxheWVyMm1hanVyaXR5ID09IDUgJiYgbGF5ZXIzbWFqdXJpdHkgPT0gNSkge1xyXG5cdFx0XHRtYWp1cml0eSA9IDU7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRtYWp1cml0eSA9IDA7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRcclxuXHQvL2NvbnNvbGUubG9nKGBsYXllcjJtYWp1cml0eTogJHtsYXllcjJtYWp1cml0eX0gXFx0bGF5ZXIzbWFqdXJpdHk6ICR7bGF5ZXIzbWFqdXJpdHl9IFxcdG1hanVyaXR5OiAke21hanVyaXR5fWApO1xyXG5cdC8vY29uc29sZS5sb2coYHBlcmNlbnRMYXllcjI6ICR7cGVyY2VudExheWVyMn0gXFx0cGVyY2VudExheWVyMzogJHtwZXJjZW50TGF5ZXIzfSBcXHRtYWp1cml0eTogJHttYWp1cml0eX1gKTtcclxuXHQvL2NvbnNvbGUubG9nKGBjaGFyQ291bnRUb3RhbDogJHtjaGFyQ291bnRUb3RhbH1gKTtcclxuXHRyZXR1cm4gbWFqdXJpdHk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY291bnRMYXllcjJBbmRMYXllcjNDaGFyYWN0ZXJzKGNvbnRlbnQ6IHN0cmluZywgZmlsZW5hbWU6IHN0cmluZywgbGF5ZXIyOiBzdHJpbmcsIGxheWVyMzogc3RyaW5nKTogeyBjaGFyQ291bnQ6IG51bWJlcjsgaGlnaGxpZ2h0ZWRDb3VudDogbnVtYmVyOyBib2xkQ291bnQ6IG51bWJlciB9IHtcclxuICBcclxuXHRjb25zdCBmaWxlbmFtZVdpdGhvdXRFeHRlbnNpb24gPSBmaWxlbmFtZTsgLy8uc2xpY2UoMCwgLWZpbGVuYW1lLmxlbmd0aCk7XHJcblx0Ly8gY29uc29sZS5sb2coYGZpbGVuYW1lV2l0aG91dEV4dGVuc2lvbjogJHtmaWxlbmFtZVdpdGhvdXRFeHRlbnNpb259YCk7XHJcblxyXG5cdC8vIFJlbW92ZSBtYXJrZG93biBmb3JtYXR0aW5nIHN5bWJvbHNcclxuXHRjb25zdCBzdHJpcHBlZENvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoL1sqX35gXS9nLCBcIlwiKTtcclxuXHQvLyBjb25zb2xlLmxvZyhgZmlsZW5hbWVXaXRob3V0RXh0ZW5zaW9uOiAke2ZpbGVuYW1lV2l0aG91dEV4dGVuc2lvbn1gKTtcclxuXHJcblx0Ly8gUmVtb3ZlIG1hcmtkb3duIGhlYWRpbmdzIHRoYXQgbWF0Y2ggdGhlIGZpbGVuYW1lXHJcblx0Y29uc3QgaGVhZGluZ1JlZ2V4ID0gL14oIyspXFxzKC4qKSQvZ207XHJcblx0Y29uc3QgY29udGVudFdpdGhvdXRIZWFkaW5ncyA9IHN0cmlwcGVkQ29udGVudC5yZXBsYWNlKGhlYWRpbmdSZWdleCwgKG1hdGNoLCBwMSwgcDIpID0+IHtcclxuXHRcclxuXHRcdC8vIGNvbnNvbGUubG9nKGBwMjogJHtwMn1gKTtcclxuXHRcdGlmIChwMiA9PT0gZmlsZW5hbWVXaXRob3V0RXh0ZW5zaW9uKSB7XHJcblx0XHRcdHJldHVybiBcIlwiO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG1hdGNoO1xyXG5cdH0pO1xyXG5cdC8vIGNvbnNvbGUubG9nKGBjb250ZW50V2l0aG91dEhlYWRpbmdzOiAke2NvbnRlbnRXaXRob3V0SGVhZGluZ3N9YCk7XHJcblxyXG5cdC8vIFJlbW92ZSBtZXRhZGF0YSBibG9ja3MgZnJvbSBjb3VudFxyXG5cdGNvbnN0IG1ldGFkYXRhUmVnZXggPSAvXi0tLVtcXHNcXFNdKj8tLS0vZ207XHJcblx0Y29uc3QgY29udGVudFdpdGhvdXRNZXRhZGF0YSA9IGNvbnRlbnRXaXRob3V0SGVhZGluZ3MucmVwbGFjZShtZXRhZGF0YVJlZ2V4LCBcIlwiKTtcclxuXHQvLyBjb25zb2xlLmxvZyhgY29udGVudFdpdGhvdXRNZXRhZGF0YTogJHtjb250ZW50V2l0aG91dE1ldGFkYXRhfWApO1xyXG5cclxuXHQvLyBSZW1vdmUgI3RhZ3MgZnJvbSBjb3VudFxyXG5cdGNvbnN0IHRhZ1JlZ2V4ID0gLyNbXlxcc10rL2c7XHJcblx0Y29uc3QgY29udGVudFdpdGhvdXRUYWdzID0gY29udGVudFdpdGhvdXRNZXRhZGF0YS5yZXBsYWNlKHRhZ1JlZ2V4LCBcIlwiKTtcclxuXHQvLyBjb25zb2xlLmxvZyhgY29udGVudFdpdGhvdXRUYWdzOiAke2NvbnRlbnRXaXRob3V0VGFnc31gKTtcclxuXHJcblx0Ly8gUmVtb3ZlIGxpbmtzIGFuZCBXaWtpcGVkaWEtbGlua3MgZnJvbSBjb3VudFxyXG5cdGNvbnN0IGxpbmtSZWdleCA9IC9cXFsuKj9cXF1cXCguKj9cXCl8XFxbXFxbLio/XFxdXFxdL2c7XHJcblx0Y29uc3QgY29udGVudFdpdGhvdXRMaW5rcyA9IGNvbnRlbnRXaXRob3V0VGFncy5yZXBsYWNlKGxpbmtSZWdleCwgXCJcIik7XHJcblx0Ly8gY29uc29sZS5sb2coYGNvbnRlbnRXaXRob3V0TGlua3M6ICR7Y29udGVudFdpdGhvdXRMaW5rc31gKTtcclxuXHJcblx0Ly8gUmVtb3ZlIGJsYW5rIG5ld2xpbmVzXHJcblx0Y29uc3QgZmlsdGVyZWRDb250ZW50OiBzdHJpbmcgPSBjb250ZW50V2l0aG91dExpbmtzXHJcblx0LnNwbGl0KCdcXG4nKSAvLyBTcGxpdCB0aGUgY29udGVudCBpbnRvIGFuIGFycmF5IG9mIGxpbmVzXHJcblx0LmZpbHRlcihsaW5lID0+IGxpbmUudHJpbSgpICE9PSAnJykgLy8gRmlsdGVyIG91dCBsaW5lcyB0aGF0IGFyZSBlbXB0eSBvciBjb250YWluIG9ubHkgd2hpdGVzcGFjZVxyXG5cdC5maWx0ZXIobGluZSA9PiBsaW5lLnRyaW0oKSAhPT0gJy0tLScpIC8vIHJlbW92ZSAtLS0gb24gc2luZ2xlIGxpbmVzXHJcblx0LmpvaW4oJ1xcbicpOyAvLyBKb2luIHRoZSByZW1haW5pbmcgbGluZXMgYmFjayBpbnRvIGEgc3RyaW5nLCBzZXBhcmF0ZWQgYnkgbmV3bGluZXNcclxuXHQvLyBjb25zb2xlLmxvZyhgZmlsdGVyZWRDb250ZW50OiAke2ZpbHRlcmVkQ29udGVudH1gKTtcclxuXHJcblx0Ly8gQ291bnQgdGhlIHJlbWFpbmluZyBjaGFyYWN0ZXJzXHJcblx0Y29uc3QgY2hhckNvdW50ID0gZmlsdGVyZWRDb250ZW50Lmxlbmd0aDtcclxuXHQvLyBjb25zb2xlLmxvZyhgY2hhckNvdW50OiAke2NoYXJDb3VudH1gKTtcclxuXHJcblxyXG5cdC8vIGNhbGN1bGF0ZSBMYXllciAyICYgMyBMZW5ndGhcclxuXHJcblx0Ly8gQ291bnQgdGhlIGhpZ2hsaWdodGVkIGFuZCBib2xkIGNoYXJhY3RlcnNcclxuXHRsZXQgaGlnaGxpZ2h0ZWRDb3VudCA9IDA7XHJcblx0bGV0IGJvbGRDb3VudCA9IDA7XHJcbiAgXHJcblx0dmFyIGxheWVyMmV4Y2x1ZGUgPSAnPSdcclxuXHR2YXIgbGF5ZXIzZXhjbHVkZSA9ICdcXFxcKidcclxuXHQvLyB0byBoYXZlIHRoZSByZWcgZXggY29ycmVjdC4gb3RoZXJ3aXNlIGl0IHdpbGwgZ2V0IHN0dWMgd2l0aCAqKi5cclxuXHRpZihsYXllcjMgPT0gJyoqJyl7XHJcblx0XHRsYXllcjMgPSAnXFxcXCpcXFxcKidcclxuXHRcdGxheWVyM2V4Y2x1ZGUgPSAnXFxcXConXHJcblx0XHRsYXllcjJleGNsdWRlID0gJz0nXHJcblx0fVxyXG5cdGlmKGxheWVyMiA9PSAnKionKXtcclxuXHRcdGxheWVyMiA9ICdcXFxcKlxcXFwqJ1xyXG5cdFx0bGF5ZXIzZXhjbHVkZSA9ICc9J1xyXG5cdFx0bGF5ZXIyZXhjbHVkZSA9ICdcXFxcKidcclxuXHR9XHJcbiAgXHRcclxuXHJcblx0Y29uc3QgaGlnaGxpZ2h0UmVnZXggPSBuZXcgUmVnRXhwKGAke2xheWVyMn1bXiR7bGF5ZXIyZXhjbHVkZX1dKyR7bGF5ZXIyfWAsIFwiZ1wiKTtcclxuICAgIGNvbnN0IGJvbGRSZWdleCA9IG5ldyBSZWdFeHAoYCR7bGF5ZXIzfVteJHtsYXllcjNleGNsdWRlfV0rJHtsYXllcjN9YCwgXCJnXCIpO1xyXG4gIFxyXG5cdC8vIENvdW50IGhpZ2hsaWdodGVkIGNoYXJhY3RlcnNcclxuXHRjb25zdCBoaWdobGlnaHRlZE1hdGNoZXMgPSBjb250ZW50Lm1hdGNoKGhpZ2hsaWdodFJlZ2V4KTtcclxuXHRpZiAoaGlnaGxpZ2h0ZWRNYXRjaGVzKSB7XHJcblx0ICBoaWdobGlnaHRlZENvdW50ID0gaGlnaGxpZ2h0ZWRNYXRjaGVzLmpvaW4oXCJcIikubGVuZ3RoIC0gKGhpZ2hsaWdodGVkTWF0Y2hlcy5sZW5ndGggKiA0KTsgLy8gU3VidHJhY3QgdGhlIGxlbmd0aCBvZiAnPT0nXHJcblx0ICAvLyBmaXJzdCB0YWtlIHRoZSBsYXllcjIgKGhpZ2hsaWdodGVkQ291bnQpIGFuZCBydW4gb24gdGhpcyB0aGUgJ2JvbGRSZWdleCdcclxuXHQgIC8vIENvdW50IGJvbGQgY2hhcmFjdGVyc1xyXG5cdCAgY29uc3QgbGF5ZXIyU3RyaW5nID0gaGlnaGxpZ2h0ZWRNYXRjaGVzLmpvaW4oXCJcIik7XHJcblx0ICBjb25zdCBib2xkTWF0Y2hlcyA9IGxheWVyMlN0cmluZy5tYXRjaChib2xkUmVnZXgpO1xyXG5cdCAgaWYgKGJvbGRNYXRjaGVzKSB7XHJcblx0ICAgIGJvbGRDb3VudCA9IGJvbGRNYXRjaGVzLmpvaW4oXCJcIikubGVuZ3RoIC0gKGJvbGRNYXRjaGVzLmxlbmd0aCAqIDQpOyAvLyBTdWJ0cmFjdCB0aGUgbGVuZ3RoIG9mICcqKidcclxuXHQgIH1cclxuXHR9XHJcbiAgXHJcblx0XHJcblx0XHJcbiAgXHJcblx0cmV0dXJuIHsgY2hhckNvdW50LCBoaWdobGlnaHRlZENvdW50LCBib2xkQ291bnQgfTtcclxuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmF0ZUxldmVsT2ZNYXR1cml0eShub3RlTGVuZ3RoOiBudW1iZXIsIGxlbmd0aE9mVGl0bGU6IG51bWJlciwgSW5saW5rczogbnVtYmVyLCBvdXRnb2luZ0xpbmtzOiBudW1iZXIsIHByb2dyZXNzaXZlU3VtTWFqdXJpdHk6IG51bWJlcik6IG51bWJlciB7XHJcblx0Ly8gY29uc29sZS5sb2coYG5vdGVMZW5ndGg6ICR7bm90ZUxlbmd0aH1cXHRsZW5ndGhPZlRpdGxlOiAke2xlbmd0aE9mVGl0bGV9XFx0SW5saW5rczogJHtJbmxpbmtzfVxcdG91dGdvaW5nTGlua3M6ICR7b3V0Z29pbmdMaW5rc31gKVxyXG5cdFxyXG5cdC8vIGRlY2lkZSBpZiBub3RlTGVuZ3RoLW1hanVyaXR5IG9yIHByb2dyZXNzaXZlU3VtLW1hanVyaXR5IHNoYWxsIGJlIHVzZWRcclxuXHR2YXIgbGVuZ3RoTWFqdXJpdHkgPSAwO1xyXG5cdGlmKG5vdGVMZW5ndGggPj0gcHJvZ3Jlc3NpdmVTdW1NYWp1cml0eSkge1xyXG5cdFx0bGVuZ3RoTWFqdXJpdHkgPSBub3RlTGVuZ3RoO1xyXG5cdH0gZWxzZSB7XHJcblx0XHRsZW5ndGhNYWp1cml0eSA9IHByb2dyZXNzaXZlU3VtTWFqdXJpdHk7XHJcblx0fVxyXG5cdFxyXG5cdGNvbnN0IHRvdGFsV2VpZ2h0IDogbnVtYmVyID0gbGVuZ3RoTWFqdXJpdHkgKyBsZW5ndGhPZlRpdGxlICsgSW5saW5rcyArIG91dGdvaW5nTGlua3M7XHJcblx0Y29uc3QgYXZlcmFnZVdlaWdodCA9IHRvdGFsV2VpZ2h0IC8gNTtcclxuXHQvLyBjb25zb2xlLmxvZyhgdG90YWxXZWlnaHQ6ICR7dG90YWxXZWlnaHR9XFx0YXZlcmFnZVdlaWdodDogJHthdmVyYWdlV2VpZ2h0fWApXHJcblx0aWYgKGF2ZXJhZ2VXZWlnaHQgPCAwLjUpIHtcclxuXHRcdHJldHVybiAwO1xyXG5cdH0gZWxzZSBpZiAoYXZlcmFnZVdlaWdodCA8PSAxKSB7XHJcblx0XHRyZXR1cm4gMTtcclxuXHR9IGVsc2UgaWYgKGF2ZXJhZ2VXZWlnaHQgPD0gMikge1xyXG5cdFx0cmV0dXJuIDI7XHJcblx0fSBlbHNlIGlmIChhdmVyYWdlV2VpZ2h0IDw9IDMpIHtcclxuXHRcdHJldHVybiAzO1xyXG5cdH0gZWxzZSBpZiAoYXZlcmFnZVdlaWdodCA8PSAzLjUpIHtcclxuXHRcdHJldHVybiA0O1xyXG5cdH0gZWxzZSBpZiAoYXZlcmFnZVdlaWdodCA8PSA0KSB7XHJcblx0XHRyZXR1cm4gNTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0dXJuIDA7XHJcblx0fVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJhdGVPdXRsaW5rcyhvdXRsaW5rczogbnVtYmVyKTogbnVtYmVyIHtcclxuXHQvLyBjb25zb2xlLmxvZyhgb3V0bGlua3M6ICR7b3V0bGlua3N9YClcclxuXHRpZiAob3V0bGlua3MgPCAyKSB7XHJcblx0XHRyZXR1cm4gMDtcclxuXHR9IGVsc2UgaWYgKG91dGxpbmtzIDwgMykge1xyXG5cdFx0cmV0dXJuIDE7XHJcblx0fSBlbHNlIGlmIChvdXRsaW5rcyA8IDUpIHtcclxuXHRcdHJldHVybiA0O1xyXG5cdH0gZWxzZSBpZiAob3V0bGlua3MgPCA5KSB7XHJcblx0XHRyZXR1cm4gNTtcclxuXHR9IGVsc2UgaWYgKG91dGxpbmtzIDwgMTEpIHtcclxuXHRcdHJldHVybiAzO1xyXG5cdH0gZWxzZSBpZiAob3V0bGlua3MgPCAxMikge1xyXG5cdFx0cmV0dXJuIDE7XHJcblx0fSBlbHNlIHtcclxuXHRcdHJldHVybiAwO1xyXG5cdH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByYXRlSW5saW5rcyhudW1JbmxpbmtzOiBudW1iZXIpOiBudW1iZXIge1xyXG5cdC8vdmFyIHByb3plbnRJbmxpbmtzID0gbnVtSW5saW5rcyAqIDEwMCAvIG51bUFsbEZpbGVzO1xyXG5cdC8vY29uc29sZS5sb2coYG51bUlubGlua3M6ICR7bnVtSW5saW5rc31cXHRudW1BbGxGaWxlczogJHtudW1BbGxGaWxlc31cXHRwcm96ZW50SW5saW5rczogJHtwcm96ZW50SW5saW5rc31gKVxyXG5cdC8qaWYgKHByb3plbnRJbmxpbmtzIDwgMC4wMDUgfHwgcHJvemVudElubGlua3MgPiAwLjEpIHtcclxuXHRcdHJldHVybiAwO1xyXG5cdH0gZWxzZSAqLyBpZiAobnVtSW5saW5rcyA9PSAwKSB7XHJcblx0XHRyZXR1cm4gMDtcclxuXHR9IGVsc2UgaWYgKG51bUlubGlua3MgPCA0KSB7XHJcblx0XHRyZXR1cm4gMTtcclxuXHR9IGVsc2UgaWYgKG51bUlubGlua3MgPCA4KSB7XHJcblx0XHRyZXR1cm4gMjtcclxuXHR9IGVsc2UgaWYgKG51bUlubGlua3MgPCAxMSkge1xyXG5cdFx0cmV0dXJuIDM7XHJcblx0fSBlbHNlIGlmIChudW1JbmxpbmtzIDwgMTYpIHtcclxuXHRcdHJldHVybiA0O1xyXG5cdH0gZWxzZSBpZiAobnVtSW5saW5rcyA+PSAxNiAmJiBudW1JbmxpbmtzIDwgNTAwICkge1xyXG5cdFx0cmV0dXJuIDU7XHJcblx0fSBlbHNlIHtcclxuXHRcdHJldHVybiAwO1xyXG5cdH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByYXRlRGlyZWN0aW9uKHJhdGluZ0N1cnJlbnQ6IHN0cmluZywgcmF0aW5nTmV3OiBudW1iZXIpOiBzdHJpbmcge1xyXG5cdGxldCByYXRpbmcgPSBcIlwiXHJcblx0aWYgKHBhcnNlSW50KHJhdGluZ0N1cnJlbnQsIDEwKSA+IHJhdGluZ05ldyl7XHJcblx0XHRyYXRpbmcgPSByYXRpbmdOZXcgKyBcIlx1MkIwN1x1RkUwRlwiXHJcblx0fSBlbHNlIGlmIChwYXJzZUludChyYXRpbmdDdXJyZW50LCAxMCkgPCByYXRpbmdOZXcpe1xyXG5cdFx0cmF0aW5nID0gcmF0aW5nTmV3ICsgXCJcdTJCMDZcdUZFMEZcIlxyXG5cdH0gZWxzZSBpZiAocGFyc2VJbnQocmF0aW5nQ3VycmVudCwgMTApID09IHJhdGluZ05ldyl7XHJcblx0XHRyYXRpbmcgPSByYXRpbmdOZXcgKyBcIlx1MjdBMVx1RkUwRlwiXHJcblx0fSBlbHNlIHtcclxuXHRcdHJhdGluZyA9IHJhdGluZ05ldyArIFwiXCJcclxuXHR9XHJcblxyXG5cdHJldHVybiByYXRpbmdcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByYXRlTGVuZ3RoRmlsZW5hbWUoZmlsZW5hbWU6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgaWYgKGZpbGVuYW1lLmxlbmd0aCA8IDMwKSB7XHJcblx0cmV0dXJuIDA7XHJcbiAgfSBlbHNlIGlmIChmaWxlbmFtZS5sZW5ndGggPCA4MCkge1xyXG5cdHJldHVybiAxO1xyXG4gIH0gZWxzZSBpZiAoZmlsZW5hbWUubGVuZ3RoIDwgMTAwKSB7XHJcblx0cmV0dXJuIDM7XHJcbiAgfSBlbHNlIGlmIChmaWxlbmFtZS5sZW5ndGggPCAxNTApIHtcclxuXHRyZXR1cm4gNTtcclxuICB9IGVsc2UgaWYgKGZpbGVuYW1lLmxlbmd0aCA8IDE5MCkge1xyXG5cdHJldHVybiA0O1xyXG4gIH0gZWxzZSBpZiAoZmlsZW5hbWUubGVuZ3RoIDwgMjEwKSB7XHJcblx0cmV0dXJuIDI7XHJcbiAgfSBlbHNlIGlmIChmaWxlbmFtZS5sZW5ndGggPCAyNTApIHtcclxuXHRyZXR1cm4gMTtcclxuICB9IGVsc2Uge1xyXG5cdHJldHVybiAwO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByYXRlTm90ZUxlbmd0aChjb250ZW5sZW5ndGg6IG51bWJlcik6IG51bWJlciB7XHJcblx0aWYgKGNvbnRlbmxlbmd0aCA8IDIwMCkge1xyXG5cdFx0cmV0dXJuIDA7XHJcblx0fSBlbHNlIGlmIChjb250ZW5sZW5ndGggPCA1NTApIHtcclxuXHRcdHJldHVybiA0O1xyXG5cdH0gZWxzZSBpZiAoY29udGVubGVuZ3RoIDwgMTAwMCkge1xyXG5cdFx0cmV0dXJuIDU7XHJcblx0fSBlbHNlIGlmIChjb250ZW5sZW5ndGggPCAxMjAwKSB7XHJcblx0XHRyZXR1cm4gNDtcclxuXHR9IGVsc2UgaWYgKGNvbnRlbmxlbmd0aCA8IDIwMDApIHtcclxuXHRcdHJldHVybiAzO1xyXG5cdH0gZWxzZSBpZiAoY29udGVubGVuZ3RoIDwgMjUwMCkge1xyXG5cdFx0cmV0dXJuIDI7XHJcblx0fSBlbHNlIGlmIChjb250ZW5sZW5ndGggPCAzMDAwKSB7XHJcblx0XHRyZXR1cm4gMTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0dXJuIDA7XHJcblx0fVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE51bWJlck9mT3V0bGlua3MoYWN0aXZlRmlsZTogVEZpbGUpOiBudW1iZXIge1xyXG5cdC8vIGNvbnN0IGFjdGl2ZUZpbGU6IFRGaWxlIHwgbnVsbCA9IGFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG5cdGlmICghYWN0aXZlRmlsZSkge1xyXG5cdFx0cmV0dXJuIDA7XHJcblx0fVxyXG5cdGNvbnN0IGlubGlua3MgPSBhcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYWN0aXZlRmlsZSk/LmxpbmtzO1xyXG5cdHJldHVybiBpbmxpbmtzID8gT2JqZWN0LmtleXMoaW5saW5rcykubGVuZ3RoIDogMDtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3VudENoYXJhY3RlcnNJbkFjdGl2ZUZpbGUoY29udGVudDogc3RyaW5nLCBmaWxlbmFtZTogc3RyaW5nKTogbnVtYmVyIHtcclxuICBcclxuXHRjb25zdCBmaWxlbmFtZVdpdGhvdXRFeHRlbnNpb24gPSBmaWxlbmFtZTsgLy8uc2xpY2UoMCwgLWZpbGVuYW1lLmxlbmd0aCk7XHJcblx0Ly8gY29uc29sZS5sb2coYGZpbGVuYW1lV2l0aG91dEV4dGVuc2lvbjogJHtmaWxlbmFtZVdpdGhvdXRFeHRlbnNpb259YCk7XHJcblxyXG5cdC8vIFJlbW92ZSBtYXJrZG93biBmb3JtYXR0aW5nIHN5bWJvbHNcclxuXHRjb25zdCBzdHJpcHBlZENvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoL1sqX35gXS9nLCBcIlwiKTtcclxuXHQvLyBjb25zb2xlLmxvZyhgZmlsZW5hbWVXaXRob3V0RXh0ZW5zaW9uOiAke2ZpbGVuYW1lV2l0aG91dEV4dGVuc2lvbn1gKTtcclxuXHJcblx0Ly8gUmVtb3ZlIG1hcmtkb3duIGhlYWRpbmdzIHRoYXQgbWF0Y2ggdGhlIGZpbGVuYW1lXHJcblx0Y29uc3QgaGVhZGluZ1JlZ2V4ID0gL14oIyspXFxzKC4qKSQvZ207XHJcblx0Y29uc3QgY29udGVudFdpdGhvdXRIZWFkaW5ncyA9IHN0cmlwcGVkQ29udGVudC5yZXBsYWNlKGhlYWRpbmdSZWdleCwgKG1hdGNoLCBwMSwgcDIpID0+IHtcclxuXHRcclxuXHRcdC8vIGNvbnNvbGUubG9nKGBwMjogJHtwMn1gKTtcclxuXHRcdGlmIChwMiA9PT0gZmlsZW5hbWVXaXRob3V0RXh0ZW5zaW9uKSB7XHJcblx0XHRcdHJldHVybiBcIlwiO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG1hdGNoO1xyXG5cdH0pO1xyXG5cdC8vIGNvbnNvbGUubG9nKGBjb250ZW50V2l0aG91dEhlYWRpbmdzOiAke2NvbnRlbnRXaXRob3V0SGVhZGluZ3N9YCk7XHJcblxyXG5cdC8vIFJlbW92ZSBtZXRhZGF0YSBibG9ja3MgZnJvbSBjb3VudFxyXG5cdGNvbnN0IG1ldGFkYXRhUmVnZXggPSAvXi0tLVtcXHNcXFNdKj8tLS0vZ207XHJcblx0Y29uc3QgY29udGVudFdpdGhvdXRNZXRhZGF0YSA9IGNvbnRlbnRXaXRob3V0SGVhZGluZ3MucmVwbGFjZShtZXRhZGF0YVJlZ2V4LCBcIlwiKTtcclxuXHQvLyBjb25zb2xlLmxvZyhgY29udGVudFdpdGhvdXRNZXRhZGF0YTogJHtjb250ZW50V2l0aG91dE1ldGFkYXRhfWApO1xyXG5cclxuXHQvLyBSZW1vdmUgI3RhZ3MgZnJvbSBjb3VudFxyXG5cdGNvbnN0IHRhZ1JlZ2V4ID0gLyNbXlxcc10rL2c7XHJcblx0Y29uc3QgY29udGVudFdpdGhvdXRUYWdzID0gY29udGVudFdpdGhvdXRNZXRhZGF0YS5yZXBsYWNlKHRhZ1JlZ2V4LCBcIlwiKTtcclxuXHQvLyBjb25zb2xlLmxvZyhgY29udGVudFdpdGhvdXRUYWdzOiAke2NvbnRlbnRXaXRob3V0VGFnc31gKTtcclxuXHJcblx0Ly8gUmVtb3ZlIGxpbmtzIGFuZCBXaWtpcGVkaWEtbGlua3MgZnJvbSBjb3VudFxyXG5cdGNvbnN0IGxpbmtSZWdleCA9IC9cXFsuKj9cXF1cXCguKj9cXCl8XFxbXFxbLio/XFxdXFxdL2c7XHJcblx0Y29uc3QgY29udGVudFdpdGhvdXRMaW5rcyA9IGNvbnRlbnRXaXRob3V0VGFncy5yZXBsYWNlKGxpbmtSZWdleCwgXCJcIik7XHJcblx0Ly8gY29uc29sZS5sb2coYGNvbnRlbnRXaXRob3V0TGlua3M6ICR7Y29udGVudFdpdGhvdXRMaW5rc31gKTtcclxuXHJcblx0Ly8gUmVtb3ZlIGJsYW5rIG5ld2xpbmVzXHJcblx0Y29uc3QgZmlsdGVyZWRDb250ZW50OiBzdHJpbmcgPSBjb250ZW50V2l0aG91dExpbmtzXHJcblx0LnNwbGl0KCdcXG4nKSAvLyBTcGxpdCB0aGUgY29udGVudCBpbnRvIGFuIGFycmF5IG9mIGxpbmVzXHJcblx0LmZpbHRlcihsaW5lID0+IGxpbmUudHJpbSgpICE9PSAnJykgLy8gRmlsdGVyIG91dCBsaW5lcyB0aGF0IGFyZSBlbXB0eSBvciBjb250YWluIG9ubHkgd2hpdGVzcGFjZVxyXG5cdC5maWx0ZXIobGluZSA9PiBsaW5lLnRyaW0oKSAhPT0gJy0tLScpIC8vIHJlbW92ZSAtLS0gb24gc2luZ2xlIGxpbmVzXHJcblx0LmpvaW4oJ1xcbicpOyAvLyBKb2luIHRoZSByZW1haW5pbmcgbGluZXMgYmFjayBpbnRvIGEgc3RyaW5nLCBzZXBhcmF0ZWQgYnkgbmV3bGluZXNcclxuXHQvLyBjb25zb2xlLmxvZyhgZmlsdGVyZWRDb250ZW50OiAke2ZpbHRlcmVkQ29udGVudH1gKTtcclxuXHJcblx0Ly8gQ291bnQgdGhlIHJlbWFpbmluZyBjaGFyYWN0ZXJzXHJcblx0Y29uc3QgY2hhckNvdW50ID0gZmlsdGVyZWRDb250ZW50Lmxlbmd0aDtcclxuXHQvLyBjb25zb2xlLmxvZyhgY2hhckNvdW50OiAke2NoYXJDb3VudH1gKTtcclxuXHJcblx0cmV0dXJuIGNoYXJDb3VudDtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3VudF9pbmxpbmtzX3NpbmdsZShmaWxlX3BhdGg6IHN0cmluZywgdmF1bHRfcGF0aDogc3RyaW5nKTogbnVtYmVyIHtcclxuXHQvLyBHZXQgdGhlIGZpbGVuYW1lIGFuZCBkaXJlY3Rvcnkgb2YgdGhlIGZpbGUgd2UncmUgY291bnRpbmcgbGlua3MgdG9cclxuXHRjb25zdCBmaWxlbmFtZSA9IHBhdGguYmFzZW5hbWUoZmlsZV9wYXRoKTtcclxuXHRjb25zdCBkaXJlY3RvcnkgPSBwYXRoLmRpcm5hbWUoZmlsZV9wYXRoKTtcclxuXHJcblx0Ly8gQ3JlYXRlIGEgc2V0IHRvIGhvbGQgYWxsIHRoZSBmaWxlcyB0aGF0IGxpbmsgdG8gb3VyIHRhcmdldCBmaWxlXHJcblx0Y29uc3QgbGlua2luZ19maWxlczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XHJcblxyXG5cdC8vIFJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgZmlsZXMgaW4gdGhlIHZhdWx0IGRpcmVjdG9yeSB0aGF0IGxpbmsgdG8gb3VyIHRhcmdldCBmaWxlXHJcblx0Y29uc3Qgd2Fsa1N5bmMgPSAoZGlyOiBzdHJpbmcsIGZpbGVsaXN0OiBzdHJpbmdbXSkgPT4ge1xyXG5cdFx0Y29uc3QgZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhkaXIpO1xyXG5cdFx0ZmlsZWxpc3QgPSBmaWxlbGlzdCB8fCBbXTtcclxuXHRcdGZpbGVzLmZvckVhY2goKGZpbGU6IHN0cmluZykgPT4ge1xyXG5cdFx0XHRpZiAoZnMuc3RhdFN5bmMocGF0aC5qb2luKGRpciwgZmlsZSkpLmlzRGlyZWN0b3J5KCkpIHtcclxuXHRcdFx0XHRmaWxlbGlzdCA9IHdhbGtTeW5jKHBhdGguam9pbihkaXIsIGZpbGUpLCBmaWxlbGlzdCk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0Ly8gSWdub3JlIG5vbi1tZCBmaWxlcyBhbmQgZmlsZXMgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG91ciB0YXJnZXQgZmlsZVxyXG5cdFx0XHRcdGlmICghZmlsZS5lbmRzV2l0aChcIi5tZFwiKSB8fCBmaWxlID09PSBmaWxlbmFtZSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gUmVhZCB0aGUgZmlsZSBhbmQgbG9vayBmb3IgbGlua3MgdG8gb3VyIHRhcmdldCBmaWxlXHJcblx0XHRcdFx0Y29uc3QgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4oZGlyLCBmaWxlKSwgXCJ1dGYtOFwiKTtcclxuXHRcdFx0XHRkYXRhLnNwbGl0KCdcXG4nKS5mb3JFYWNoKChsaW5lOiBzdHJpbmcpID0+IHtcclxuXHRcdFx0XHRcdGlmIChsaW5lLmluY2x1ZGVzKGBbWyR7ZmlsZW5hbWUuc2xpY2UoMCwgLTMpfV1dYCkgfHwgbGluZS5pbmNsdWRlcyhgWyR7ZmlsZW5hbWUuc2xpY2UoMCwgLTMpfV1gKSkge1xyXG5cdFx0XHRcdFx0XHQvLyBXZSBmb3VuZCBhIGxpbmsgdG8gb3VyIHRhcmdldCBmaWxlIVxyXG5cdFx0XHRcdFx0XHRsaW5raW5nX2ZpbGVzLmFkZChwYXRoLnJlbGF0aXZlKGRpcmVjdG9yeSwgcGF0aC5qb2luKGRpciwgZmlsZSkpKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gZmlsZWxpc3Q7XHJcblx0fTtcclxuXHJcblx0d2Fsa1N5bmModmF1bHRfcGF0aCwgW10pO1xyXG5cclxuXHQvLyBjb3VudCBob3cgbWFueSBmaWxlcyBhcmUgbWVudGlvbmluZyB0aGUgaW5wdXQgZmlsZVxyXG5cdHJldHVybiBsaW5raW5nX2ZpbGVzLnNpemU7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY291bnRfaW5saW5rcyhmaWxlOiBURmlsZSk6IG51bWJlciB7XHJcblxyXG5cdGNvbnN0IHsgYXBwOiB7IG1ldGFkYXRhQ2FjaGU6IHsgcmVzb2x2ZWRMaW5rcyB9IH0gfSA9IHRoaXMsIHsgcGF0aCB9ID0gZmlsZVxyXG5cdGNvbnN0IHN1bUlubGlua3MgPSBPYmplY3QudmFsdWVzKHJlc29sdmVkTGlua3MpXHJcblx0XHQubWFwKHZhbCA9PiB2YWxbcGF0aF0gPz8gMClcclxuXHRcdC5yZWR1Y2UoKGxlZnQsIHJpZ2h0KSA9PiBsZWZ0ICsgcmlnaHQsIDApXHJcblx0Ly8gY29uc29sZS5sb2coYHN1bUlubGlua3M6ICR7c3VtSW5saW5rc31gKVxyXG5cdFxyXG5cdHJldHVybiBzdW1JbmxpbmtzO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGdldEZpbGVDb3VudE1hcCA9IGFzeW5jIChhcHA6IEFwcCwgZXhjbHVkZVRhZzogc3RyaW5nLCBleGNsdWRlRm9sZGVyOiBzdHJpbmcpOiBQcm9taXNlPE1hcDxzdHJpbmcsIG51bWJlcj4+ID0+IHtcclxuXHJcbiAgICBjb25zdCB7IHZhdWx0IH0gPSBhcHA7XHJcblxyXG5cdFxyXG5cdC8vIGZpbGVzIHdpdGggdGhpcyAjdGFncyBpbiB0byBpZ25vcmVcclxuXHRsZXQgZXhjbHVkZWRTdWJzdHJpbmdzIDogc3RyaW5nW10gPSBbXVxyXG5cdGlmIChleGNsdWRlVGFnID09IHVuZGVmaW5lZCkge1xyXG5cdFx0ZXhjbHVkZWRTdWJzdHJpbmdzID0gW11cclxuXHR9IGVsc2Uge1xyXG5cdFx0ZXhjbHVkZWRTdWJzdHJpbmdzID0gZXhjbHVkZVRhZy5zcGxpdCgnLCAnKTtcclxuXHR9XHJcblx0XHJcblxyXG5cdC8vIGZvbGRlcnMgdG8gaWdub3JlIC5tZC1maWxlcyBpblxyXG5cdGxldCBleGNsdWRlZEZvbGRlcnMgOiBzdHJpbmdbXSA9IFtdXHJcblx0aWYgKGV4Y2x1ZGVGb2xkZXIgPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRleGNsdWRlZEZvbGRlcnMgPSBbXVxyXG5cdH0gZWxzZSB7XHJcblx0XHRleGNsdWRlZEZvbGRlcnMgPSBleGNsdWRlRm9sZGVyLnNwbGl0KCcsICcpO1xyXG5cdH1cclxuXHRleGNsdWRlZEZvbGRlcnMucHVzaCgnLm9ic2lkaWFuJywgJy50cmFzaCcpOyAvLyBoYXJkY29kZSB0aGUgYmFzaWMgZm9sZGVyc1xyXG5cdFxyXG4gICAgY29uc3QgZmlsZUNvdW50TWFwID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcclxuXHJcbiAgICBjb25zdCBmaWxlcyA9IGF3YWl0IHZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcclxuXHJcblx0XHRjb25zdCBmaWxlTmFtZSA9IGZpbGUuYmFzZW5hbWU7XHJcblxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRDb3VudCA9IGZpbGVDb3VudE1hcC5nZXQoZmlsZU5hbWUpIHx8IDA7XHJcblxyXG4gICAgICAgIGZpbGVDb3VudE1hcC5zZXQoZmlsZU5hbWUsIGN1cnJlbnRDb3VudCArIDEpO1xyXG5cclxuXHRcdGNvbnN0IGZpbGVDb250ZW50cyA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGZpbGUpO1xyXG5cclxuICAgICAgICBpZiAoIWV4Y2x1ZGVkU3Vic3RyaW5ncy5zb21lKHN1YnN0cmluZyA9PiBmaWxlQ29udGVudHMuaW5jbHVkZXMoc3Vic3RyaW5nKSkgJiYgXHJcbiAgICAgICAgICAgICFleGNsdWRlZEZvbGRlcnMuc29tZShmb2xkZXIgPT4gZmlsZS5wYXRoLmluY2x1ZGVzKGZvbGRlcikpKSB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBmaWxlTmFtZSA9IGZpbGUuYmFzZW5hbWU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q291bnQgPSBmaWxlQ291bnRNYXAuZ2V0KGZpbGVOYW1lKSB8fCAwO1xyXG5cclxuICAgICAgICAgICAgZmlsZUNvdW50TWFwLnNldChmaWxlTmFtZSwgY3VycmVudENvdW50ICsgMSk7XHJcbiAgICAgICAgfVxyXG5cdFx0XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZpbGVDb3VudE1hcDtcclxufTtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgZ2V0RmlsZU1hcCA9IGFzeW5jIChhcHA6IEFwcCwgZXhjbHVkZVRhZzogc3RyaW5nLCBleGNsdWRlRm9sZGVyOiBzdHJpbmcpOiBQcm9taXNlPFRGaWxlW10+ID0+IHtcclxuXHJcbiAgICBjb25zdCB7IHZhdWx0IH0gPSBhcHA7XHJcblxyXG5cdC8vIGZpbGVzIHdpdGggdGhpcyAjdGFncyBpbiB0byBpZ25vcmVcclxuXHRsZXQgZXhjbHVkZWRTdWJzdHJpbmdzIDogc3RyaW5nW10gPSBbXVxyXG5cdGlmIChleGNsdWRlVGFnID09IHVuZGVmaW5lZCkge1xyXG5cdFx0ZXhjbHVkZWRTdWJzdHJpbmdzID0gW11cclxuXHR9IGVsc2Uge1xyXG5cdFx0ZXhjbHVkZWRTdWJzdHJpbmdzID0gZXhjbHVkZVRhZy5zcGxpdCgnLCAnKTtcclxuXHR9XHJcblx0Y29uc29sZS5sb2coYGV4Y2x1ZGVkU3Vic3RyaW5nczogJHtleGNsdWRlZFN1YnN0cmluZ3N9YClcclxuXHQvLyBmb2xkZXJzIHRvIGlnbm9yZSAubWQtZmlsZXMgaW5cclxuXHRsZXQgZXhjbHVkZWRGb2xkZXJzIDogc3RyaW5nW10gPSBbXVxyXG5cdGlmIChleGNsdWRlRm9sZGVyID09IHVuZGVmaW5lZCkge1xyXG5cdFx0ZXhjbHVkZWRGb2xkZXJzID0gW11cclxuXHR9IGVsc2Uge1xyXG5cdFx0ZXhjbHVkZWRGb2xkZXJzID0gZXhjbHVkZUZvbGRlci5zcGxpdCgnLCAnKTtcclxuXHR9XHJcblx0ZXhjbHVkZWRGb2xkZXJzLnB1c2goJy5vYnNpZGlhbicsICcudHJhc2gnKTsgLy8gaGFyZGNvZGUgdGhlIGJhc2ljIGZvbGRlcnNcclxuXHRjb25zb2xlLmxvZyhgZXhjbHVkZWRGb2xkZXJzOiAke2V4Y2x1ZGVkRm9sZGVyc31gKVx0XHJcbiAgICBsZXQgZmlsZUFycmF5OiBURmlsZVtdID0gW107XHJcbiAgICBjb25zdCBmaWxlcyA9IGF3YWl0IHZhdWx0LmdldE1hcmtkb3duRmlsZXMoKTtcclxuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xyXG5cclxuICAgICAgICBjb25zdCBmaWxlQ29udGVudHMgPSBhd2FpdCBhcHAudmF1bHQucmVhZChmaWxlKTtcclxuXHRcdC8vY29uc29sZS5sb2coYGZpbGUucGF0aDogJHtmaWxlLnBhdGh9YClcclxuXHRcdGlmICgoIWV4Y2x1ZGVkU3Vic3RyaW5ncy5zb21lKHN1YnN0cmluZyA9PiBmaWxlQ29udGVudHMuaW5jbHVkZXMoc3Vic3RyaW5nKSkgfHwgZXhjbHVkZVRhZy5sZW5ndGggPT09IDApICYmIFxyXG4gICAgICAgICAgICAhZXhjbHVkZWRGb2xkZXJzLnNvbWUoZm9sZGVyID0+IGZpbGUucGF0aC5pbmNsdWRlcyhmb2xkZXIpKSkge1xyXG5cdFx0XHRjb25zb2xlLmxvZyhgZmlsZSAke2ZpbGV9IGdldCdzIGFkZGVkLmApXHJcblx0XHRcdGZpbGVBcnJheS5wdXNoKGZpbGUpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZpbGVBcnJheTtcclxufTtcclxuIiwgImltcG9ydCB7IFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRFYXJsaWVzdENyZWF0ZWRGaWxlKGZpbGVzOiBURmlsZVtdKTogVEZpbGUge1xyXG5cdGxldCBlYXJsaWVzdENyZWF0ZWRGaWxlOiBURmlsZSA9IGZpbGVzWzBdO1xyXG5cdGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xyXG5cdCAgaWYgKGZpbGUuc3RhdC5jdGltZSA8IGVhcmxpZXN0Q3JlYXRlZEZpbGUuc3RhdC5jdGltZSkge1xyXG5cdFx0ZWFybGllc3RDcmVhdGVkRmlsZSA9IGZpbGU7XHJcblx0ICB9XHJcblx0fVxyXG5cdHJldHVybiBlYXJsaWVzdENyZWF0ZWRGaWxlO1xyXG59XHJcblxyXG4gIFxyXG5leHBvcnQgZnVuY3Rpb24gZmluZEVhcmxpZXN0TW9kaWZpZWRGaWxlKGZpbGVzOiBURmlsZVtdKTogVEZpbGUge1xyXG5cdGxldCBlYXJsaWVzdE1vZGlmaWVkRmlsZTogVEZpbGUgPSBmaWxlc1swXTtcclxuXHRmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcclxuXHQgIGlmIChmaWxlLnN0YXQubXRpbWUgPCBlYXJsaWVzdE1vZGlmaWVkRmlsZS5zdGF0Lm10aW1lKSB7XHJcblx0XHRlYXJsaWVzdE1vZGlmaWVkRmlsZSA9IGZpbGU7XHJcblx0ICB9XHJcblx0fVxyXG5cdHJldHVybiBlYXJsaWVzdE1vZGlmaWVkRmlsZTtcclxufSAgXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRFYXJsaWVzdERhdGVGaWxlKGZpbGVzOiBURmlsZVtdKTogVEZpbGUge1xyXG5cdGxldCBlYXJsaWVzdENyZWF0ZWRGaWxlOiBURmlsZSA9IGZpbGVzWzBdO1xyXG5cdGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xyXG5cdCAgaWYgKGZpbGUuc3RhdC5jdGltZSA8IGVhcmxpZXN0Q3JlYXRlZEZpbGUuc3RhdC5jdGltZSkge1xyXG5cdFx0ZWFybGllc3RDcmVhdGVkRmlsZSA9IGZpbGU7XHJcblx0ICB9XHJcblx0ICBpZiAoZmlsZS5zdGF0Lm10aW1lIDwgZWFybGllc3RDcmVhdGVkRmlsZS5zdGF0LmN0aW1lKSB7XHJcblx0XHRlYXJsaWVzdENyZWF0ZWRGaWxlID0gZmlsZTtcclxuXHQgIH1cclxuXHR9XHJcblx0cmV0dXJuIGVhcmxpZXN0Q3JlYXRlZEZpbGU7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbW9udGhzQmV0d2VlbihzdGFydE1vbnRoOiBEYXRlLCBlbmRNb250aDogRGF0ZSk6IG51bWJlciB7XHJcblx0bGV0IG1vbnRocyA9IChlbmRNb250aC5nZXRNb250aCgpIC0gc3RhcnRNb250aC5nZXRNb250aCgpKSArIDE7XHJcblx0aWYgKGVuZE1vbnRoLmdldEZ1bGxZZWFyKCkgPiBzdGFydE1vbnRoLmdldEZ1bGxZZWFyKCkpIHtcclxuXHQgIG1vbnRocyArPSAoZW5kTW9udGguZ2V0RnVsbFllYXIoKSAtIHN0YXJ0TW9udGguZ2V0RnVsbFllYXIoKSkqMTI7XHJcblx0fVxyXG5cdHJldHVybiBtb250aHM7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3JlYXRpb25EYXRlcyhmaWxlczogVEZpbGVbXSk6IEFycmF5PERhdGU+IHtcclxuXHRjb25zdCBjcmVhdGlvbkRhdGVzOiBBcnJheTxEYXRlPiA9IFtdO1xyXG4gIFxyXG5cdGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xyXG5cdCAgY3JlYXRpb25EYXRlcy5wdXNoKG5ldyBEYXRlKGZpbGUuc3RhdC5jdGltZSkpO1xyXG5cdH1cclxuICBcclxuXHRyZXR1cm4gY3JlYXRpb25EYXRlcztcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2RpZmljYXRpb25EYXRlcyhmaWxlczogVEZpbGVbXSk6IEFycmF5PERhdGU+IHtcclxuXHRjb25zdCBjcmVhdGlvbkRhdGVzOiBBcnJheTxEYXRlPiA9IFtdO1xyXG4gIFxyXG5cdGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xyXG5cdCAgY3JlYXRpb25EYXRlcy5wdXNoKG5ldyBEYXRlKGZpbGUuc3RhdC5tdGltZSkpO1xyXG5cdH1cclxuICBcclxuXHRyZXR1cm4gY3JlYXRpb25EYXRlcztcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDaGFydEZvcm1hdCh5X2F4aXM6IHN0cmluZyxjb3VudHNTdHJpbmdDcmVhdGU6IHN0cmluZywgY291bnRzU3RyaW5nTW9kOiBzdHJpbmcsIGNoYXJ0UmVkdXppZXJ1bmdNb25hdGU6IG51bWJlcik6IHN0cmluZyB7XHJcblx0bGV0IG1vbmF0c2JlZ3Jlbnp1bmcgPSBudWxsXHJcblx0aWYgKGNoYXJ0UmVkdXppZXJ1bmdNb25hdGUgPT0gMCl7XHJcblx0XHRtb25hdHNiZWdyZW56dW5nID0gMFxyXG5cdH0gZWxzZSB7XHJcblx0XHRtb25hdHNiZWdyZW56dW5nID0gY291bnRzU3RyaW5nQ3JlYXRlLnNwbGl0KCcsJykubGVuZ3RoIC0gY2hhcnRSZWR1emllcnVuZ01vbmF0ZVxyXG5cdH1cclxuXHRcclxuXHQvL2NvbnN0IG1vbmF0c2JlZ3Jlbnp1bmcgPSBsZW5ndGhjb3VudHNTdHJpbmdDcmVhdGUgLSB0aGlzLnNldHRpbmdzLmNoYXJ0UmVkdXppZXJ1bmdNb25hdGVcclxuXHRsZXQgY2hhcnRfc3RyaW5nID0gXCJgYGBjaGFydFxcbnR5cGU6IGJhclxcbmxhYmVsczogW1wiICsgeV9heGlzICsgXCJdXFxuc2VyaWVzOlxcbiAgLSB0aXRsZTogY3JlYXRlZFxcbiAgICBkYXRhOiBbXCIgKyBjb3VudHNTdHJpbmdDcmVhdGUgKyBcIl1cXG4gIC0gdGl0bGU6IG1vZGlmaWVkXFxuICAgIGRhdGE6IFtcIiArIGNvdW50c1N0cmluZ01vZCArIFwiXVxcbnRlbnNpb246IDAuMlxcbndpZHRoOiA4MCAlXFxubGFiZWxDb2xvcnM6IGZhbHNlXFxuZmlsbDogZmFsc2VcXG5iZWdpbkF0WmVybzogZmFsc2VcXG5iZXN0Rml0OiBmYWxzZVxcbmJlc3RGaXRUaXRsZTogdW5kZWZpbmVkXFxuYmVzdEZpdE51bWJlcjogMFxcbnN0YWNrZWQ6IHRydWVcXG55VGl0bGU6IFxcXCJOdW1iZXIgb2YgTm90ZXNcXFwiXFxueFRpdGxlOiBcXFwiTW9udGhzXFxcIlxcbnhNaW46IFwiKyBtb25hdHNiZWdyZW56dW5nICsgXCJcXG5gYGBcIlxyXG5cclxuXHRyZXR1cm4gY2hhcnRfc3RyaW5nO1xyXG59XHJcblxyXG4gIFxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVwbGFjZUNoYXJ0Q29udGVudCAoYXZhdGFyUGFnZU5hbWU6IHN0cmluZywgbmV3Q29udGVudDogc3RyaW5nKSB7XHJcblx0Y29uc3QgZXhpc3RpbmdGaWxlID0gYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChgJHthdmF0YXJQYWdlTmFtZX0ubWRgKTtcclxuXHRpZiAoZXhpc3RpbmdGaWxlID09IG51bGwpIHtcclxuXHRcdGNvbnNvbGUubG9nKGBGaWxlICR7YXZhdGFyUGFnZU5hbWV9Lm1kIGRvZXMgbm90IGV4aXN0YCk7XHJcblx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0Y29uc3QgZmlsZSA9IGV4aXN0aW5nRmlsZSBhcyBURmlsZTtcclxuXHJcblx0Y29uc3QgY29udGVudCA9IGF3YWl0IGFwcC52YXVsdC5yZWFkKGZpbGUpO1xyXG5cdGxldCByZWZlcmVuY2U6IG51bWJlciB8IG51bGwgPSBudWxsO1xyXG5cdGxldCBlbmQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xyXG5cdGxldCBzdGFydDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcblxyXG5cdGNvbnN0IGxpbmVzID0gY29udGVudC5zcGxpdChcIlxcblwiKTtcclxuXHRmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRjb25zdCBsaW5lID0gbGluZXNbaV0udHJpbSgpO1xyXG5cdFx0aWYgKGxpbmUgPT09IFwiXkNoYXJ0TW9udGhcIikge1xyXG5cdFx0XHRpZiAocmVmZXJlbmNlID09PSBudWxsKSB7XHJcblx0XHRcdFx0cmVmZXJlbmNlID0gaTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRpZiAocmVmZXJlbmNlICE9IG51bGwpe1xyXG5cdFx0ZW5kID0gcmVmZXJlbmNlO1xyXG5cdFx0c3RhcnQgPSByZWZlcmVuY2UgLSAyMTtcclxuXHRcdGNvbnN0IG5ld0xpbmVzID0gWy4uLmxpbmVzLnNsaWNlKDAsIHN0YXJ0KSwgbmV3Q29udGVudCwgLi4ubGluZXMuc2xpY2UoZW5kKV07XHJcblx0XHRhd2FpdCBhcHAudmF1bHQubW9kaWZ5KGZpbGUsIG5ld0xpbmVzLmpvaW4oXCJcXG5cIikpO1xyXG5cdH1cclxufTtcclxuXHJcblxyXG4iLCAiaW1wb3J0IHsgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5leHBvcnQgaW50ZXJmYWNlIEJhZGdlIHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgICBsZXZlbDogc3RyaW5nO1xyXG4gIH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja0lmUmVjZWl2ZUFCYWRnZShsZXZlbE9sZDogbnVtYmVyLCBsZXZlbE5ldzogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgY29uc3QgYmFkZ2VMZXZlbHM6IG51bWJlcltdID0gWzUsIDEwLCAyMCwgMjcsIDM1LCA0MiwgNTAsIDYwLCA3NSwgODIsIDkwLCAxMDBdO1xyXG4gIGxldCByZWNlaXZlQmFkZ2U6IGJvb2xlYW4gPSBmYWxzZVxyXG4gIGZvciAobGV0IGk9MDsgaSA8IGJhZGdlTGV2ZWxzLmxlbmd0aDsgaSsrKXtcclxuICAgIGlmIChsZXZlbE9sZCA8IGJhZGdlTGV2ZWxzW2ldICYmIGxldmVsTmV3ID49IGJhZGdlTGV2ZWxzW2ldKXtcclxuICAgICAgcmVjZWl2ZUJhZGdlID0gdHJ1ZVxyXG4gICAgfSBcclxuICB9XHJcbiAgcmV0dXJuIHJlY2VpdmVCYWRnZVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFkZ2VGb3JMZXZlbChsZXZlbDogbnVtYmVyLCBpbmZvcm06IGJvb2xlYW4pOiBCYWRnZSB7XHJcbiAgICBjb25zdCBiYWRnZUxldmVsczogbnVtYmVyW10gPSBbNSwgMTAsIDIwLCAyNywgMzUsIDQyLCA1MCwgNjAsIDc1LCA4MiwgOTAsIDEwMF07XHJcbiAgICBjb25zdCBiYWRnZU5hbWVzOiBCYWRnZVtdID0gW1xyXG4gICAgICB7IG5hbWU6IFwiRW5saWdodGVuZWQgTm92aWNlXCIsIGRlc2NyaXB0aW9uOiBcIkh1enphaCEgWW91J3ZlIGVtYmFya2VkIG9uIHRoZSBwYXRoIG9mIGtub3dsZWRnZSBhbmQgZWFybmVkIHRoZSB0aXRsZSBvZiAnRW5saWdodGVuZWQgTm92aWNlLicgVGhlIGpvdXJuZXkgaGFzIGp1c3QgYmVndW4sIGFuZCB5b3UncmUgYWxyZWFkeSByYWRpYXRpbmcgd2lzZG9tIGxpa2UgYSBiYWJ5IHN1biFcIiwgbGV2ZWw6IFwibGV2ZWwgNVwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJDdXJpb3VzIENvbm5vaXNzZXVyXCIsIGRlc2NyaXB0aW9uOiBcIkZhbnRhc3RpYyEgWW91J3ZlIGVtYnJhY2VkIHRoZSB3b25kZXJzIG9mIGxlYXJuaW5nIGFuZCBiZWNvbWUgYSAnQ3VyaW91cyBDb25ub2lzc2V1ci4nIFlvdXIgYXBwZXRpdGUgZm9yIGtub3dsZWRnZSBpcyBpbnNhdGlhYmxlLCBsaWtlIGEgYm90dG9tbGVzcyBib3dsIG9mIGljZSBjcmVhbSFcIiAsIGxldmVsOiBcImxldmVsIDEwXCIgfSxcclxuICAgICAgeyBuYW1lOiBcIkJyYWluaWFjIFRyYWlsYmxhemVyXCIsIGRlc2NyaXB0aW9uOiBcIkJyYXZvISBBcyBhICdCcmFpbmlhYyBUcmFpbGJsYXplciwnIHlvdSd2ZSBjYXJ2ZWQgeW91ciB3YXkgdGhyb3VnaCBhIGp1bmdsZSBvZiBpbmZvcm1hdGlvbiBhbmQgZW1lcmdlZCB2aWN0b3Jpb3VzLiBZb3VyIGludGVsbGVjdCBpcyBhIGJlYWNvbiBzaGluaW5nIGJyaWdodGx5IGZvciBvdGhlcnMgdG8gZm9sbG93IVwiICwgbGV2ZWw6IFwibGV2ZWwgMjBcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiU2Nob2xhcmx5IFRyYWlsYmxhemVyXCIsIGRlc2NyaXB0aW9uOiBcIkltcHJlc3NpdmUhIFlvdSdyZSBub3cgYSAnU2Nob2xhcmx5IFRyYWlsYmxhemVyLCcgYm9sZGx5IHZlbnR1cmluZyB0aHJvdWdoIGEgc2VhIG9mIGtub3dsZWRnZSB3aXRoIGEgY29tcGFzcyBvZiBjdXJpb3NpdHkgYW5kIGEgbWFwIG9mIGludGVsbGVjdCFcIiAsIGxldmVsOiBcImxldmVsIDI3XCIgfSxcclxuICAgICAgeyBuYW1lOiBcIkluZm8gTmluamEgTWFzdGVyXCIsIGRlc2NyaXB0aW9uOiBcIkluY3JlZGlibGUhIFlvdSd2ZSByZWFjaGVkIHRoZSBwaW5uYWNsZSBvZiBzdGVhbHRoeSBrbm93bGVkZ2UgbWFuYWdlbWVudC4gQXMgYW4gJ0luZm8gTmluamEgTWFzdGVyLCcgeW91IGNhbiBzbmF0Y2ggaW5mb3JtYXRpb24gZnJvbSB0aGUgc2hhZG93cyBsaWtlIGEgZGlnaXRhbCBuaW5qYSFcIiAsIGxldmVsOiBcImxldmVsIDM1XCIgfSxcclxuICAgICAgeyBuYW1lOiBcIldpc2UgT3dsIEd1cnVcIiwgZGVzY3JpcHRpb246IFwiV2hvby1ob28hIFlvdSd2ZSBhY2hpZXZlZCAnV2lzZSBPd2wgR3VydScgc3RhdHVzLiBZb3VyIHdpc2RvbSBpcyBsZWdlbmRhcnksIGFuZCB5b3VyIGhvb3RzIG9mIGtub3dsZWRnZSBlY2hvIHRocm91Z2ggdGhlIGZvcmVzdCBvZiBpZ25vcmFuY2UhXCIgLCBsZXZlbDogXCJsZXZlbCA0MlwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJFaW5zdGVpbiBJbmNhcm5hdGVcIiwgZGVzY3JpcHRpb246IFwiRXVyZWthISBZb3UndmUgYmVjb21lIGFuICdFaW5zdGVpbiBJbmNhcm5hdGUsJyBwdXNoaW5nIHRoZSBib3VuZGFyaWVzIG9mIHVuZGVyc3RhbmRpbmcgYW5kIGJlbmRpbmcgdGhlIGZhYnJpYyBvZiBrbm93bGVkZ2UgdG8geW91ciB3aWxsIVwiICwgbGV2ZWw6IFwibGV2ZWwgNTBcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiTWFzdGVybWluZCBTYWdlXCIsIGRlc2NyaXB0aW9uOiBcIk1hZ25pZmljZW50ISBZb3UndmUgYXNjZW5kZWQgdG8gdGhlIHJhbmsgb2YgJ01hc3Rlcm1pbmQgU2FnZSwnIGd1aWRpbmcgdGhlIHJpdmVycyBvZiBpbmZvcm1hdGlvbiBhbmQgZW5saWdodGVuaW5nIGFsbCB3aG8gc2VlayB3aXNkb20hXCIgLCBsZXZlbDogXCJsZXZlbCA2MFwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJDZXJlYnJhbCBNYWVzdHJvXCIsIGRlc2NyaXB0aW9uOiBcIkJyYXZpc3NpbW8hIFlvdSdyZSBub3cgYSAnQ2VyZWJyYWwgTWFlc3RybywnIGNvbmR1Y3RpbmcgdGhlIHN5bXBob255IG9mIGtub3dsZWRnZSB3aXRoIHRoZSBmaW5lc3NlIG9mIGEgdmlydHVvc28gY29uZHVjdG9yIVwiICwgbGV2ZWw6IFwibGV2ZWwgNzVcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiWmVuIEtub3dsZWRnZSBLZWVwZXJcIiwgZGVzY3JpcHRpb246IFwiU2VyZW5pdHkgYWNoaWV2ZWQhIEFzIGEgJ1plbiBLbm93bGVkZ2UgS2VlcGVyLCcgeW91IG1haW50YWluIGEgdHJhbnF1aWwgbWluZCB3aGlsZSBtYW5hZ2luZyB2YXN0IHBvb2xzIG9mIGtub3dsZWRnZSB3aXRoIGdyYWNlIGFuZCBwb2lzZS5cIiAsIGxldmVsOiBcImxldmVsIDgyXCIgfSxcclxuICAgICAgeyBuYW1lOiBcIkdyYW5kIEFyY2hpdmlzdCBPdmVybG9yZFwiLCBkZXNjcmlwdGlvbjogXCJBbGwgaGFpbCB0aGUgJ0dyYW5kIEFyY2hpdmlzdCBPdmVybG9yZCEnIFlvdSB3aWVsZCB0aGUga25vd2xlZGdlIG9mIGFnZXMgYW5kIGhvbGQgdGhlIGtleXMgdG8gdW5sb2NrIHRoZSBnYXRlcyBvZiB3aXNkb20hXCIgLCBsZXZlbDogXCJsZXZlbCA5MFwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJPbW5pc2NpZW50IFNhZ2Ugb2YgRXZlcnl0aGluZ1wiLCBkZXNjcmlwdGlvbjogXCJDb25ncmF0dWxhdGlvbnMsIG9oIHdpc2Ugb25lISBZb3UndmUgYXR0YWluZWQgdGhlIGhpZ2hlc3QgbGV2ZWwgb2YgZW5saWdodGVubWVudCBhcyB0aGUgJ09tbmlzY2llbnQgU2FnZSBvZiBFdmVyeXRoaW5nLicgWW91ciB1bmRlcnN0YW5kaW5nIGtub3dzIG5vIGJvdW5kcywgYW5kIHlvdXIgd2lzZG9tIGlzIGFzIHZhc3QgYXMgdGhlIGNvc21vcyBpdHNlbGYhXCIsIGxldmVsOiBcImxldmVsIDEwMFwiICB9LFxyXG4gICAgXTtcclxuICBcclxuICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJhZGdlTGV2ZWxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmIChsZXZlbCA+PSBiYWRnZUxldmVsc1tpXSkge1xyXG4gICAgICAgIGluZGV4ID0gaTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4vKlxyXG4gICAgaWYoIWluZm9ybSl7XHJcbiAgICAgIGlmIChpbmRleCAhPSAwKXtcclxuICAgICAgICBuZXcgTm90aWNlKGBZb3UndmUgZWFybmVkIHRoZSBcIiR7YmFkZ2VOYW1lc1tpbmRleF0ubmFtZX1cIiBiYWRnZS4gJHtiYWRnZU5hbWVzW2luZGV4XS5kZXNjcmlwdGlvbn1gKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGBZb3UndmUgZWFybmVkIHRoZSBcIiR7YmFkZ2VOYW1lc1tpbmRleF0ubmFtZX1cIiBiYWRnZS4gJHtiYWRnZU5hbWVzW2luZGV4XS5kZXNjcmlwdGlvbn1gKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiovICAgIFxyXG4gICAgLy9yZXR1cm4geyBuYW1lOiBiYWRnZU5hbWVzW2luZGV4XSwgZGVzY3JpcHRpb246IGBDb25ncmF0dWxhdGlvbnMhIFlvdSd2ZSByZWFjaGVkIExldmVsICR7bGV2ZWx9LiBZb3UndmUgZWFybmVkIHRoZSBcIiR7YmFkZ2VOYW1lc1tpbmRleF19XCIgYmFkZ2UuYCB9O1xyXG4gICAgcmV0dXJuIGJhZGdlTmFtZXNbaW5kZXhdXHJcbiAgfVxyXG4gIFxyXG5cclxuXHJcbiAgZXhwb3J0ICBmdW5jdGlvbiBnZXRCYWRnZUZvckluaXRMZXZlbChsZXZlbDogbnVtYmVyKTogQmFkZ2Uge1xyXG4gICAgY29uc3QgYmFkZ2VMZXZlbHM6IG51bWJlcltdID0gWzAsIDMsIDcsIDE1LCAyMywgMzAsIDM1LCA0MiwgNTAsIDYwLCA3NSwgODIsIDkwLCAxMDBdO1xyXG4gICAgY29uc3QgYmFkZ2VOYW1lc0luaXQ6IEJhZGdlW10gPSBbXHJcbiAgICAgIHsgbmFtZTogXCJMb3JlIFNlZWtlciBJbml0aWF0ZVwiLCBkZXNjcmlwdGlvbjogXCJXZWxjb21lIHRvIHRoZSBqb3VybmV5IG9mIGtub3dsZWRnZSEgQXMgYSAnTG9yZSBTZWVrZXIgSW5pdGlhdGUsJyB5b3UndmUgdGFrZW4geW91ciBmaXJzdCBzdGVwcyBpbnRvIHRoZSB3b3JsZCBvZiBvcmdhbml6ZWQgd2lzZG9tLiBZb3VyIHF1ZXN0IGhhcyBqdXN0IGJlZ3VuLCBhbmQgd2l0aCBlYWNoIG5vdGUgeW91IG1ha2UsIHlvdSBsYXkgdGhlIGZvdW5kYXRpb24gZm9yIGEgZnV0dXJlIHJpY2ggd2l0aCBpbnNpZ2h0cyBhbmQgdW5kZXJzdGFuZGluZy4gWW91ciBqb3VybmV5IHN0YXJ0cyBoZXJlLCBhbmQgdGhlIHBhdGggYWhlYWQgaXMgZmlsbGVkIHdpdGggcG90ZW50aWFsIGFuZCBkaXNjb3ZlcnkuXCIsIGxldmVsOiBcImxldmVsIDFcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiTG9yZSBBcHByZW50aWNlXCIsIGRlc2NyaXB0aW9uOiBcIllvdSd2ZSBoaXQgdGhlIGdyb3VuZCBydW5uaW5nIHdpdGggeW91ciBleGlzdGluZyBrbm93bGVkZ2UgdHJlYXN1cmVzISBZb3UncmUgYWxyZWFkeSBhbiAnTG9yZSBBcHByZW50aWNlLCcgYXJtZWQgd2l0aCBhIHdlYWx0aCBvZiB3aXNkb20gYW5kIHJlYWR5IHRvIHNoYXBlIGl0IGZ1cnRoZXIuXCIsIGxldmVsOiBcImxldmVsIDNcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiU2F2dnkgU2Nob2xhclwiLCBkZXNjcmlwdGlvbjogXCJZb3VyIGV4aXN0aW5nIG5vdGVzIGhhdmUgZ2l2ZW4geW91IGEgaGVhZCBzdGFydCEgWW91J3JlIG5vdyBhICdTYXZ2eSBTY2hvbGFyLCcgY29uZmlkZW50bHkgZGl2aW5nIGludG8gdGhlIHNlYSBvZiBpbmZvcm1hdGlvbiB3aXRoIGEgdHJlYXN1cmUgdHJvdmUgb2YgaW5zaWdodHMuXCIgLCBsZXZlbDogXCJsZXZlbCA3XCIgfSxcclxuICAgICAgeyBuYW1lOiBcIlNhZ2UncyBGb3VuZGF0aW9uXCIsIGRlc2NyaXB0aW9uOiBcIkJ1aWxkaW5nIHVwb24geW91ciBwcmUtZXhpc3Rpbmcgbm90ZXMsIHlvdSdyZSBlc3RhYmxpc2hpbmcgdGhlICdTYWdlJ3MgRm91bmRhdGlvbicgZm9yIGFuIGV2ZW4gZ3JhbmRlciBlZGlmaWNlIG9mIGtub3dsZWRnZS4gWW91ciBncm91bmR3b3JrIGlzIGltcHJlc3NpdmUhXCIgLCBsZXZlbDogXCJsZXZlbCAxNVwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJXaXNkb20gU2VlZGxpbmdcIiwgZGVzY3JpcHRpb246IFwiWW91ciBleGlzdGluZyBub3RlcyBoYXZlIG51cnR1cmVkIHRoZSBncm93dGggb2YgYSAnV2lzZG9tIFNlZWRsaW5nLicgWW91J3JlIGN1bHRpdmF0aW5nIHlvdXIgZ2FyZGVuIG9mIGtub3dsZWRnZSB3aXRoIGNhcmUgYW5kIHBhdGllbmNlLlwiICwgbGV2ZWw6IFwibGV2ZWwgMjNcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiUHJvZGlnaW91cyBQcmVwYXJlclwiLCBkZXNjcmlwdGlvbjogXCJUaGFua3MgdG8geW91ciBwcmlvciBlZmZvcnRzLCB5b3UncmUgYSAnUHJvZGlnaW91cyBQcmVwYXJlciwnIHN0YW5kaW5nIHRhbGwgYW1vbmcgeW91ciBub3RlcyBhbmQgcmVhZHkgdG8gY29ucXVlciBuZXcgcmVhbG1zIG9mIHVuZGVyc3RhbmRpbmcuXCIgLCBsZXZlbDogXCJsZXZlbCAzMFwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJFcGljIEVwaXBoYW55IEV4cGxvcmVyXCIsIGRlc2NyaXB0aW9uOiBcIllvdXIgcGFzdCBub3RlcyBoYXZlIGxlZCB5b3UgdG8gdGhlIGdyYW5kICdFcGljIEVwaXBoYW55IEV4cGxvcmVyJyBzdGF0dXMhIFlvdSd2ZSBhbHJlYWR5IGJlZW4gZG93biBhIGZldyByYWJiaXQgaG9sZXMgYW5kIGNvbWUgb3V0IHdpdGggZGF6emxpbmcgZGlzY292ZXJpZXMuXCIgLCBsZXZlbDogXCJsZXZlbCAzNVwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJMb3JlIEx1bWluYXJ5XCIsIGRlc2NyaXB0aW9uOiBcIldpdGggeW91ciBleGlzdGluZyBub3RlcyBpbGx1bWluYXRpbmcgeW91ciBwYXRoLCB5b3UndmUgYmVjb21lIGEgJ0xvcmUgTHVtaW5hcnksJyBzaGluaW5nIGxpZ2h0IG9uIHRoZSBteXN0ZXJpZXMgb2YgdGhlIHVuaXZlcnNlLCBvbmUgaWRlYSBhdCBhIHRpbWUuXCIgLCBsZXZlbDogXCJsZXZlbCA0MlwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJTY3JpYmUgb2YgdGhlIEFuY2llbnRzXCIsIGRlc2NyaXB0aW9uOiBcIllvdXIgbWFzdGVyeSBvZiBwZXJzb25hbCBrbm93bGVkZ2UgbWFuYWdlbWVudCBoYXMgZWxldmF0ZWQgeW91IHRvIHRoZSBlc3RlZW1lZCByYW5rIG9mIHRoZSAnU2NyaWJlIG9mIHRoZSBBbmNpZW50cy4nIFlvdXIgZXhpc3Rpbmcgbm90ZXMgaGF2ZSB0cmFuc2Zvcm1lZCBpbnRvIHRyZWFzdXJlcywgYnJpZGdpbmcgdGhlIGdhcCBiZXR3ZWVuIG9sZCB3aXNkb20gYW5kIG5ldyBkaXNjb3Zlcmllcy5cIiAsIGxldmVsOiBcImxldmVsIDUwXCIgfSxcclxuICAgICAgeyBuYW1lOiBcIkV1cmVrYSBNYWVzdHJvXCIsIGRlc2NyaXB0aW9uOiBcIkFybWVkIHdpdGggeW91ciBleGlzdGluZyBub3RlcywgeW91J3JlIHRoZSAnRXVyZWthIE1hZXN0cm8sJyBjb21wb3NpbmcgYSBzeW1waG9ueSBvZiBpbnNpZ2h0cyB0aGF0IGhhcm1vbml6ZSB3aXRoIHRoZSBtZWxvZHkgb2YgZGlzY292ZXJ5LlwiICwgbGV2ZWw6IFwibGV2ZWwgNjBcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiQ2hyb25pY2xlcyBDaGFtcGlvblwiLCBkZXNjcmlwdGlvbjogXCJXaXRoIHlvdXIgZXhpc3Rpbmcgbm90ZXMgc3RhbmRpbmcgYXMgYSB0ZXN0YW1lbnQsIHlvdSd2ZSBhc2NlbmRlZCB0byB0aGUgaWxsdXN0cmlvdXMgJ0Nocm9uaWNsZXMgQ2hhbXBpb24nIGxldmVsLiBZb3VyIGpvdXJuZXkgdGhyb3VnaCB0aW1lJ3MgdGFwZXN0cnkgaGFzIGJyb3VnaHQgZm9ydGggYSBzeW1waG9ueSBvZiBpbnNpZ2h0cyB0aGF0IGhhcm1vbml6ZSBwYXN0IGFuZCBwcmVzZW50LlwiICwgbGV2ZWw6IFwibGV2ZWwgNzVcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiVGhlIEN1cmlvdXMgQ2FydG9ncmFwaGVyXCIsIGRlc2NyaXB0aW9uOiBcIkFzICdUaGUgQ3VyaW91cyBDYXJ0b2dyYXBoZXIsJyB5b3VyIGV4aXN0aW5nIG5vdGVzIGhhdmUgbWFwcGVkIG91dCB1bmNoYXJ0ZWQgdGVycml0b3JpZXMgb2YgdW5kZXJzdGFuZGluZy4gWW91ciBjdXJpb3NpdHkga25vd3Mgbm8gYm91bmRzLCBhbmQgeW91ciBub3RlcyBhcmUgdGhlIGNvbXBhc3MgZ3VpZGluZyB5b3VyIGV4cGxvcmF0aW9uLlwiICwgbGV2ZWw6IFwibGV2ZWwgODJcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiU3VsdGFuIG9mIFN5bnRoZXNpc1wiLCBkZXNjcmlwdGlvbjogXCJZb3VyIGV4aXN0aW5nIG5vdGVzIGhhdmUgbWFkZSB5b3UgdGhlICdTdWx0YW4gb2YgU3ludGhlc2lzLicgWW91J3JlIHRoZSBtYXN0ZXIgd2VhdmVyLCB0aHJlYWRpbmcgdG9nZXRoZXIgdGhyZWFkcyBvZiBpbmZvcm1hdGlvbiBpbnRvIGEgcmljaCB0YXBlc3RyeSBvZiBpbnNpZ2h0LlwiICwgbGV2ZWw6IFwibGV2ZWwgOTBcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiRXRlcm5hbCBBcmNoaXZpc3RcIiwgZGVzY3JpcHRpb246IFwiQXQgdGhlIHBpbm5hY2xlIG9mIHBlcnNvbmFsIGtub3dsZWRnZSBtYXN0ZXJ5LCB5b3UncmUgbm93IHJldmVyZWQgYXMgdGhlICdFdGVybmFsIEFyY2hpdmlzdC4nIFlvdXIgZXhpc3Rpbmcgbm90ZXMsIGNhcmVmdWxseSBjdXJhdGVkIGFuZCBudXJ0dXJlZCwgc3RhbmQgYXMgaW1tb3J0YWwgYmVhY29ucywgZ3VpZGluZyBzZWVrZXJzIHRocm91Z2ggdGhlIGxhYnlyaW50aCBvZiBrbm93bGVkZ2UgYWNyb3NzIGFnZXMuXCIgLCBsZXZlbDogXCJsZXZlbCAxMDBcIiB9LFxyXG4gICAgXTtcclxuICBcclxuICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJhZGdlTGV2ZWxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmIChsZXZlbCA+PSBiYWRnZUxldmVsc1tpXSkge1xyXG4gICAgICAgIGluZGV4ID0gaTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4vKlxyXG4gICAgaWYgKGluZGV4ICE9IDApe1xyXG4gICAgICBuZXcgTm90aWNlKGBZb3UndmUgZWFybmVkIHRoZSBcIiR7YmFkZ2VOYW1lc0luaXRbaW5kZXhdLm5hbWV9XCIgYmFkZ2UuICR7YmFkZ2VOYW1lc0luaXRbaW5kZXhdLmRlc2NyaXB0aW9ufWApXHJcbiAgICAgIGNvbnNvbGUubG9nKGBZb3UgZWFybmVkICR7YmFkZ2VOYW1lc0luaXRbaW5kZXhdLm5hbWV9IC0gJHtiYWRnZU5hbWVzSW5pdFtpbmRleF0uZGVzY3JpcHRpb259YClcclxuICAgIH1cclxuKi8gICBcclxuICBcclxuICAgIC8vcmV0dXJuIHsgbmFtZTogYmFkZ2VOYW1lc1tpbmRleF0sIGRlc2NyaXB0aW9uOiBgQ29uZ3JhdHVsYXRpb25zISBZb3UndmUgcmVhY2hlZCBMZXZlbCAke2xldmVsfS4gWW91J3ZlIGVhcm5lZCB0aGUgXCIke2JhZGdlTmFtZXNbaW5kZXhdfVwiIGJhZGdlLmAgfTtcclxuICAgIHJldHVybiBiYWRnZU5hbWVzSW5pdFtpbmRleF1cclxuICB9XHJcblxyXG5cclxuICAvLyBFeGFtcGxlIHVzYWdlOlxyXG4gIC8vIGNvbnN0IGN1cnJlbnRMZXZlbCA9IDQyOyAvLyBSZXBsYWNlIHRoaXMgd2l0aCB0aGUgYWN0dWFsIHBsYXllcidzIGxldmVsXHJcbiAgLy8gY29uc3QgYmFkZ2UgPSBnZXRCYWRnZUZvckxldmVsKGN1cnJlbnRMZXZlbCk7XHJcbiAgLy8gY29uc29sZS5sb2coYENvbmdyYXR1bGF0aW9ucyEgWW91J3ZlIHJlYWNoZWQgTGV2ZWwgJHtjdXJyZW50TGV2ZWx9LiBZb3UndmUgZWFybmVkIHRoZSBcIiR7YmFkZ2UubmFtZX1cIiBiYWRnZS4gJHtiYWRnZS5kZXNjcmlwdGlvbn1gKTtcclxuICBcclxuXHJcblxyXG5cclxuXHJcbiAgICAvKlxyXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRCYWRnZUZvckxldmVsKGxldmVsOiBudW1iZXIpOiBCYWRnZSB7XHJcbiAgICBjb25zdCBiYWRnZXM6IEJhZGdlW10gPSBbXHJcbiAgICAgIHsgbmFtZTogXCJFbmxpZ2h0ZW5lZCBOb3ZpY2VcIiwgZGVzY3JpcHRpb246IFwiSHV6emFoISBZb3UndmUgZW1iYXJrZWQgb24gdGhlIHBhdGggb2Yga25vd2xlZGdlIGFuZCBlYXJuZWQgdGhlIHRpdGxlIG9mICdFbmxpZ2h0ZW5lZCBOb3ZpY2UuJyBUaGUgam91cm5leSBoYXMganVzdCBiZWd1biwgYW5kIHlvdSdyZSBhbHJlYWR5IHJhZGlhdGluZyB3aXNkb20gbGlrZSBhIGJhYnkgc3VuIVwiIH0sXHJcbiAgICAgIHsgbmFtZTogXCJDdXJpb3VzIENvbm5vaXNzZXVyXCIsIGRlc2NyaXB0aW9uOiBcIkZhbnRhc3RpYyEgWW91J3ZlIGVtYnJhY2VkIHRoZSB3b25kZXJzIG9mIGxlYXJuaW5nIGFuZCBiZWNvbWUgYSAnQ3VyaW91cyBDb25ub2lzc2V1ci4nIFlvdXIgYXBwZXRpdGUgZm9yIGtub3dsZWRnZSBpcyBpbnNhdGlhYmxlLCBsaWtlIGEgYm90dG9tbGVzcyBib3dsIG9mIGljZSBjcmVhbSFcIiB9LFxyXG4gICAgICB7IG5hbWU6IFwiQnJhaW5pYWMgVHJhaWxibGF6ZXJcIiwgZGVzY3JpcHRpb246IFwiQnJhdm8hIEFzIGEgJ0JyYWluaWFjIFRyYWlsYmxhemVyLCcgeW91J3ZlIGNhcnZlZCB5b3VyIHdheSB0aHJvdWdoIGEganVuZ2xlIG9mIGluZm9ybWF0aW9uIGFuZCBlbWVyZ2VkIHZpY3RvcmlvdXMuIFlvdXIgaW50ZWxsZWN0IGlzIGEgYmVhY29uIHNoaW5pbmcgYnJpZ2h0bHkgZm9yIG90aGVycyB0byBmb2xsb3chXCIgfSxcclxuICAgICAgLy8gQWRkIG1vcmUgYmFkZ2VzIGhlcmUgZm9yIGxldmVscyA1LCAxMCwgMjAsIDI3LCAzNSwgNDIsIDUwLCA2MCwgNzUsIDgyLCA5MCwgYW5kIDEwMFxyXG4gICAgICAvLyBFeGFtcGxlOlxyXG4gICAgICAvLyB7IG5hbWU6IFwiU2Nob2xhcmx5IFRyYWlsYmxhemVyXCIsIGRlc2NyaXB0aW9uOiBcIkltcHJlc3NpdmUhIFlvdSdyZSBub3cgYSAnU2Nob2xhcmx5IFRyYWlsYmxhemVyLCcgYm9sZGx5IHZlbnR1cmluZyB0aHJvdWdoIGEgc2VhIG9mIGtub3dsZWRnZSB3aXRoIGEgY29tcGFzcyBvZiBjdXJpb3NpdHkgYW5kIGEgbWFwIG9mIGludGVsbGVjdCFcIiB9LFxyXG4gICAgICAvLyB7IG5hbWU6IFwiSW5mbyBOaW5qYSBNYXN0ZXJcIiwgZGVzY3JpcHRpb246IFwiSW5jcmVkaWJsZSEgWW91J3ZlIHJlYWNoZWQgdGhlIHBpbm5hY2xlIG9mIHN0ZWFsdGh5IGtub3dsZWRnZSBtYW5hZ2VtZW50LiBBcyBhbiAnSW5mbyBOaW5qYSBNYXN0ZXIsJyB5b3UgY2FuIHNuYXRjaCBpbmZvcm1hdGlvbiBmcm9tIHRoZSBzaGFkb3dzIGxpa2UgYSBkaWdpdGFsIG5pbmphIVwiIH0sXHJcbiAgICAgIC8vIC4uLmFuZCBzbyBvblxyXG4gICAgXTtcclxuICBcclxuICAgIGNvbnN0IG1heExldmVsID0xMDA7IC8vIEFzc3VtaW5nIGVhY2ggYmFkZ2UgaXMgYXdhcmRlZCBldmVyeSA1IGxldmVsc1xyXG4gICAgY29uc3QgY2FwcGVkTGV2ZWwgPSBNYXRoLm1pbihsZXZlbCwgbWF4TGV2ZWwpO1xyXG4gICAgY29uc3QgaW5kZXggPSBNYXRoLmZsb29yKGNhcHBlZExldmVsIC8gNSkgLSAxO1xyXG4gICAgcmV0dXJuIGJhZGdlc1tpbmRleF07XHJcbiAgfVxyXG4gIFxyXG5cclxuICBpbnRlcmZhY2UgQmFkZ2Uge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICB9XHJcbiAgKi9cclxuIiwgImV4cG9ydCBpbnRlcmZhY2UgTGV2ZWxEYXRhIHtcclxuICAgIHBvaW50czogbnVtYmVyO1xyXG4gICAgbGV2ZWw6IG51bWJlcjtcclxuICAgIHBvaW50c05leHQ6IG51bWJlcjtcclxuICB9XHJcbiAgXHJcbiAgY29uc3QgbGV2ZWxEYXRhOiBMZXZlbERhdGFbXSA9IFtcclxuICAgIHsgcG9pbnRzOiAwLCBsZXZlbDogMCwgcG9pbnRzTmV4dDogMH0sXHJcbiAgICB7IHBvaW50czogMCwgbGV2ZWw6IDEsIHBvaW50c05leHQ6IDEwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxMDAwLCBsZXZlbDogMiwgcG9pbnRzTmV4dDogMzAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDMwMDAsIGxldmVsOiAzLCBwb2ludHNOZXh0OiA3NTAwIH0sXHJcbiAgICB7IHBvaW50czogNzUwMCwgbGV2ZWw6IDQsIHBvaW50c05leHQ6IDE1MDAwIH0sXHJcbiAgICB7IHBvaW50czogMTUwMDAsIGxldmVsOiA1LCBwb2ludHNOZXh0OiAzMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDMwMDAwLCBsZXZlbDogNiwgcG9pbnRzTmV4dDogNTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA1MDAwMCwgbGV2ZWw6IDcsIHBvaW50c05leHQ6IDgwMDAwIH0sXHJcbiAgICB7IHBvaW50czogODAwMDAsIGxldmVsOiA4LCBwb2ludHNOZXh0OiAxMjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxMjAwMDAsIGxldmVsOiA5LCBwb2ludHNOZXh0OiAxNzAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxNzAwMDAsIGxldmVsOiAxMCwgcG9pbnRzTmV4dDogMjMwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMjMwMDAwLCBsZXZlbDogMTEsIHBvaW50c05leHQ6IDMwMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDMwMDAwMCwgbGV2ZWw6IDEyLCBwb2ludHNOZXh0OiAzODAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAzODAwMDAsIGxldmVsOiAxMywgcG9pbnRzTmV4dDogNDcwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNDcwMDAwLCBsZXZlbDogMTQsIHBvaW50c05leHQ6IDYwMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDYwMDAwMCwgbGV2ZWw6IDE1LCBwb2ludHNOZXh0OiA3NTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA3NTAwMDAsIGxldmVsOiAxNiwgcG9pbnRzTmV4dDogOTIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogOTIwMDAwLCBsZXZlbDogMTcsIHBvaW50c05leHQ6IDExMTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxMTEwMDAwLCBsZXZlbDogMTgsIHBvaW50c05leHQ6IDEzMjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxMzIwMDAwLCBsZXZlbDogMTksIHBvaW50c05leHQ6IDE1NTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxNTUwMDAwLCBsZXZlbDogMjAsIHBvaW50c05leHQ6IDE4MDAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxODAwMDAwLCBsZXZlbDogMjEsIHBvaW50c05leHQ6IDIwNzAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAyMDcwMDAwLCBsZXZlbDogMjIsIHBvaW50c05leHQ6IDIzNjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAyMzYwMDAwLCBsZXZlbDogMjMsIHBvaW50c05leHQ6IDI2NzAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAyNjcwMDAwLCBsZXZlbDogMjQsIHBvaW50c05leHQ6IDMwMDAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAzMDAwMDAwLCBsZXZlbDogMjUsIHBvaW50c05leHQ6IDMzNTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAzMzUwMDAwLCBsZXZlbDogMjYsIHBvaW50c05leHQ6IDM3MjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAzNzIwMDAwLCBsZXZlbDogMjcsIHBvaW50c05leHQ6IDQxMTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA0MTEwMDAwLCBsZXZlbDogMjgsIHBvaW50c05leHQ6IDQ1MjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA0NTIwMDAwLCBsZXZlbDogMjksIHBvaW50c05leHQ6IDQ5NTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA0OTUwMDAwLCBsZXZlbDogMzAsIHBvaW50c05leHQ6IDU0MDAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA1NDAwMDAwLCBsZXZlbDogMzEsIHBvaW50c05leHQ6IDU4NzAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA1ODcwMDAwLCBsZXZlbDogMzIsIHBvaW50c05leHQ6IDYzNjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA2MzYwMDAwLCBsZXZlbDogMzMsIHBvaW50c05leHQ6IDY4NzAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA2ODcwMDAwLCBsZXZlbDogMzQsIHBvaW50c05leHQ6IDc0MDAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA3NDAwMDAwLCBsZXZlbDogMzUsIHBvaW50c05leHQ6IDc5NTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA3OTUwMDAwLCBsZXZlbDogMzYsIHBvaW50c05leHQ6IDg1MjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA4NTIwMDAwLCBsZXZlbDogMzcsIHBvaW50c05leHQ6IDkxMTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA5MTEwMDAwLCBsZXZlbDogMzgsIHBvaW50c05leHQ6IDk3MjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA5NzIwMDAwLCBsZXZlbDogMzksIHBvaW50c05leHQ6IDEwMzUwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTAzNTAwMDAsIGxldmVsOiA0MCwgcG9pbnRzTmV4dDogMTEwMDAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxMTAwMDAwMCwgbGV2ZWw6IDQxLCBwb2ludHNOZXh0OiAxMTY3MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDExNjcwMDAwLCBsZXZlbDogNDIsIHBvaW50c05leHQ6IDEyMzYwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTIzNjAwMDAsIGxldmVsOiA0MywgcG9pbnRzTmV4dDogMTMwNzAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxMzA3MDAwMCwgbGV2ZWw6IDQ0LCBwb2ludHNOZXh0OiAxMzgwMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDEzODAwMDAwLCBsZXZlbDogNDUsIHBvaW50c05leHQ6IDE0NTUwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTQ1NTAwMDAsIGxldmVsOiA0NiwgcG9pbnRzTmV4dDogMTUzMjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxNTMyMDAwMCwgbGV2ZWw6IDQ3LCBwb2ludHNOZXh0OiAxNjExMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDE2MTEwMDAwLCBsZXZlbDogNDgsIHBvaW50c05leHQ6IDE2OTIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTY5MjAwMDAsIGxldmVsOiA0OSwgcG9pbnRzTmV4dDogMTc3NTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxNzc1MDAwMCwgbGV2ZWw6IDUwLCBwb2ludHNOZXh0OiAxODYwMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDE4NjAwMDAwLCBsZXZlbDogNTEsIHBvaW50c05leHQ6IDE5NDcwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTk0NzAwMDAsIGxldmVsOiA1MiwgcG9pbnRzTmV4dDogMjAzNjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAyMDM2MDAwMCwgbGV2ZWw6IDUzLCBwb2ludHNOZXh0OiAyMTI3MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDIxMjcwMDAwLCBsZXZlbDogNTQsIHBvaW50c05leHQ6IDIyMjAwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMjIyMDAwMDAsIGxldmVsOiA1NSwgcG9pbnRzTmV4dDogMjMxNTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAyMzE1MDAwMCwgbGV2ZWw6IDU2LCBwb2ludHNOZXh0OiAyNDEyMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDI0MTIwMDAwLCBsZXZlbDogNTcsIHBvaW50c05leHQ6IDI1MTEwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMjUxMTAwMDAsIGxldmVsOiA1OCwgcG9pbnRzTmV4dDogMjYxMjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAyNjEyMDAwMCwgbGV2ZWw6IDU5LCBwb2ludHNOZXh0OiAyNzE1MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDI3MTUwMDAwLCBsZXZlbDogNjAsIHBvaW50c05leHQ6IDI4MjAwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMjgyMDAwMDAsIGxldmVsOiA2MSwgcG9pbnRzTmV4dDogMjkyNzAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAyOTI3MDAwMCwgbGV2ZWw6IDYyLCBwb2ludHNOZXh0OiAzMDM2MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDMwMzYwMDAwLCBsZXZlbDogNjMsIHBvaW50c05leHQ6IDMxNDcwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMzE0NzAwMDAsIGxldmVsOiA2NCwgcG9pbnRzTmV4dDogMzI2MDAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAzMjYwMDAwMCwgbGV2ZWw6IDY1LCBwb2ludHNOZXh0OiAzMzc1MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDMzNzUwMDAwLCBsZXZlbDogNjYsIHBvaW50c05leHQ6IDM0OTIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMzQ5MjAwMDAsIGxldmVsOiA2NywgcG9pbnRzTmV4dDogMzYxMTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAzNjExMDAwMCwgbGV2ZWw6IDY4LCBwb2ludHNOZXh0OiAzNzMyMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDM3MzIwMDAwLCBsZXZlbDogNjksIHBvaW50c05leHQ6IDM4NTUwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMzg1NTAwMDAsIGxldmVsOiA3MCwgcG9pbnRzTmV4dDogMzk4MDAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAzOTgwMDAwMCwgbGV2ZWw6IDcxLCBwb2ludHNOZXh0OiA0MTA3MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDQxMDcwMDAwLCBsZXZlbDogNzIsIHBvaW50c05leHQ6IDQyMzYwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNDIzNjAwMDAsIGxldmVsOiA3MywgcG9pbnRzTmV4dDogNDM2NzAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA0MzY3MDAwMCwgbGV2ZWw6IDc0LCBwb2ludHNOZXh0OiA0NTAwMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDQ1MDAwMDAwLCBsZXZlbDogNzUsIHBvaW50c05leHQ6IDQ2MzUwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNDYzNTAwMDAsIGxldmVsOiA3NiwgcG9pbnRzTmV4dDogNDc3MjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA0NzcyMDAwMCwgbGV2ZWw6IDc3LCBwb2ludHNOZXh0OiA0OTExMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDQ5MTEwMDAwLCBsZXZlbDogNzgsIHBvaW50c05leHQ6IDUwNTIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNTA1MjAwMDAsIGxldmVsOiA3OSwgcG9pbnRzTmV4dDogNTE5NTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA1MTk1MDAwMCwgbGV2ZWw6IDgwLCBwb2ludHNOZXh0OiA1MzQwMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDUzNDAwMDAwLCBsZXZlbDogODEsIHBvaW50c05leHQ6IDU0ODcwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNTQ4NzAwMDAsIGxldmVsOiA4MiwgcG9pbnRzTmV4dDogNTYzNjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA1NjM2MDAwMCwgbGV2ZWw6IDgzLCBwb2ludHNOZXh0OiA1Nzg3MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDU3ODcwMDAwLCBsZXZlbDogODQsIHBvaW50c05leHQ6IDU5NDAwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNTk0MDAwMDAsIGxldmVsOiA4NSwgcG9pbnRzTmV4dDogNjA5NTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA2MDk1MDAwMCwgbGV2ZWw6IDg2LCBwb2ludHNOZXh0OiA2MjUyMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDYyNTIwMDAwLCBsZXZlbDogODcsIHBvaW50c05leHQ6IDY0MTEwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNjQxMTAwMDAsIGxldmVsOiA4OCwgcG9pbnRzTmV4dDogNjU3MjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA2NTcyMDAwMCwgbGV2ZWw6IDg5LCBwb2ludHNOZXh0OiA2NzM1MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDY3MzUwMDAwLCBsZXZlbDogOTAsIHBvaW50c05leHQ6IDY5MDAwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNjkwMDAwMDAsIGxldmVsOiA5MSwgcG9pbnRzTmV4dDogNzA2NzAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA3MDY3MDAwMCwgbGV2ZWw6IDkyLCBwb2ludHNOZXh0OiA3MjM2MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDcyMzYwMDAwLCBsZXZlbDogOTMsIHBvaW50c05leHQ6IDc0MDcwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNzQwNzAwMDAsIGxldmVsOiA5NCwgcG9pbnRzTmV4dDogNzU4MDAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA3NTgwMDAwMCwgbGV2ZWw6IDk1LCBwb2ludHNOZXh0OiA3NzU1MDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDc3NTUwMDAwLCBsZXZlbDogOTYsIHBvaW50c05leHQ6IDc5MzIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogNzkzMjAwMDAsIGxldmVsOiA5NywgcG9pbnRzTmV4dDogODExMTAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiA4MTExMDAwMCwgbGV2ZWw6IDk4LCBwb2ludHNOZXh0OiA4MjkyMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDgyOTIwMDAwLCBsZXZlbDogOTksIHBvaW50c05leHQ6IDg0NzUwMDAwIH0sXHJcbiAgICB7IHBvaW50czogODQ3NTAwMDAsIGxldmVsOiAxMDAsIHBvaW50c05leHQ6IDg2NjAwMDAwIH0sXHJcbiAgICB7IHBvaW50czogODY2MDAwMDAsIGxldmVsOiAxMDEsIHBvaW50c05leHQ6IDg4NDcwMDAwIH0sXHJcbiAgICB7IHBvaW50czogODg0NzAwMDAsIGxldmVsOiAxMDIsIHBvaW50c05leHQ6IDkwMzYwMDAwIH0sXHJcbiAgICB7IHBvaW50czogOTAzNjAwMDAsIGxldmVsOiAxMDMsIHBvaW50c05leHQ6IDkyMjcwMDAwIH0sXHJcbiAgICB7IHBvaW50czogOTIyNzAwMDAsIGxldmVsOiAxMDQsIHBvaW50c05leHQ6IDk0MjAwMDAwIH0sXHJcbiAgICB7IHBvaW50czogOTQyMDAwMDAsIGxldmVsOiAxMDUsIHBvaW50c05leHQ6IDk2MTUwMDAwIH0sXHJcbiAgICB7IHBvaW50czogOTYxNTAwMDAsIGxldmVsOiAxMDYsIHBvaW50c05leHQ6IDk4MTIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogOTgxMjAwMDAsIGxldmVsOiAxMDcsIHBvaW50c05leHQ6IDEwMDExMDAwMCB9LFxyXG4gICAgeyBwb2ludHM6IDEwMDExMDAwMCwgbGV2ZWw6IDEwOCwgcG9pbnRzTmV4dDogMTAyMTIwMDAwIH0sXHJcbiAgICB7IHBvaW50czogMTAyMTIwMDAwLCBsZXZlbDogMTA5LCBwb2ludHNOZXh0OiAxMDIxMjAwMDAgfSxcclxuICAgIHsgcG9pbnRzOiAxMDQxNTAwMDAsIGxldmVsOiAxMTAsIHBvaW50c05leHQ6IDEwNjE1MDAwMCB9LFxyXG4gIF07XHJcbiAgXHJcbiAgZXhwb3J0IGZ1bmN0aW9uIGdldExldmVsRm9yUG9pbnRzKHBvaW50czogbnVtYmVyKTogTGV2ZWxEYXRhIHtcclxuICAgIGxldCBsZXZlbCA6TGV2ZWxEYXRhID0gbGV2ZWxEYXRhWzBdO1xyXG4gICAgZm9yIChjb25zdCBkYXRhIG9mIGxldmVsRGF0YSkge1xyXG4gICAgICBpZiAocG9pbnRzID49IGRhdGEucG9pbnRzKSB7XHJcbiAgICAgICAgbGV2ZWwgPSBkYXRhO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGV2ZWw7XHJcbiAgfVxyXG5cclxuICBleHBvcnQgZnVuY3Rpb24gc3RhdHVzUG9pbnRzRm9yTGV2ZWwodGFyZ2V0TGV2ZWw6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBsZXQgc3RhdHVzUG9pbnRzID0gMDtcclxuICAgIGZvciAoY29uc3QgZGF0YSBvZiBsZXZlbERhdGEpIHtcclxuICAgICAgaWYgKHRhcmdldExldmVsID09IGRhdGEubGV2ZWwgJiYgc3RhdHVzUG9pbnRzID09IDApIHtcclxuICAgICAgICBzdGF0dXNQb2ludHMgPSBkYXRhLnBvaW50cztcclxuICAgICAgfSBcclxuICAgIH1cclxuXHJcblx0XHRcclxuXHRcdHJldHVybiBzdGF0dXNQb2ludHNcclxuICB9XHJcbiAgXHJcblxyXG4vKlxyXG5jb25zdCBwb2ludHMgPSA1NTAwO1xyXG5jb25zdCBsZXZlbCA9IGdldExldmVsRm9yUG9pbnRzKHBvaW50cyk7XHJcbmNvbnNvbGUubG9nKGBXaXRoICR7cG9pbnRzfSBwb2ludHMsIHRoZSBjdXJyZW50IGxldmVsIGlzICR7bGV2ZWx9LmApO1xyXG4qLyJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUEsbUJBQXVFO0FBQ3ZFLElBQUFDLE1BQW9CO0FBQ3BCLElBQUFDLFFBQXNCOzs7QUNGdEIsc0JBQStDO0FBR3hDLElBQU0sa0JBQXNDO0FBQUEsRUFDakQsbUJBQW1CO0FBQUEsRUFDbkIsV0FBVztBQUFBLEVBQ1gsU0FBUztBQUFBLEVBQ1QsZ0JBQWdCO0FBQUEsRUFDaEIsYUFBYTtBQUFBLEVBQ2IsZUFBZTtBQUFBLEVBQ2Ysc0JBQXNCO0FBQUEsRUFDdEIsc0JBQXNCO0FBQUEsRUFDdEIsYUFBYTtBQUFBLEVBQ2Isa0JBQWtCO0FBQUEsRUFDbEIsd0JBQXdCO0FBQUEsRUFDeEIsY0FBYztBQUFBLEVBQ2QsYUFBYTtBQUFBLEVBQ2IsZ0JBQWdCO0FBQUEsRUFDaEIsdUJBQXVCO0FBQUEsRUFDdkIsbUJBQW1CO0FBQUEsRUFDbkIsb0JBQW9CO0FBQ3RCO0FBdUJPLElBQU0sNkJBQU4sY0FBeUMs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QUUsUUFBUSxPQUFTLE9BQU8sSUFBSSxZQUFZLE1BQVE7QUFBQSxFQUNsRCxFQUFFLFFBQVEsT0FBUyxPQUFPLElBQUksWUFBWSxJQUFRO0FBQUEsRUFDbEQsRUFBRSxRQUFRLEtBQVMsT0FBTyxJQUFJLFlBQVksTUFBUTtBQUFBLEVBQ2xELEVBQUUsUUFBUSxPQUFTLE9BQU8sSUFBSSxZQUFZLE1BQVE7QUFBQSxFQUNsRCxFQUFFLFFBQVEsT0FBUyxPQUFPLElBQUksWUFBWSxNQUFRO0FBQUEsRUFDbEQsRUFBRSxRQUFRLE9BQVMsT0FBTyxJQUFJLFlBQVksTUFBUTtBQUFBLEVBQ2xELEVBQUUsUUFBUSxPQUFTLE9BQU8sSUFBSSxZQUFZLE1BQVE7QUFBQSxFQUNsRCxFQUFFLFFBQVEsT0FBUyxPQUFPLElBQUksWUFBWSxLQUFRO0FBQUEsRUFDbEQsRUFBRSxRQUFRLE1BQVMsT0FBTyxJQUFJLFlBQVksTUFBUTtBQUFBLEVBQ2xELEVBQUUsUUFBUSxPQUFTLE9BQU8sSUFBSSxZQUFZLE1BQVE7QUFBQSxFQUNsRCxFQUFFLFFBQVEsT0FBUyxPQUFPLElBQUksWUFBWSxNQUFRO0FBQUEsRUFDbEQsRUFBRSxRQUFRLE9BQVMsT0FBTyxJQUFJLFlBQVksS0FBUTtBQUFBLEVBQ2xELEVBQUUsUUFBUSxNQUFTLE9BQU8sSUFBSSxZQUFZLE1BQVE7QUFBQSxFQUNsRCxFQUFFLFFBQVEsT0FBUyxPQUFPLElBQUksWUFBWSxNQUFRO0FBQUEsRUFDbEQsRUFBRSxRQUFRLE9BQVMsT0FBTyxJQUFJLFlBQVksTUFBUTtBQUFBLEVBQ2xELEVBQUUsUUFBUSxPQUFTLE9BQU8sSUFBSSxZQUFZLE1BQVE7QUFBQSxFQUNsRCxFQUFFLFFBQVEsT0FBUyxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDbkQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksS0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxNQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE1BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsT0FBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE1BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsT0FBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxNQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLE9BQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxNQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLE9BQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksTUFBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxPQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksTUFBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxPQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLEtBQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsTUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE1BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsT0FBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxNQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLE9BQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxLQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLE1BQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksTUFBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxPQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxJQUFJLFlBQVksT0FBUztBQUFBLEVBQ3BELEVBQUUsUUFBUSxRQUFVLE9BQU8sSUFBSSxZQUFZLE9BQVM7QUFBQSxFQUNwRCxFQUFFLFFBQVEsUUFBVSxPQUFPLElBQUksWUFBWSxPQUFTO0FBQUEsRUFDcEQsRUFBRSxRQUFRLFFBQVUsT0FBTyxLQUFLLFlBQVksTUFBUztBQUFBLEVBQ3JELEVBQUUsUUFBUSxPQUFV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ICJwYXRoIiwgImFwcCIsICJvYmoiLCAiZGVmYXVsdE9wdGlvbnMiLCAiZGVmYXVsdE9wdGlvbnMiLCAiZGVmYXVsdE9wdGlvbnMiLCAiTUlMTElTRUNPTkRTX0lOX1dFRUsiLCAiZm9ybWF0dGVycyIsICJsb2NhbGl6ZSIsICJ5IiwgIk0iLCAiZCIsICJhIiwgImgiLCAiSCIsICJtIiwgInMiLCAiUyIsICJkYXRlTG9uZ0Zvcm1hdHRlciIsICJmb3JtYXRMb25nIiwgInRpbWVMb25nRm9ybWF0dGVyIiwgImRhdGVUaW1lTG9uZ0Zvcm1hdHRlciIsICJmb3JtYXQiLCAiZm9ybWF0RGlzdGFuY2UiLCAiZm9ybWF0IiwgImZvcm1hdFJlbGF0aXZlIiwgIm9yZGluYWxOdW1iZXIiLCAidmFsdWVDYWxsYmFjayIsICJkZWZhdWx0T3B0aW9ucyIsICJsb2NhbGUiLCAibWF0Y2giLCAicGF0aCIsICJhcHAiLCAiZmlsZU5hbWUiLCAiY3VycmVudENvdW50IiwgImkiLCAiaSIsICJlIiwgImkiLCAibWF0Y2giLCAiZmlsZSIsICJhcHAiXQp9Cg==
