/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/crypto-js/core.js
var require_core = __commonJS({
  "node_modules/crypto-js/core.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define([], factory);
      } else {
        root.CryptoJS = factory();
      }
    })(exports, function() {
      var CryptoJS2 = CryptoJS2 || function(Math2, undefined2) {
        var crypto;
        if (typeof window !== "undefined" && window.crypto) {
          crypto = window.crypto;
        }
        if (typeof self !== "undefined" && self.crypto) {
          crypto = self.crypto;
        }
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto = globalThis.crypto;
        }
        if (!crypto && typeof window !== "undefined" && window.msCrypto) {
          crypto = window.msCrypto;
        }
        if (!crypto && typeof global !== "undefined" && global.crypto) {
          crypto = global.crypto;
        }
        if (!crypto && typeof require === "function") {
          try {
            crypto = require("crypto");
          } catch (err) {
          }
        }
        var cryptoSecureRandomInt = function() {
          if (crypto) {
            if (typeof crypto.getRandomValues === "function") {
              try {
                return crypto.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {
              }
            }
            if (typeof crypto.randomBytes === "function") {
              try {
                return crypto.randomBytes(4).readInt32LE();
              } catch (err) {
              }
            }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        };
        var create = Object.create || function() {
          function F() {
          }
          return function(obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();
        var C = {};
        var C_lib = C.lib = {};
        var Base = C_lib.Base = function() {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function(overrides) {
              var subtype = create(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function() {
            },
            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },
          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function(encoder) {
            return (encoder || Hex).stringify(this);
          },
          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i2 = 0; i2 < thatSigBytes; i2++) {
                var thatByte = thatWords[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
                thisWords[thisSigBytes + i2 >>> 2] |= thatByte << 24 - (thisSigBytes + i2) % 4 * 8;
              }
            } else {
              for (var j = 0; j < thatSigBytes; j += 4) {
                thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function() {
            var words = this.words;
            var sigBytes = this.sigBytes;
            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words.length = Math2.ceil(sigBytes / 4);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },
          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function(nBytes) {
            var words = [];
            for (var i2 = 0; i2 < nBytes; i2 += 4) {
              words.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words, nBytes);
          }
        });
        var C_enc = C.enc = {};
        var Hex = C_enc.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i2 = 0; i2 < sigBytes; i2++) {
              var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words = [];
            for (var i2 = 0; i2 < hexStrLength; i2 += 2) {
              words[i2 >>> 3] |= parseInt(hexStr.substr(i2, 2), 16) << 24 - i2 % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2++) {
              var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words = [];
            for (var i2 = 0; i2 < latin1StrLength; i2++) {
              words[i2 >>> 2] |= (latin1Str.charCodeAt(i2) & 255) << 24 - i2 % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e2) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function(doFlush) {
            var processedWords;
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           */
          cfg: Base.extend(),
          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash = this._doFinalize();
            return hash;
          },
          blockSize: 512 / 32,
          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function(hasher) {
            return function(message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },
          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function(hasher) {
            return function(message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        var C_algo = C.algo = {};
        return C;
      }(Math);
      return CryptoJS2;
    });
  }
});

// node_modules/crypto-js/x64-core.js
var require_x64_core = __commonJS({
  "node_modules/crypto-js/x64-core.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(undefined2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        var C_x64 = C.x64 = {};
        var X64Word = C_x64.Word = Base.extend({
          /**
           * Initializes a newly created 64-bit word.
           *
           * @param {number} high The high 32 bits.
           * @param {number} low The low 32 bits.
           *
           * @example
           *
           *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
           */
          init: function(high, low) {
            this.high = high;
            this.low = low;
          }
          /**
           * Bitwise NOTs this word.
           *
           * @return {X64Word} A new x64-Word object after negating.
           *
           * @example
           *
           *     var negated = x64Word.not();
           */
          // not: function () {
          // var high = ~this.high;
          // var low = ~this.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ANDs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to AND with this word.
           *
           * @return {X64Word} A new x64-Word object after ANDing.
           *
           * @example
           *
           *     var anded = x64Word.and(anotherX64Word);
           */
          // and: function (word) {
          // var high = this.high & word.high;
          // var low = this.low & word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to OR with this word.
           *
           * @return {X64Word} A new x64-Word object after ORing.
           *
           * @example
           *
           *     var ored = x64Word.or(anotherX64Word);
           */
          // or: function (word) {
          // var high = this.high | word.high;
          // var low = this.low | word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise XORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to XOR with this word.
           *
           * @return {X64Word} A new x64-Word object after XORing.
           *
           * @example
           *
           *     var xored = x64Word.xor(anotherX64Word);
           */
          // xor: function (word) {
          // var high = this.high ^ word.high;
          // var low = this.low ^ word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the left.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftL(25);
           */
          // shiftL: function (n) {
          // if (n < 32) {
          // var high = (this.high << n) | (this.low >>> (32 - n));
          // var low = this.low << n;
          // } else {
          // var high = this.low << (n - 32);
          // var low = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the right.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftR(7);
           */
          // shiftR: function (n) {
          // if (n < 32) {
          // var low = (this.low >>> n) | (this.high << (32 - n));
          // var high = this.high >>> n;
          // } else {
          // var low = this.high >>> (n - 32);
          // var high = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Rotates this word n bits to the left.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotL(25);
           */
          // rotL: function (n) {
          // return this.shiftL(n).or(this.shiftR(64 - n));
          // },
          /**
           * Rotates this word n bits to the right.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotR(7);
           */
          // rotR: function (n) {
          // return this.shiftR(n).or(this.shiftL(64 - n));
          // },
          /**
           * Adds this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to add with this word.
           *
           * @return {X64Word} A new x64-Word object after adding.
           *
           * @example
           *
           *     var added = x64Word.add(anotherX64Word);
           */
          // add: function (word) {
          // var low = (this.low + word.low) | 0;
          // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
          // var high = (this.high + word.high + carry) | 0;
          // return X64Word.create(high, low);
          // }
        });
        var X64WordArray = C_x64.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.x64.WordArray.create();
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ]);
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ], 10);
           */
          init: function(words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 8;
            }
          },
          /**
           * Converts this 64-bit word array to a 32-bit word array.
           *
           * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
           *
           * @example
           *
           *     var x32WordArray = x64WordArray.toX32();
           */
          toX32: function() {
            var x64Words = this.words;
            var x64WordsLength = x64Words.length;
            var x32Words = [];
            for (var i2 = 0; i2 < x64WordsLength; i2++) {
              var x64Word = x64Words[i2];
              x32Words.push(x64Word.high);
              x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {X64WordArray} The clone.
           *
           * @example
           *
           *     var clone = x64WordArray.clone();
           */
          clone: function() {
            var clone = Base.clone.call(this);
            var words = clone.words = this.words.slice(0);
            var wordsLength = words.length;
            for (var i2 = 0; i2 < wordsLength; i2++) {
              words[i2] = words[i2].clone();
            }
            return clone;
          }
        });
      })();
      return CryptoJS2;
    });
  }
});

// node_modules/crypto-js/lib-typedarrays.js
var require_lib_typedarrays = __commonJS({
  "node_modules/crypto-js/lib-typedarrays.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        if (typeof ArrayBuffer != "function") {
          return;
        }
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var superInit = WordArray.init;
        var subInit = WordArray.init = function(typedArray) {
          if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
          }
          if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
          }
          if (typedArray instanceof Uint8Array) {
            var typedArrayByteLength = typedArray.byteLength;
            var words = [];
            for (var i2 = 0; i2 < typedArrayByteLength; i2++) {
              words[i2 >>> 2] |= typedArray[i2] << 24 - i2 % 4 * 8;
            }
            superInit.call(this, words, typedArrayByteLength);
          } else {
            superInit.apply(this, arguments);
          }
        };
        subInit.prototype = WordArray;
      })();
      return CryptoJS2.lib.WordArray;
    });
  }
});

// node_modules/crypto-js/enc-utf16.js
var require_enc_utf16 = __commonJS({
  "node_modules/crypto-js/enc-utf16.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
          /**
           * Converts a word array to a UTF-16 BE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 BE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 2) {
              var codePoint = words[i2 >>> 2] >>> 16 - i2 % 4 * 8 & 65535;
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 BE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 BE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i2 = 0; i2 < utf16StrLength; i2++) {
              words[i2 >>> 1] |= utf16Str.charCodeAt(i2) << 16 - i2 % 2 * 16;
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        C_enc.Utf16LE = {
          /**
           * Converts a word array to a UTF-16 LE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 LE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 2) {
              var codePoint = swapEndian(words[i2 >>> 2] >>> 16 - i2 % 4 * 8 & 65535);
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          /**
           * Converts a UTF-16 LE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 LE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
           */
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words = [];
            for (var i2 = 0; i2 < utf16StrLength; i2++) {
              words[i2 >>> 1] |= swapEndian(utf16Str.charCodeAt(i2) << 16 - i2 % 2 * 16);
            }
            return WordArray.create(words, utf16StrLength * 2);
          }
        };
        function swapEndian(word) {
          return word << 8 & 4278255360 | word >>> 8 & 16711935;
        }
      })();
      return CryptoJS2.enc.Utf16;
    });
  }
});

// node_modules/crypto-js/enc-base64.js
var require_enc_base64 = __commonJS({
  "node_modules/crypto-js/enc-base64.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64 = C_enc.Base64 = {
          /**
           * Converts a word array to a Base64 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Base64 string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
           */
          stringify: function(wordArray) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 3) {
              var byte1 = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              var byte2 = words[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255;
              var byte3 = words[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i2 + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64 string to a word array.
           *
           * @param {string} base64Str The Base64 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
           */
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i2 = 0; i2 < base64StrLength; i2++) {
            if (i2 % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i2 - 1)] << i2 % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i2)] >>> 6 - i2 % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS2.enc.Base64;
    });
  }
});

// node_modules/crypto-js/enc-base64url.js
var require_enc_base64url = __commonJS({
  "node_modules/crypto-js/enc-base64url.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64url = C_enc.Base64url = {
          /**
           * Converts a word array to a Base64url string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {string} The Base64url string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
           */
          stringify: function(wordArray, urlSafe = true) {
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map = urlSafe ? this._safe_map : this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i2 = 0; i2 < sigBytes; i2 += 3) {
              var byte1 = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              var byte2 = words[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255;
              var byte3 = words[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i2 + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          /**
           * Converts a Base64url string to a word array.
           *
           * @param {string} base64Str The Base64url string.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
           */
          parse: function(base64Str, urlSafe = true) {
            var base64StrLength = base64Str.length;
            var map = urlSafe ? this._safe_map : this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map.length; j++) {
                reverseMap[map.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
          _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words = [];
          var nBytes = 0;
          for (var i2 = 0; i2 < base64StrLength; i2++) {
            if (i2 % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i2 - 1)] << i2 % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i2)] >>> 6 - i2 % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words, nBytes);
        }
      })();
      return CryptoJS2.enc.Base64url;
    });
  }
});

// node_modules/crypto-js/md5.js
var require_md5 = __commonJS({
  "node_modules/crypto-js/md5.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var T2 = [];
        (function() {
          for (var i2 = 0; i2 < 64; i2++) {
            T2[i2] = Math2.abs(Math2.sin(i2 + 1)) * 4294967296 | 0;
          }
        })();
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ]);
          },
          _doProcessBlock: function(M3, offset) {
            for (var i2 = 0; i2 < 16; i2++) {
              var offset_i = offset + i2;
              var M_offset_i = M3[offset_i];
              M3[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H3 = this._hash.words;
            var M_offset_0 = M3[offset + 0];
            var M_offset_1 = M3[offset + 1];
            var M_offset_2 = M3[offset + 2];
            var M_offset_3 = M3[offset + 3];
            var M_offset_4 = M3[offset + 4];
            var M_offset_5 = M3[offset + 5];
            var M_offset_6 = M3[offset + 6];
            var M_offset_7 = M3[offset + 7];
            var M_offset_8 = M3[offset + 8];
            var M_offset_9 = M3[offset + 9];
            var M_offset_10 = M3[offset + 10];
            var M_offset_11 = M3[offset + 11];
            var M_offset_12 = M3[offset + 12];
            var M_offset_13 = M3[offset + 13];
            var M_offset_14 = M3[offset + 14];
            var M_offset_15 = M3[offset + 15];
            var a3 = H3[0];
            var b2 = H3[1];
            var c2 = H3[2];
            var d3 = H3[3];
            a3 = FF(a3, b2, c2, d3, M_offset_0, 7, T2[0]);
            d3 = FF(d3, a3, b2, c2, M_offset_1, 12, T2[1]);
            c2 = FF(c2, d3, a3, b2, M_offset_2, 17, T2[2]);
            b2 = FF(b2, c2, d3, a3, M_offset_3, 22, T2[3]);
            a3 = FF(a3, b2, c2, d3, M_offset_4, 7, T2[4]);
            d3 = FF(d3, a3, b2, c2, M_offset_5, 12, T2[5]);
            c2 = FF(c2, d3, a3, b2, M_offset_6, 17, T2[6]);
            b2 = FF(b2, c2, d3, a3, M_offset_7, 22, T2[7]);
            a3 = FF(a3, b2, c2, d3, M_offset_8, 7, T2[8]);
            d3 = FF(d3, a3, b2, c2, M_offset_9, 12, T2[9]);
            c2 = FF(c2, d3, a3, b2, M_offset_10, 17, T2[10]);
            b2 = FF(b2, c2, d3, a3, M_offset_11, 22, T2[11]);
            a3 = FF(a3, b2, c2, d3, M_offset_12, 7, T2[12]);
            d3 = FF(d3, a3, b2, c2, M_offset_13, 12, T2[13]);
            c2 = FF(c2, d3, a3, b2, M_offset_14, 17, T2[14]);
            b2 = FF(b2, c2, d3, a3, M_offset_15, 22, T2[15]);
            a3 = GG(a3, b2, c2, d3, M_offset_1, 5, T2[16]);
            d3 = GG(d3, a3, b2, c2, M_offset_6, 9, T2[17]);
            c2 = GG(c2, d3, a3, b2, M_offset_11, 14, T2[18]);
            b2 = GG(b2, c2, d3, a3, M_offset_0, 20, T2[19]);
            a3 = GG(a3, b2, c2, d3, M_offset_5, 5, T2[20]);
            d3 = GG(d3, a3, b2, c2, M_offset_10, 9, T2[21]);
            c2 = GG(c2, d3, a3, b2, M_offset_15, 14, T2[22]);
            b2 = GG(b2, c2, d3, a3, M_offset_4, 20, T2[23]);
            a3 = GG(a3, b2, c2, d3, M_offset_9, 5, T2[24]);
            d3 = GG(d3, a3, b2, c2, M_offset_14, 9, T2[25]);
            c2 = GG(c2, d3, a3, b2, M_offset_3, 14, T2[26]);
            b2 = GG(b2, c2, d3, a3, M_offset_8, 20, T2[27]);
            a3 = GG(a3, b2, c2, d3, M_offset_13, 5, T2[28]);
            d3 = GG(d3, a3, b2, c2, M_offset_2, 9, T2[29]);
            c2 = GG(c2, d3, a3, b2, M_offset_7, 14, T2[30]);
            b2 = GG(b2, c2, d3, a3, M_offset_12, 20, T2[31]);
            a3 = HH(a3, b2, c2, d3, M_offset_5, 4, T2[32]);
            d3 = HH(d3, a3, b2, c2, M_offset_8, 11, T2[33]);
            c2 = HH(c2, d3, a3, b2, M_offset_11, 16, T2[34]);
            b2 = HH(b2, c2, d3, a3, M_offset_14, 23, T2[35]);
            a3 = HH(a3, b2, c2, d3, M_offset_1, 4, T2[36]);
            d3 = HH(d3, a3, b2, c2, M_offset_4, 11, T2[37]);
            c2 = HH(c2, d3, a3, b2, M_offset_7, 16, T2[38]);
            b2 = HH(b2, c2, d3, a3, M_offset_10, 23, T2[39]);
            a3 = HH(a3, b2, c2, d3, M_offset_13, 4, T2[40]);
            d3 = HH(d3, a3, b2, c2, M_offset_0, 11, T2[41]);
            c2 = HH(c2, d3, a3, b2, M_offset_3, 16, T2[42]);
            b2 = HH(b2, c2, d3, a3, M_offset_6, 23, T2[43]);
            a3 = HH(a3, b2, c2, d3, M_offset_9, 4, T2[44]);
            d3 = HH(d3, a3, b2, c2, M_offset_12, 11, T2[45]);
            c2 = HH(c2, d3, a3, b2, M_offset_15, 16, T2[46]);
            b2 = HH(b2, c2, d3, a3, M_offset_2, 23, T2[47]);
            a3 = II(a3, b2, c2, d3, M_offset_0, 6, T2[48]);
            d3 = II(d3, a3, b2, c2, M_offset_7, 10, T2[49]);
            c2 = II(c2, d3, a3, b2, M_offset_14, 15, T2[50]);
            b2 = II(b2, c2, d3, a3, M_offset_5, 21, T2[51]);
            a3 = II(a3, b2, c2, d3, M_offset_12, 6, T2[52]);
            d3 = II(d3, a3, b2, c2, M_offset_3, 10, T2[53]);
            c2 = II(c2, d3, a3, b2, M_offset_10, 15, T2[54]);
            b2 = II(b2, c2, d3, a3, M_offset_1, 21, T2[55]);
            a3 = II(a3, b2, c2, d3, M_offset_8, 6, T2[56]);
            d3 = II(d3, a3, b2, c2, M_offset_15, 10, T2[57]);
            c2 = II(c2, d3, a3, b2, M_offset_6, 15, T2[58]);
            b2 = II(b2, c2, d3, a3, M_offset_13, 21, T2[59]);
            a3 = II(a3, b2, c2, d3, M_offset_4, 6, T2[60]);
            d3 = II(d3, a3, b2, c2, M_offset_11, 10, T2[61]);
            c2 = II(c2, d3, a3, b2, M_offset_2, 15, T2[62]);
            b2 = II(b2, c2, d3, a3, M_offset_9, 21, T2[63]);
            H3[0] = H3[0] + a3 | 0;
            H3[1] = H3[1] + b2 | 0;
            H3[2] = H3[2] + c2 | 0;
            H3[3] = H3[3] + d3 | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H3 = hash.words;
            for (var i2 = 0; i2 < 4; i2++) {
              var H_i = H3[i2];
              H3[i2] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function FF(a3, b2, c2, d3, x2, s3, t2) {
          var n = a3 + (b2 & c2 | ~b2 & d3) + x2 + t2;
          return (n << s3 | n >>> 32 - s3) + b2;
        }
        function GG(a3, b2, c2, d3, x2, s3, t2) {
          var n = a3 + (b2 & d3 | c2 & ~d3) + x2 + t2;
          return (n << s3 | n >>> 32 - s3) + b2;
        }
        function HH(a3, b2, c2, d3, x2, s3, t2) {
          var n = a3 + (b2 ^ c2 ^ d3) + x2 + t2;
          return (n << s3 | n >>> 32 - s3) + b2;
        }
        function II(a3, b2, c2, d3, x2, s3, t2) {
          var n = a3 + (c2 ^ (b2 | ~d3)) + x2 + t2;
          return (n << s3 | n >>> 32 - s3) + b2;
        }
        C.MD5 = Hasher._createHelper(MD5);
        C.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS2.MD5;
    });
  }
});

// node_modules/crypto-js/sha1.js
var require_sha1 = __commonJS({
  "node_modules/crypto-js/sha1.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var W = [];
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(M3, offset) {
            var H3 = this._hash.words;
            var a3 = H3[0];
            var b2 = H3[1];
            var c2 = H3[2];
            var d3 = H3[3];
            var e2 = H3[4];
            for (var i2 = 0; i2 < 80; i2++) {
              if (i2 < 16) {
                W[i2] = M3[offset + i2] | 0;
              } else {
                var n = W[i2 - 3] ^ W[i2 - 8] ^ W[i2 - 14] ^ W[i2 - 16];
                W[i2] = n << 1 | n >>> 31;
              }
              var t2 = (a3 << 5 | a3 >>> 27) + e2 + W[i2];
              if (i2 < 20) {
                t2 += (b2 & c2 | ~b2 & d3) + 1518500249;
              } else if (i2 < 40) {
                t2 += (b2 ^ c2 ^ d3) + 1859775393;
              } else if (i2 < 60) {
                t2 += (b2 & c2 | b2 & d3 | c2 & d3) - 1894007588;
              } else {
                t2 += (b2 ^ c2 ^ d3) - 899497514;
              }
              e2 = d3;
              d3 = c2;
              c2 = b2 << 30 | b2 >>> 2;
              b2 = a3;
              a3 = t2;
            }
            H3[0] = H3[0] + a3 | 0;
            H3[1] = H3[1] + b2 | 0;
            H3[2] = H3[2] + c2 | 0;
            H3[3] = H3[3] + d3 | 0;
            H3[4] = H3[4] + e2 | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA1 = Hasher._createHelper(SHA1);
        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS2.SHA1;
    });
  }
});

// node_modules/crypto-js/sha256.js
var require_sha256 = __commonJS({
  "node_modules/crypto-js/sha256.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var H3 = [];
        var K2 = [];
        (function() {
          function isPrime(n2) {
            var sqrtN = Math2.sqrt(n2);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n2 % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n2) {
            return (n2 - (n2 | 0)) * 4294967296 | 0;
          }
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H3[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
              }
              K2[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();
        var W = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H3.slice(0));
          },
          _doProcessBlock: function(M3, offset) {
            var H4 = this._hash.words;
            var a3 = H4[0];
            var b2 = H4[1];
            var c2 = H4[2];
            var d3 = H4[3];
            var e2 = H4[4];
            var f = H4[5];
            var g = H4[6];
            var h3 = H4[7];
            for (var i2 = 0; i2 < 64; i2++) {
              if (i2 < 16) {
                W[i2] = M3[offset + i2] | 0;
              } else {
                var gamma0x = W[i2 - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W[i2 - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i2] = gamma0 + W[i2 - 7] + gamma1 + W[i2 - 16];
              }
              var ch = e2 & f ^ ~e2 & g;
              var maj = a3 & b2 ^ a3 & c2 ^ b2 & c2;
              var sigma0 = (a3 << 30 | a3 >>> 2) ^ (a3 << 19 | a3 >>> 13) ^ (a3 << 10 | a3 >>> 22);
              var sigma1 = (e2 << 26 | e2 >>> 6) ^ (e2 << 21 | e2 >>> 11) ^ (e2 << 7 | e2 >>> 25);
              var t1 = h3 + sigma1 + ch + K2[i2] + W[i2];
              var t2 = sigma0 + maj;
              h3 = g;
              g = f;
              f = e2;
              e2 = d3 + t1 | 0;
              d3 = c2;
              c2 = b2;
              b2 = a3;
              a3 = t1 + t2 | 0;
            }
            H4[0] = H4[0] + a3 | 0;
            H4[1] = H4[1] + b2 | 0;
            H4[2] = H4[2] + c2 | 0;
            H4[3] = H4[3] + d3 | 0;
            H4[4] = H4[4] + e2 | 0;
            H4[5] = H4[5] + f | 0;
            H4[6] = H4[6] + g | 0;
            H4[7] = H4[7] + h3 | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        C.SHA256 = Hasher._createHelper(SHA256);
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS2.SHA256;
    });
  }
});

// node_modules/crypto-js/sha224.js
var require_sha224 = __commonJS({
  "node_modules/crypto-js/sha224.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_sha256());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var SHA224 = C_algo.SHA224 = SHA256.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              3238371032,
              914150663,
              812702999,
              4144912697,
              4290775857,
              1750603025,
              1694076839,
              3204075428
            ]);
          },
          _doFinalize: function() {
            var hash = SHA256._doFinalize.call(this);
            hash.sigBytes -= 4;
            return hash;
          }
        });
        C.SHA224 = SHA256._createHelper(SHA224);
        C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
      })();
      return CryptoJS2.SHA224;
    });
  }
});

// node_modules/crypto-js/sha512.js
var require_sha512 = __commonJS({
  "node_modules/crypto-js/sha512.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        function X64Word_create() {
          return X64Word.create.apply(X64Word, arguments);
        }
        var K2 = [
          X64Word_create(1116352408, 3609767458),
          X64Word_create(1899447441, 602891725),
          X64Word_create(3049323471, 3964484399),
          X64Word_create(3921009573, 2173295548),
          X64Word_create(961987163, 4081628472),
          X64Word_create(1508970993, 3053834265),
          X64Word_create(2453635748, 2937671579),
          X64Word_create(2870763221, 3664609560),
          X64Word_create(3624381080, 2734883394),
          X64Word_create(310598401, 1164996542),
          X64Word_create(607225278, 1323610764),
          X64Word_create(1426881987, 3590304994),
          X64Word_create(1925078388, 4068182383),
          X64Word_create(2162078206, 991336113),
          X64Word_create(2614888103, 633803317),
          X64Word_create(3248222580, 3479774868),
          X64Word_create(3835390401, 2666613458),
          X64Word_create(4022224774, 944711139),
          X64Word_create(264347078, 2341262773),
          X64Word_create(604807628, 2007800933),
          X64Word_create(770255983, 1495990901),
          X64Word_create(1249150122, 1856431235),
          X64Word_create(1555081692, 3175218132),
          X64Word_create(1996064986, 2198950837),
          X64Word_create(2554220882, 3999719339),
          X64Word_create(2821834349, 766784016),
          X64Word_create(2952996808, 2566594879),
          X64Word_create(3210313671, 3203337956),
          X64Word_create(3336571891, 1034457026),
          X64Word_create(3584528711, 2466948901),
          X64Word_create(113926993, 3758326383),
          X64Word_create(338241895, 168717936),
          X64Word_create(666307205, 1188179964),
          X64Word_create(773529912, 1546045734),
          X64Word_create(1294757372, 1522805485),
          X64Word_create(1396182291, 2643833823),
          X64Word_create(1695183700, 2343527390),
          X64Word_create(1986661051, 1014477480),
          X64Word_create(2177026350, 1206759142),
          X64Word_create(2456956037, 344077627),
          X64Word_create(2730485921, 1290863460),
          X64Word_create(2820302411, 3158454273),
          X64Word_create(3259730800, 3505952657),
          X64Word_create(3345764771, 106217008),
          X64Word_create(3516065817, 3606008344),
          X64Word_create(3600352804, 1432725776),
          X64Word_create(4094571909, 1467031594),
          X64Word_create(275423344, 851169720),
          X64Word_create(430227734, 3100823752),
          X64Word_create(506948616, 1363258195),
          X64Word_create(659060556, 3750685593),
          X64Word_create(883997877, 3785050280),
          X64Word_create(958139571, 3318307427),
          X64Word_create(1322822218, 3812723403),
          X64Word_create(1537002063, 2003034995),
          X64Word_create(1747873779, 3602036899),
          X64Word_create(1955562222, 1575990012),
          X64Word_create(2024104815, 1125592928),
          X64Word_create(2227730452, 2716904306),
          X64Word_create(2361852424, 442776044),
          X64Word_create(2428436474, 593698344),
          X64Word_create(2756734187, 3733110249),
          X64Word_create(3204031479, 2999351573),
          X64Word_create(3329325298, 3815920427),
          X64Word_create(3391569614, 3928383900),
          X64Word_create(3515267271, 566280711),
          X64Word_create(3940187606, 3454069534),
          X64Word_create(4118630271, 4000239992),
          X64Word_create(116418474, 1914138554),
          X64Word_create(174292421, 2731055270),
          X64Word_create(289380356, 3203993006),
          X64Word_create(460393269, 320620315),
          X64Word_create(685471733, 587496836),
          X64Word_create(852142971, 1086792851),
          X64Word_create(1017036298, 365543100),
          X64Word_create(1126000580, 2618297676),
          X64Word_create(1288033470, 3409855158),
          X64Word_create(1501505948, 4234509866),
          X64Word_create(1607167915, 987167468),
          X64Word_create(1816402316, 1246189591)
        ];
        var W = [];
        (function() {
          for (var i2 = 0; i2 < 80; i2++) {
            W[i2] = X64Word_create();
          }
        })();
        var SHA512 = C_algo.SHA512 = Hasher.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(1779033703, 4089235720),
              new X64Word.init(3144134277, 2227873595),
              new X64Word.init(1013904242, 4271175723),
              new X64Word.init(2773480762, 1595750129),
              new X64Word.init(1359893119, 2917565137),
              new X64Word.init(2600822924, 725511199),
              new X64Word.init(528734635, 4215389547),
              new X64Word.init(1541459225, 327033209)
            ]);
          },
          _doProcessBlock: function(M3, offset) {
            var H3 = this._hash.words;
            var H0 = H3[0];
            var H1 = H3[1];
            var H22 = H3[2];
            var H32 = H3[3];
            var H4 = H3[4];
            var H5 = H3[5];
            var H6 = H3[6];
            var H7 = H3[7];
            var H0h = H0.high;
            var H0l = H0.low;
            var H1h = H1.high;
            var H1l = H1.low;
            var H2h = H22.high;
            var H2l = H22.low;
            var H3h = H32.high;
            var H3l = H32.low;
            var H4h = H4.high;
            var H4l = H4.low;
            var H5h = H5.high;
            var H5l = H5.low;
            var H6h = H6.high;
            var H6l = H6.low;
            var H7h = H7.high;
            var H7l = H7.low;
            var ah = H0h;
            var al = H0l;
            var bh = H1h;
            var bl = H1l;
            var ch = H2h;
            var cl = H2l;
            var dh = H3h;
            var dl = H3l;
            var eh = H4h;
            var el = H4l;
            var fh = H5h;
            var fl = H5l;
            var gh = H6h;
            var gl = H6l;
            var hh = H7h;
            var hl = H7l;
            for (var i2 = 0; i2 < 80; i2++) {
              var Wil;
              var Wih;
              var Wi = W[i2];
              if (i2 < 16) {
                Wih = Wi.high = M3[offset + i2 * 2] | 0;
                Wil = Wi.low = M3[offset + i2 * 2 + 1] | 0;
              } else {
                var gamma0x = W[i2 - 15];
                var gamma0xh = gamma0x.high;
                var gamma0xl = gamma0x.low;
                var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                var gamma1x = W[i2 - 2];
                var gamma1xh = gamma1x.high;
                var gamma1xl = gamma1x.low;
                var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                var Wi7 = W[i2 - 7];
                var Wi7h = Wi7.high;
                var Wi7l = Wi7.low;
                var Wi16 = W[i2 - 16];
                var Wi16h = Wi16.high;
                var Wi16l = Wi16.low;
                Wil = gamma0l + Wi7l;
                Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                Wil = Wil + gamma1l;
                Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                Wil = Wil + Wi16l;
                Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                Wi.high = Wih;
                Wi.low = Wil;
              }
              var chh = eh & fh ^ ~eh & gh;
              var chl = el & fl ^ ~el & gl;
              var majh = ah & bh ^ ah & ch ^ bh & ch;
              var majl = al & bl ^ al & cl ^ bl & cl;
              var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
              var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
              var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
              var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
              var Ki = K2[i2];
              var Kih = Ki.high;
              var Kil = Ki.low;
              var t1l = hl + sigma1l;
              var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
              var t1l = t1l + chl;
              var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
              var t1l = t1l + Kil;
              var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
              var t1l = t1l + Wil;
              var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
              var t2l = sigma0l + majl;
              var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              el = dl + t1l | 0;
              eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = t1l + t2l | 0;
              ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
            }
            H0l = H0.low = H0l + al;
            H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
            H1l = H1.low = H1l + bl;
            H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
            H2l = H22.low = H2l + cl;
            H22.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
            H3l = H32.low = H3l + dl;
            H32.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
            H4l = H4.low = H4l + el;
            H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
            H5l = H5.low = H5l + fl;
            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
            H6l = H6.low = H6l + gl;
            H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
            H7l = H7.low = H7l + hl;
            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var hash = this._hash.toX32();
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          },
          blockSize: 1024 / 32
        });
        C.SHA512 = Hasher._createHelper(SHA512);
        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
      })();
      return CryptoJS2.SHA512;
    });
  }
});

// node_modules/crypto-js/sha384.js
var require_sha384 = __commonJS({
  "node_modules/crypto-js/sha384.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_x64_core(), require_sha512());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./sha512"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var SHA512 = C_algo.SHA512;
        var SHA384 = C_algo.SHA384 = SHA512.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(3418070365, 3238371032),
              new X64Word.init(1654270250, 914150663),
              new X64Word.init(2438529370, 812702999),
              new X64Word.init(355462360, 4144912697),
              new X64Word.init(1731405415, 4290775857),
              new X64Word.init(2394180231, 1750603025),
              new X64Word.init(3675008525, 1694076839),
              new X64Word.init(1203062813, 3204075428)
            ]);
          },
          _doFinalize: function() {
            var hash = SHA512._doFinalize.call(this);
            hash.sigBytes -= 16;
            return hash;
          }
        });
        C.SHA384 = SHA512._createHelper(SHA384);
        C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
      })();
      return CryptoJS2.SHA384;
    });
  }
});

// node_modules/crypto-js/sha3.js
var require_sha3 = __commonJS({
  "node_modules/crypto-js/sha3.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        (function() {
          var x2 = 1, y3 = 0;
          for (var t2 = 0; t2 < 24; t2++) {
            RHO_OFFSETS[x2 + 5 * y3] = (t2 + 1) * (t2 + 2) / 2 % 64;
            var newX = y3 % 5;
            var newY = (2 * x2 + 3 * y3) % 5;
            x2 = newX;
            y3 = newY;
          }
          for (var x2 = 0; x2 < 5; x2++) {
            for (var y3 = 0; y3 < 5; y3++) {
              PI_INDEXES[x2 + 5 * y3] = y3 + (2 * x2 + 3 * y3) % 5 * 5;
            }
          }
          var LFSR = 1;
          for (var i2 = 0; i2 < 24; i2++) {
            var roundConstantMsw = 0;
            var roundConstantLsw = 0;
            for (var j = 0; j < 7; j++) {
              if (LFSR & 1) {
                var bitPosition = (1 << j) - 1;
                if (bitPosition < 32) {
                  roundConstantLsw ^= 1 << bitPosition;
                } else {
                  roundConstantMsw ^= 1 << bitPosition - 32;
                }
              }
              if (LFSR & 128) {
                LFSR = LFSR << 1 ^ 113;
              } else {
                LFSR <<= 1;
              }
            }
            ROUND_CONSTANTS[i2] = X64Word.create(roundConstantMsw, roundConstantLsw);
          }
        })();
        var T2 = [];
        (function() {
          for (var i2 = 0; i2 < 25; i2++) {
            T2[i2] = X64Word.create();
          }
        })();
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          /**
           * Configuration options.
           *
           * @property {number} outputLength
           *   The desired number of bits in the output hash.
           *   Only values permitted are: 224, 256, 384, 512.
           *   Default: 512
           */
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function() {
            var state = this._state = [];
            for (var i2 = 0; i2 < 25; i2++) {
              state[i2] = new X64Word.init();
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function(M3, offset) {
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;
            for (var i2 = 0; i2 < nBlockSizeLanes; i2++) {
              var M2i = M3[offset + 2 * i2];
              var M2i1 = M3[offset + 2 * i2 + 1];
              M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
              M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
              var lane = state[i2];
              lane.high ^= M2i1;
              lane.low ^= M2i;
            }
            for (var round = 0; round < 24; round++) {
              for (var x2 = 0; x2 < 5; x2++) {
                var tMsw = 0, tLsw = 0;
                for (var y3 = 0; y3 < 5; y3++) {
                  var lane = state[x2 + 5 * y3];
                  tMsw ^= lane.high;
                  tLsw ^= lane.low;
                }
                var Tx = T2[x2];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              for (var x2 = 0; x2 < 5; x2++) {
                var Tx4 = T2[(x2 + 4) % 5];
                var Tx1 = T2[(x2 + 1) % 5];
                var Tx1Msw = Tx1.high;
                var Tx1Lsw = Tx1.low;
                var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                for (var y3 = 0; y3 < 5; y3++) {
                  var lane = state[x2 + 5 * y3];
                  lane.high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }
              for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                var tMsw;
                var tLsw;
                var lane = state[laneIndex];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];
                if (rhoOffset < 32) {
                  tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else {
                  tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                  tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                }
                var TPiLane = T2[PI_INDEXES[laneIndex]];
                TPiLane.high = tMsw;
                TPiLane.low = tLsw;
              }
              var T0 = T2[0];
              var state0 = state[0];
              T0.high = state0.high;
              T0.low = state0.low;
              for (var x2 = 0; x2 < 5; x2++) {
                for (var y3 = 0; y3 < 5; y3++) {
                  var laneIndex = x2 + 5 * y3;
                  var lane = state[laneIndex];
                  var TLane = T2[laneIndex];
                  var Tx1Lane = T2[(x2 + 1) % 5 + 5 * y3];
                  var Tx2Lane = T2[(x2 + 2) % 5 + 5 * y3];
                  lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                  lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                }
              }
              var lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
            }
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            var blockSizeBits = this.blockSize * 32;
            dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
            dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;
            var hashWords = [];
            for (var i2 = 0; i2 < outputLengthLanes; i2++) {
              var lane = state[i2];
              var laneMsw = lane.high;
              var laneLsw = lane.low;
              laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
              laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
              hashWords.push(laneLsw);
              hashWords.push(laneMsw);
            }
            return new WordArray.init(hashWords, outputLengthBytes);
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            var state = clone._state = this._state.slice(0);
            for (var i2 = 0; i2 < 25; i2++) {
              state[i2] = state[i2].clone();
            }
            return clone;
          }
        });
        C.SHA3 = Hasher._createHelper(SHA3);
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      })(Math);
      return CryptoJS2.SHA3;
    });
  }
});

// node_modules/crypto-js/ripemd160.js
var require_ripemd160 = __commonJS({
  "node_modules/crypto-js/ripemd160.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var _zl = WordArray.create([
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ]);
        var _zr = WordArray.create([
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ]);
        var _sl = WordArray.create([
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ]);
        var _sr = WordArray.create([
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ]);
        var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
        var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
          _doReset: function() {
            this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function(M3, offset) {
            for (var i2 = 0; i2 < 16; i2++) {
              var offset_i = offset + i2;
              var M_offset_i = M3[offset_i];
              M3[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H3 = this._hash.words;
            var hl = _hl.words;
            var hr = _hr.words;
            var zl = _zl.words;
            var zr = _zr.words;
            var sl = _sl.words;
            var sr = _sr.words;
            var al, bl, cl, dl, el;
            var ar, br, cr, dr, er;
            ar = al = H3[0];
            br = bl = H3[1];
            cr = cl = H3[2];
            dr = dl = H3[3];
            er = el = H3[4];
            var t2;
            for (var i2 = 0; i2 < 80; i2 += 1) {
              t2 = al + M3[offset + zl[i2]] | 0;
              if (i2 < 16) {
                t2 += f1(bl, cl, dl) + hl[0];
              } else if (i2 < 32) {
                t2 += f2(bl, cl, dl) + hl[1];
              } else if (i2 < 48) {
                t2 += f3(bl, cl, dl) + hl[2];
              } else if (i2 < 64) {
                t2 += f4(bl, cl, dl) + hl[3];
              } else {
                t2 += f5(bl, cl, dl) + hl[4];
              }
              t2 = t2 | 0;
              t2 = rotl(t2, sl[i2]);
              t2 = t2 + el | 0;
              al = el;
              el = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = t2;
              t2 = ar + M3[offset + zr[i2]] | 0;
              if (i2 < 16) {
                t2 += f5(br, cr, dr) + hr[0];
              } else if (i2 < 32) {
                t2 += f4(br, cr, dr) + hr[1];
              } else if (i2 < 48) {
                t2 += f3(br, cr, dr) + hr[2];
              } else if (i2 < 64) {
                t2 += f2(br, cr, dr) + hr[3];
              } else {
                t2 += f1(br, cr, dr) + hr[4];
              }
              t2 = t2 | 0;
              t2 = rotl(t2, sr[i2]);
              t2 = t2 + er | 0;
              ar = er;
              er = dr;
              dr = rotl(cr, 10);
              cr = br;
              br = t2;
            }
            t2 = H3[1] + cl + dr | 0;
            H3[1] = H3[2] + dl + er | 0;
            H3[2] = H3[3] + el + ar | 0;
            H3[3] = H3[4] + al + br | 0;
            H3[4] = H3[0] + bl + cr | 0;
            H3[0] = t2;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash = this._hash;
            var H3 = hash.words;
            for (var i2 = 0; i2 < 5; i2++) {
              var H_i = H3[i2];
              H3[i2] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash;
          },
          clone: function() {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone;
          }
        });
        function f1(x2, y3, z2) {
          return x2 ^ y3 ^ z2;
        }
        function f2(x2, y3, z2) {
          return x2 & y3 | ~x2 & z2;
        }
        function f3(x2, y3, z2) {
          return (x2 | ~y3) ^ z2;
        }
        function f4(x2, y3, z2) {
          return x2 & z2 | y3 & ~z2;
        }
        function f5(x2, y3, z2) {
          return x2 ^ (y3 | ~z2);
        }
        function rotl(x2, n) {
          return x2 << n | x2 >>> 32 - n;
        }
        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
      })(Math);
      return CryptoJS2.RIPEMD160;
    });
  }
});

// node_modules/crypto-js/hmac.js
var require_hmac = __commonJS({
  "node_modules/crypto-js/hmac.js"(exports, module2) {
    (function(root, factory) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        var HMAC = C_algo.HMAC = Base.extend({
          /**
           * Initializes a newly created HMAC.
           *
           * @param {Hasher} hasher The hash algorithm to use.
           * @param {WordArray|string} key The secret key.
           *
           * @example
           *
           *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
           */
          init: function(hasher, key) {
            hasher = this._hasher = new hasher.init();
            if (typeof key == "string") {
              key = Utf8.parse(key);
            }
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;
            if (key.sigBytes > hasherBlockSizeBytes) {
              key = hasher.finalize(key);
            }
            key.clamp();
            var oKey = this._oKey = key.clone();
            var iKey = this._iKey = key.clone();
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;
            for (var i2 = 0; i2 < hasherBlockSize; i2++) {
              oKeyWords[i2] ^= 1549556828;
              iKeyWords[i2] ^= 909522486;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
            this.reset();
          },
          /**
           * Resets this HMAC to its initial state.
           *
           * @example
           *
           *     hmacHasher.reset();
           */
          reset: function() {
            var hasher = this._hasher;
            hasher.reset();
            hasher.update(this._iKey);
          },
          /**
           * Updates this HMAC with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {HMAC} This HMAC instance.
           *
           * @example
           *
           *     hmacHasher.update('message');
           *     hmacHasher.update(wordArray);
           */
          update: function(messageUpdate) {
            this._hasher.update(messageUpdate);
            return this;
          },
          /**
           * Finalizes the HMAC computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The HMAC.
           *
           * @example
           *
           *     var hmac = hmacHasher.finalize();
           *     var hmac = hmacHasher.finalize('message');
           *     var hmac = hmacHasher.finalize(wordArray);
           */
          finalize: function(messageUpdate) {
            var hasher = this._hasher;
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac;
          }
        });
      })();
    });
  }
});

// node_modules/crypto-js/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "node_modules/crypto-js/pbkdf2.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_sha1(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA1 = C_algo.SHA1;
        var HMAC = C_algo.HMAC;
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hasher to use. Default: SHA1
           * @property {number} iterations The number of iterations to perform. Default: 1
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: SHA1,
            iterations: 1
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.PBKDF2.create();
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Computes the Password-Based Key Derivation Function 2.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var cfg = this.cfg;
            var hmac = HMAC.create(cfg.hasher, password);
            var derivedKey = WordArray.create();
            var blockIndex = WordArray.create([1]);
            var derivedKeyWords = derivedKey.words;
            var blockIndexWords = blockIndex.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              var block = hmac.update(salt).finalize(blockIndex);
              hmac.reset();
              var blockWords = block.words;
              var blockWordsLength = blockWords.length;
              var intermediate = block;
              for (var i2 = 1; i2 < iterations; i2++) {
                intermediate = hmac.finalize(intermediate);
                hmac.reset();
                var intermediateWords = intermediate.words;
                for (var j = 0; j < blockWordsLength; j++) {
                  blockWords[j] ^= intermediateWords[j];
                }
              }
              derivedKey.concat(block);
              blockIndexWords[0]++;
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.PBKDF2 = function(password, salt, cfg) {
          return PBKDF2.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS2.PBKDF2;
    });
  }
});

// node_modules/crypto-js/evpkdf.js
var require_evpkdf = __commonJS({
  "node_modules/crypto-js/evpkdf.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_sha1(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hash algorithm to use. Default: MD5
           * @property {number} iterations The number of iterations to perform. Default: 1
           */
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.EvpKDF.create();
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
           */
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          /**
           * Derives a key from a password.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(password, salt) {
            var block;
            var cfg = this.cfg;
            var hasher = cfg.hasher.create();
            var derivedKey = WordArray.create();
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              if (block) {
                hasher.update(block);
              }
              block = hasher.update(password).finalize(salt);
              hasher.reset();
              for (var i2 = 1; i2 < iterations; i2++) {
                block = hasher.finalize(block);
                hasher.reset();
              }
              derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.EvpKDF = function(password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS2.EvpKDF;
    });
  }
});

// node_modules/crypto-js/cipher-core.js
var require_cipher_core = __commonJS({
  "node_modules/crypto-js/cipher-core.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_evpkdf());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./evpkdf"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.lib.Cipher || function(undefined2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           *
           * @property {WordArray} iv The IV to use for this operation.
           */
          cfg: Base.extend(),
          /**
           * Creates this cipher in encryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
           */
          createEncryptor: function(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },
          /**
           * Creates this cipher in decryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
           */
          createDecryptor: function(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },
          /**
           * Initializes a newly created cipher.
           *
           * @param {number} xformMode Either the encryption or decryption transormation mode constant.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
           */
          init: function(xformMode, key, cfg) {
            this.cfg = this.cfg.extend(cfg);
            this._xformMode = xformMode;
            this._key = key;
            this.reset();
          },
          /**
           * Resets this cipher to its initial state.
           *
           * @example
           *
           *     cipher.reset();
           */
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          /**
           * Adds data to be encrypted or decrypted.
           *
           * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
           *
           * @return {WordArray} The data after processing.
           *
           * @example
           *
           *     var encrypted = cipher.process('data');
           *     var encrypted = cipher.process(wordArray);
           */
          process: function(dataUpdate) {
            this._append(dataUpdate);
            return this._process();
          },
          /**
           * Finalizes the encryption or decryption process.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
           *
           * @return {WordArray} The data after final processing.
           *
           * @example
           *
           *     var encrypted = cipher.finalize();
           *     var encrypted = cipher.finalize('data');
           *     var encrypted = cipher.finalize(wordArray);
           */
          finalize: function(dataUpdate) {
            if (dataUpdate) {
              this._append(dataUpdate);
            }
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          /**
           * Creates shortcut functions to a cipher's object interface.
           *
           * @param {Cipher} cipher The cipher to create a helper for.
           *
           * @return {Object} An object with encrypt and decrypt shortcut functions.
           *
           * @static
           *
           * @example
           *
           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
           */
          _createHelper: function() {
            function selectCipherStrategy(key) {
              if (typeof key == "string") {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            return function(cipher) {
              return {
                encrypt: function(message, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                },
                decrypt: function(ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });
        var StreamCipher = C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function() {
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        var C_mode = C.mode = {};
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          /**
           * Creates this mode for encryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
           */
          createEncryptor: function(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          /**
           * Creates this mode for decryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
           */
          createDecryptor: function(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          /**
           * Initializes a newly created mode.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
           */
          init: function(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        var CBC = C_mode.CBC = function() {
          var CBC2 = BlockCipherMode.extend();
          CBC2.Encryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              xorBlock.call(this, words, offset, blockSize);
              cipher.encryptBlock(words, offset);
              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });
          CBC2.Decryptor = CBC2.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words.slice(offset, offset + blockSize);
              cipher.decryptBlock(words, offset);
              xorBlock.call(this, words, offset, blockSize);
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words, offset, blockSize) {
            var block;
            var iv = this._iv;
            if (iv) {
              block = iv;
              this._iv = undefined2;
            } else {
              block = this._prevBlock;
            }
            for (var i2 = 0; i2 < blockSize; i2++) {
              words[offset + i2] ^= block[i2];
            }
          }
          return CBC2;
        }();
        var C_pad = C.pad = {};
        var Pkcs7 = C_pad.Pkcs7 = {
          /**
           * Pads data using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to pad.
           * @param {number} blockSize The multiple that the data should be padded to.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
           */
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
            var paddingWords = [];
            for (var i2 = 0; i2 < nPaddingBytes; i2 += 4) {
              paddingWords.push(paddingWord);
            }
            var padding = WordArray.create(paddingWords, nPaddingBytes);
            data.concat(padding);
          },
          /**
           * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to unpad.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.unpad(wordArray);
           */
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        var BlockCipher = C_lib.BlockCipher = Cipher.extend({
          /**
           * Configuration options.
           *
           * @property {Mode} mode The block mode to use. Default: CBC
           * @property {Padding} padding The padding strategy to use. Default: Pkcs7
           */
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function() {
            var modeCreator;
            Cipher.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else {
              modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function(words, offset) {
            this._mode.processBlock(words, offset);
          },
          _doFinalize: function() {
            var finalProcessedBlocks;
            var padding = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding.pad(this._data, this.blockSize);
              finalProcessedBlocks = this._process(true);
            } else {
              finalProcessedBlocks = this._process(true);
              padding.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        var CipherParams = C_lib.CipherParams = Base.extend({
          /**
           * Initializes a newly created cipher params object.
           *
           * @param {Object} cipherParams An object with any of the possible cipher parameters.
           *
           * @example
           *
           *     var cipherParams = CryptoJS.lib.CipherParams.create({
           *         ciphertext: ciphertextWordArray,
           *         key: keyWordArray,
           *         iv: ivWordArray,
           *         salt: saltWordArray,
           *         algorithm: CryptoJS.algo.AES,
           *         mode: CryptoJS.mode.CBC,
           *         padding: CryptoJS.pad.PKCS7,
           *         blockSize: 4,
           *         formatter: CryptoJS.format.OpenSSL
           *     });
           */
          init: function(cipherParams) {
            this.mixIn(cipherParams);
          },
          /**
           * Converts this cipher params object to a string.
           *
           * @param {Format} formatter (Optional) The formatting strategy to use.
           *
           * @return {string} The stringified cipher params.
           *
           * @throws Error If neither the formatter nor the default formatter is set.
           *
           * @example
           *
           *     var string = cipherParams + '';
           *     var string = cipherParams.toString();
           *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
           */
          toString: function(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        var C_format = C.format = {};
        var OpenSSLFormatter = C_format.OpenSSL = {
          /**
           * Converts a cipher params object to an OpenSSL-compatible string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The OpenSSL-compatible string.
           *
           * @static
           *
           * @example
           *
           *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            var wordArray;
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;
            if (salt) {
              wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }
            return wordArray.toString(Base64);
          },
          /**
           * Converts an OpenSSL-compatible string to a cipher params object.
           *
           * @param {string} openSSLStr The OpenSSL-compatible string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
           */
          parse: function(openSSLStr) {
            var salt;
            var ciphertext = Base64.parse(openSSLStr);
            var ciphertextWords = ciphertext.words;
            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
              salt = WordArray.create(ciphertextWords.slice(2, 4));
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({ ciphertext, salt });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          /**
           * Configuration options.
           *
           * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
           */
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          /**
           * Encrypts a message.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, key, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext,
              key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          /**
           * Decrypts serialized ciphertext.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, key, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          /**
           * Converts serialized ciphertext to CipherParams,
           * else assumed CipherParams already and returns ciphertext unchanged.
           *
           * @param {CipherParams|string} ciphertext The ciphertext.
           * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
           *
           * @return {CipherParams} The unserialized ciphertext.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
           */
          _parse: function(ciphertext, format2) {
            if (typeof ciphertext == "string") {
              return format2.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        var C_kdf = C.kdf = {};
        var OpenSSLKdf = C_kdf.OpenSSL = {
          /**
           * Derives a key and IV from a password.
           *
           * @param {string} password The password to derive from.
           * @param {number} keySize The size in words of the key to generate.
           * @param {number} ivSize The size in words of the IV to generate.
           * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
           *
           * @return {CipherParams} A cipher params object with the key, IV, and salt.
           *
           * @static
           *
           * @example
           *
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
           */
          execute: function(password, keySize, ivSize, salt) {
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }
            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4;
            return CipherParams.create({ key, iv, salt });
          }
        };
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          /**
           * Configuration options.
           *
           * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
           */
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          /**
           * Encrypts a message using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(cipher, message, password, cfg) {
            cfg = this.cfg.extend(cfg);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
            cfg.iv = derivedParams.iv;
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          /**
           * Decrypts serialized ciphertext using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
            cfg.iv = derivedParams.iv;
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();
    });
  }
});

// node_modules/crypto-js/mode-cfb.js
var require_mode_cfb = __commonJS({
  "node_modules/crypto-js/mode-cfb.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.CFB = function() {
        var CFB = CryptoJS2.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = words.slice(offset, offset + blockSize);
          }
        });
        CFB.Decryptor = CFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var thisBlock = words.slice(offset, offset + blockSize);
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = thisBlock;
          }
        });
        function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
          var keystream;
          var iv = this._iv;
          if (iv) {
            keystream = iv.slice(0);
            this._iv = void 0;
          } else {
            keystream = this._prevBlock;
          }
          cipher.encryptBlock(keystream, 0);
          for (var i2 = 0; i2 < blockSize; i2++) {
            words[offset + i2] ^= keystream[i2];
          }
        }
        return CFB;
      }();
      return CryptoJS2.mode.CFB;
    });
  }
});

// node_modules/crypto-js/mode-ctr.js
var require_mode_ctr = __commonJS({
  "node_modules/crypto-js/mode-ctr.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.CTR = function() {
        var CTR = CryptoJS2.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
            for (var i2 = 0; i2 < blockSize; i2++) {
              words[offset + i2] ^= keystream[i2];
            }
          }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
      }();
      return CryptoJS2.mode.CTR;
    });
  }
});

// node_modules/crypto-js/mode-ctr-gladman.js
var require_mode_ctr_gladman = __commonJS({
  "node_modules/crypto-js/mode-ctr-gladman.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.CTRGladman = function() {
        var CTRGladman = CryptoJS2.lib.BlockCipherMode.extend();
        function incWord(word) {
          if ((word >> 24 & 255) === 255) {
            var b1 = word >> 16 & 255;
            var b2 = word >> 8 & 255;
            var b3 = word & 255;
            if (b1 === 255) {
              b1 = 0;
              if (b2 === 255) {
                b2 = 0;
                if (b3 === 255) {
                  b3 = 0;
                } else {
                  ++b3;
                }
              } else {
                ++b2;
              }
            } else {
              ++b1;
            }
            word = 0;
            word += b1 << 16;
            word += b2 << 8;
            word += b3;
          } else {
            word += 1 << 24;
          }
          return word;
        }
        function incCounter(counter) {
          if ((counter[0] = incWord(counter[0])) === 0) {
            counter[1] = incWord(counter[1]);
          }
          return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            incCounter(counter);
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            for (var i2 = 0; i2 < blockSize; i2++) {
              words[offset + i2] ^= keystream[i2];
            }
          }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
      }();
      return CryptoJS2.mode.CTRGladman;
    });
  }
});

// node_modules/crypto-js/mode-ofb.js
var require_mode_ofb = __commonJS({
  "node_modules/crypto-js/mode-ofb.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.OFB = function() {
        var OFB = CryptoJS2.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
          processBlock: function(words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var keystream = this._keystream;
            if (iv) {
              keystream = this._keystream = iv.slice(0);
              this._iv = void 0;
            }
            cipher.encryptBlock(keystream, 0);
            for (var i2 = 0; i2 < blockSize; i2++) {
              words[offset + i2] ^= keystream[i2];
            }
          }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
      }();
      return CryptoJS2.mode.OFB;
    });
  }
});

// node_modules/crypto-js/mode-ecb.js
var require_mode_ecb = __commonJS({
  "node_modules/crypto-js/mode-ecb.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.ECB = function() {
        var ECB = CryptoJS2.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.encryptBlock(words, offset);
          }
        });
        ECB.Decryptor = ECB.extend({
          processBlock: function(words, offset) {
            this._cipher.decryptBlock(words, offset);
          }
        });
        return ECB;
      }();
      return CryptoJS2.mode.ECB;
    });
  }
});

// node_modules/crypto-js/pad-ansix923.js
var require_pad_ansix923 = __commonJS({
  "node_modules/crypto-js/pad-ansix923.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.AnsiX923 = {
        pad: function(data, blockSize) {
          var dataSigBytes = data.sigBytes;
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
          var lastBytePos = dataSigBytes + nPaddingBytes - 1;
          data.clamp();
          data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
          data.sigBytes += nPaddingBytes;
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS2.pad.Ansix923;
    });
  }
});

// node_modules/crypto-js/pad-iso10126.js
var require_pad_iso10126 = __commonJS({
  "node_modules/crypto-js/pad-iso10126.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.Iso10126 = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
          data.concat(CryptoJS2.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS2.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS2.pad.Iso10126;
    });
  }
});

// node_modules/crypto-js/pad-iso97971.js
var require_pad_iso97971 = __commonJS({
  "node_modules/crypto-js/pad-iso97971.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.Iso97971 = {
        pad: function(data, blockSize) {
          data.concat(CryptoJS2.lib.WordArray.create([2147483648], 1));
          CryptoJS2.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function(data) {
          CryptoJS2.pad.ZeroPadding.unpad(data);
          data.sigBytes--;
        }
      };
      return CryptoJS2.pad.Iso97971;
    });
  }
});

// node_modules/crypto-js/pad-zeropadding.js
var require_pad_zeropadding = __commonJS({
  "node_modules/crypto-js/pad-zeropadding.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.ZeroPadding = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          data.clamp();
          data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function(data) {
          var dataWords = data.words;
          var i2 = data.sigBytes - 1;
          for (var i2 = data.sigBytes - 1; i2 >= 0; i2--) {
            if (dataWords[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255) {
              data.sigBytes = i2 + 1;
              break;
            }
          }
        }
      };
      return CryptoJS2.pad.ZeroPadding;
    });
  }
});

// node_modules/crypto-js/pad-nopadding.js
var require_pad_nopadding = __commonJS({
  "node_modules/crypto-js/pad-nopadding.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.NoPadding = {
        pad: function() {
        },
        unpad: function() {
        }
      };
      return CryptoJS2.pad.NoPadding;
    });
  }
});

// node_modules/crypto-js/format-hex.js
var require_format_hex = __commonJS({
  "node_modules/crypto-js/format-hex.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(undefined2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C.enc;
        var Hex = C_enc.Hex;
        var C_format = C.format;
        var HexFormatter = C_format.Hex = {
          /**
           * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The hexadecimally encoded string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
           */
          stringify: function(cipherParams) {
            return cipherParams.ciphertext.toString(Hex);
          },
          /**
           * Converts a hexadecimally encoded ciphertext string to a cipher params object.
           *
           * @param {string} input The hexadecimally encoded string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
           */
          parse: function(input) {
            var ciphertext = Hex.parse(input);
            return CipherParams.create({ ciphertext });
          }
        };
      })();
      return CryptoJS2.format.Hex;
    });
  }
});

// node_modules/crypto-js/aes.js
var require_aes = __commonJS({
  "node_modules/crypto-js/aes.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d3 = [];
          for (var i2 = 0; i2 < 256; i2++) {
            if (i2 < 128) {
              d3[i2] = i2 << 1;
            } else {
              d3[i2] = i2 << 1 ^ 283;
            }
          }
          var x2 = 0;
          var xi = 0;
          for (var i2 = 0; i2 < 256; i2++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x2] = sx;
            INV_SBOX[sx] = x2;
            var x22 = d3[x2];
            var x4 = d3[x22];
            var x8 = d3[x4];
            var t2 = d3[sx] * 257 ^ sx * 16843008;
            SUB_MIX_0[x2] = t2 << 24 | t2 >>> 8;
            SUB_MIX_1[x2] = t2 << 16 | t2 >>> 16;
            SUB_MIX_2[x2] = t2 << 8 | t2 >>> 24;
            SUB_MIX_3[x2] = t2;
            var t2 = x8 * 16843009 ^ x4 * 65537 ^ x22 * 257 ^ x2 * 16843008;
            INV_SUB_MIX_0[sx] = t2 << 24 | t2 >>> 8;
            INV_SUB_MIX_1[sx] = t2 << 16 | t2 >>> 16;
            INV_SUB_MIX_2[sx] = t2 << 8 | t2 >>> 24;
            INV_SUB_MIX_3[sx] = t2;
            if (!x2) {
              x2 = xi = 1;
            } else {
              x2 = x22 ^ d3[d3[d3[x8 ^ x22]]];
              xi ^= d3[d3[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            var t2;
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                t2 = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t2 = t2 << 8 | t2 >>> 24;
                  t2 = SBOX[t2 >>> 24] << 24 | SBOX[t2 >>> 16 & 255] << 16 | SBOX[t2 >>> 8 & 255] << 8 | SBOX[t2 & 255];
                  t2 ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t2 = SBOX[t2 >>> 24] << 24 | SBOX[t2 >>> 16 & 255] << 16 | SBOX[t2 >>> 8 & 255] << 8 | SBOX[t2 & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t2;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t2 = keySchedule[ksRow];
              } else {
                var t2 = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t2;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t2 >>> 24]] ^ INV_SUB_MIX_1[SBOX[t2 >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t2 >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t2 & 255]];
              }
            }
          },
          encryptBlock: function(M3, offset) {
            this._doCryptBlock(M3, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M3, offset) {
            var t2 = M3[offset + 1];
            M3[offset + 1] = M3[offset + 3];
            M3[offset + 3] = t2;
            this._doCryptBlock(M3, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t2 = M3[offset + 1];
            M3[offset + 1] = M3[offset + 3];
            M3[offset + 3] = t2;
          },
          _doCryptBlock: function(M3, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s0 = M3[offset] ^ keySchedule[0];
            var s1 = M3[offset + 1] ^ keySchedule[1];
            var s22 = M3[offset + 2] ^ keySchedule[2];
            var s3 = M3[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round = 1; round < nRounds; round++) {
              var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s22 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s22 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_02[s22 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s22 & 255] ^ keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s22 = t2;
              s3 = t3;
            }
            var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s22 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
            var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s22 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
            var t2 = (SBOX2[s22 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
            var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s22 & 255]) ^ keySchedule[ksRow++];
            M3[offset] = t0;
            M3[offset + 1] = t1;
            M3[offset + 2] = t2;
            M3[offset + 3] = t3;
          },
          keySize: 256 / 32
        });
        C.AES = BlockCipher._createHelper(AES);
      })();
      return CryptoJS2.AES;
    });
  }
});

// node_modules/crypto-js/tripledes.js
var require_tripledes = __commonJS({
  "node_modules/crypto-js/tripledes.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var PC1 = [
          57,
          49,
          41,
          33,
          25,
          17,
          9,
          1,
          58,
          50,
          42,
          34,
          26,
          18,
          10,
          2,
          59,
          51,
          43,
          35,
          27,
          19,
          11,
          3,
          60,
          52,
          44,
          36,
          63,
          55,
          47,
          39,
          31,
          23,
          15,
          7,
          62,
          54,
          46,
          38,
          30,
          22,
          14,
          6,
          61,
          53,
          45,
          37,
          29,
          21,
          13,
          5,
          28,
          20,
          12,
          4
        ];
        var PC2 = [
          14,
          17,
          11,
          24,
          1,
          5,
          3,
          28,
          15,
          6,
          21,
          10,
          23,
          19,
          12,
          4,
          26,
          8,
          16,
          7,
          27,
          20,
          13,
          2,
          41,
          52,
          31,
          37,
          47,
          55,
          30,
          40,
          51,
          45,
          33,
          48,
          44,
          49,
          39,
          56,
          34,
          53,
          46,
          42,
          50,
          36,
          29,
          32
        ];
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        var SBOX_P = [
          {
            0: 8421888,
            268435456: 32768,
            536870912: 8421378,
            805306368: 2,
            1073741824: 512,
            1342177280: 8421890,
            1610612736: 8389122,
            1879048192: 8388608,
            2147483648: 514,
            2415919104: 8389120,
            2684354560: 33280,
            2952790016: 8421376,
            3221225472: 32770,
            3489660928: 8388610,
            3758096384: 0,
            4026531840: 33282,
            134217728: 0,
            402653184: 8421890,
            671088640: 33282,
            939524096: 32768,
            1207959552: 8421888,
            1476395008: 512,
            1744830464: 8421378,
            2013265920: 2,
            2281701376: 8389120,
            2550136832: 33280,
            2818572288: 8421376,
            3087007744: 8389122,
            3355443200: 8388610,
            3623878656: 32770,
            3892314112: 514,
            4160749568: 8388608,
            1: 32768,
            268435457: 2,
            536870913: 8421888,
            805306369: 8388608,
            1073741825: 8421378,
            1342177281: 33280,
            1610612737: 512,
            1879048193: 8389122,
            2147483649: 8421890,
            2415919105: 8421376,
            2684354561: 8388610,
            2952790017: 33282,
            3221225473: 514,
            3489660929: 8389120,
            3758096385: 32770,
            4026531841: 0,
            134217729: 8421890,
            402653185: 8421376,
            671088641: 8388608,
            939524097: 512,
            1207959553: 32768,
            1476395009: 8388610,
            1744830465: 2,
            2013265921: 33282,
            2281701377: 32770,
            2550136833: 8389122,
            2818572289: 514,
            3087007745: 8421888,
            3355443201: 8389120,
            3623878657: 0,
            3892314113: 33280,
            4160749569: 8421378
          },
          {
            0: 1074282512,
            16777216: 16384,
            33554432: 524288,
            50331648: 1074266128,
            67108864: 1073741840,
            83886080: 1074282496,
            100663296: 1073758208,
            117440512: 16,
            134217728: 540672,
            150994944: 1073758224,
            167772160: 1073741824,
            184549376: 540688,
            201326592: 524304,
            218103808: 0,
            234881024: 16400,
            251658240: 1074266112,
            8388608: 1073758208,
            25165824: 540688,
            41943040: 16,
            58720256: 1073758224,
            75497472: 1074282512,
            92274688: 1073741824,
            109051904: 524288,
            125829120: 1074266128,
            142606336: 524304,
            159383552: 0,
            176160768: 16384,
            192937984: 1074266112,
            209715200: 1073741840,
            226492416: 540672,
            243269632: 1074282496,
            260046848: 16400,
            268435456: 0,
            285212672: 1074266128,
            301989888: 1073758224,
            318767104: 1074282496,
            335544320: 1074266112,
            352321536: 16,
            369098752: 540688,
            385875968: 16384,
            402653184: 16400,
            419430400: 524288,
            436207616: 524304,
            452984832: 1073741840,
            469762048: 540672,
            486539264: 1073758208,
            503316480: 1073741824,
            520093696: 1074282512,
            276824064: 540688,
            293601280: 524288,
            310378496: 1074266112,
            327155712: 16384,
            343932928: 1073758208,
            360710144: 1074282512,
            377487360: 16,
            394264576: 1073741824,
            411041792: 1074282496,
            427819008: 1073741840,
            444596224: 1073758224,
            461373440: 524304,
            478150656: 0,
            494927872: 16400,
            511705088: 1074266128,
            528482304: 540672
          },
          {
            0: 260,
            1048576: 0,
            2097152: 67109120,
            3145728: 65796,
            4194304: 65540,
            5242880: 67108868,
            6291456: 67174660,
            7340032: 67174400,
            8388608: 67108864,
            9437184: 67174656,
            10485760: 65792,
            11534336: 67174404,
            12582912: 67109124,
            13631488: 65536,
            14680064: 4,
            15728640: 256,
            524288: 67174656,
            1572864: 67174404,
            2621440: 0,
            3670016: 67109120,
            4718592: 67108868,
            5767168: 65536,
            6815744: 65540,
            7864320: 260,
            8912896: 4,
            9961472: 256,
            11010048: 67174400,
            12058624: 65796,
            13107200: 65792,
            14155776: 67109124,
            15204352: 67174660,
            16252928: 67108864,
            16777216: 67174656,
            17825792: 65540,
            18874368: 65536,
            19922944: 67109120,
            20971520: 256,
            22020096: 67174660,
            23068672: 67108868,
            24117248: 0,
            25165824: 67109124,
            26214400: 67108864,
            27262976: 4,
            28311552: 65792,
            29360128: 67174400,
            30408704: 260,
            31457280: 65796,
            32505856: 67174404,
            17301504: 67108864,
            18350080: 260,
            19398656: 67174656,
            20447232: 0,
            21495808: 65540,
            22544384: 67109120,
            23592960: 256,
            24641536: 67174404,
            25690112: 65536,
            26738688: 67174660,
            27787264: 65796,
            28835840: 67108868,
            29884416: 67109124,
            30932992: 67174400,
            31981568: 4,
            33030144: 65792
          },
          {
            0: 2151682048,
            65536: 2147487808,
            131072: 4198464,
            196608: 2151677952,
            262144: 0,
            327680: 4198400,
            393216: 2147483712,
            458752: 4194368,
            524288: 2147483648,
            589824: 4194304,
            655360: 64,
            720896: 2147487744,
            786432: 2151678016,
            851968: 4160,
            917504: 4096,
            983040: 2151682112,
            32768: 2147487808,
            98304: 64,
            163840: 2151678016,
            229376: 2147487744,
            294912: 4198400,
            360448: 2151682112,
            425984: 0,
            491520: 2151677952,
            557056: 4096,
            622592: 2151682048,
            688128: 4194304,
            753664: 4160,
            819200: 2147483648,
            884736: 4194368,
            950272: 4198464,
            1015808: 2147483712,
            1048576: 4194368,
            1114112: 4198400,
            1179648: 2147483712,
            1245184: 0,
            1310720: 4160,
            1376256: 2151678016,
            1441792: 2151682048,
            1507328: 2147487808,
            1572864: 2151682112,
            1638400: 2147483648,
            1703936: 2151677952,
            1769472: 4198464,
            1835008: 2147487744,
            1900544: 4194304,
            1966080: 64,
            2031616: 4096,
            1081344: 2151677952,
            1146880: 2151682112,
            1212416: 0,
            1277952: 4198400,
            1343488: 4194368,
            1409024: 2147483648,
            1474560: 2147487808,
            1540096: 64,
            1605632: 2147483712,
            1671168: 4096,
            1736704: 2147487744,
            1802240: 2151678016,
            1867776: 4160,
            1933312: 2151682048,
            1998848: 4194304,
            2064384: 4198464
          },
          {
            0: 128,
            4096: 17039360,
            8192: 262144,
            12288: 536870912,
            16384: 537133184,
            20480: 16777344,
            24576: 553648256,
            28672: 262272,
            32768: 16777216,
            36864: 537133056,
            40960: 536871040,
            45056: 553910400,
            49152: 553910272,
            53248: 0,
            57344: 17039488,
            61440: 553648128,
            2048: 17039488,
            6144: 553648256,
            10240: 128,
            14336: 17039360,
            18432: 262144,
            22528: 537133184,
            26624: 553910272,
            30720: 536870912,
            34816: 537133056,
            38912: 0,
            43008: 553910400,
            47104: 16777344,
            51200: 536871040,
            55296: 553648128,
            59392: 16777216,
            63488: 262272,
            65536: 262144,
            69632: 128,
            73728: 536870912,
            77824: 553648256,
            81920: 16777344,
            86016: 553910272,
            90112: 537133184,
            94208: 16777216,
            98304: 553910400,
            102400: 553648128,
            106496: 17039360,
            110592: 537133056,
            114688: 262272,
            118784: 536871040,
            122880: 0,
            126976: 17039488,
            67584: 553648256,
            71680: 16777216,
            75776: 17039360,
            79872: 537133184,
            83968: 536870912,
            88064: 17039488,
            92160: 128,
            96256: 553910272,
            100352: 262272,
            104448: 553910400,
            108544: 0,
            112640: 553648128,
            116736: 16777344,
            120832: 262144,
            124928: 537133056,
            129024: 536871040
          },
          {
            0: 268435464,
            256: 8192,
            512: 270532608,
            768: 270540808,
            1024: 268443648,
            1280: 2097152,
            1536: 2097160,
            1792: 268435456,
            2048: 0,
            2304: 268443656,
            2560: 2105344,
            2816: 8,
            3072: 270532616,
            3328: 2105352,
            3584: 8200,
            3840: 270540800,
            128: 270532608,
            384: 270540808,
            640: 8,
            896: 2097152,
            1152: 2105352,
            1408: 268435464,
            1664: 268443648,
            1920: 8200,
            2176: 2097160,
            2432: 8192,
            2688: 268443656,
            2944: 270532616,
            3200: 0,
            3456: 270540800,
            3712: 2105344,
            3968: 268435456,
            4096: 268443648,
            4352: 270532616,
            4608: 270540808,
            4864: 8200,
            5120: 2097152,
            5376: 268435456,
            5632: 268435464,
            5888: 2105344,
            6144: 2105352,
            6400: 0,
            6656: 8,
            6912: 270532608,
            7168: 8192,
            7424: 268443656,
            7680: 270540800,
            7936: 2097160,
            4224: 8,
            4480: 2105344,
            4736: 2097152,
            4992: 268435464,
            5248: 268443648,
            5504: 8200,
            5760: 270540808,
            6016: 270532608,
            6272: 270540800,
            6528: 270532616,
            6784: 8192,
            7040: 2105352,
            7296: 2097160,
            7552: 0,
            7808: 268435456,
            8064: 268443656
          },
          {
            0: 1048576,
            16: 33555457,
            32: 1024,
            48: 1049601,
            64: 34604033,
            80: 0,
            96: 1,
            112: 34603009,
            128: 33555456,
            144: 1048577,
            160: 33554433,
            176: 34604032,
            192: 34603008,
            208: 1025,
            224: 1049600,
            240: 33554432,
            8: 34603009,
            24: 0,
            40: 33555457,
            56: 34604032,
            72: 1048576,
            88: 33554433,
            104: 33554432,
            120: 1025,
            136: 1049601,
            152: 33555456,
            168: 34603008,
            184: 1048577,
            200: 1024,
            216: 34604033,
            232: 1,
            248: 1049600,
            256: 33554432,
            272: 1048576,
            288: 33555457,
            304: 34603009,
            320: 1048577,
            336: 33555456,
            352: 34604032,
            368: 1049601,
            384: 1025,
            400: 34604033,
            416: 1049600,
            432: 1,
            448: 0,
            464: 34603008,
            480: 33554433,
            496: 1024,
            264: 1049600,
            280: 33555457,
            296: 34603009,
            312: 1,
            328: 33554432,
            344: 1048576,
            360: 1025,
            376: 34604032,
            392: 33554433,
            408: 34603008,
            424: 0,
            440: 34604033,
            456: 1049601,
            472: 1024,
            488: 33555456,
            504: 1048577
          },
          {
            0: 134219808,
            1: 131072,
            2: 134217728,
            3: 32,
            4: 131104,
            5: 134350880,
            6: 134350848,
            7: 2048,
            8: 134348800,
            9: 134219776,
            10: 133120,
            11: 134348832,
            12: 2080,
            13: 0,
            14: 134217760,
            15: 133152,
            2147483648: 2048,
            2147483649: 134350880,
            2147483650: 134219808,
            2147483651: 134217728,
            2147483652: 134348800,
            2147483653: 133120,
            2147483654: 133152,
            2147483655: 32,
            2147483656: 134217760,
            2147483657: 2080,
            2147483658: 131104,
            2147483659: 134350848,
            2147483660: 0,
            2147483661: 134348832,
            2147483662: 134219776,
            2147483663: 131072,
            16: 133152,
            17: 134350848,
            18: 32,
            19: 2048,
            20: 134219776,
            21: 134217760,
            22: 134348832,
            23: 131072,
            24: 0,
            25: 131104,
            26: 134348800,
            27: 134219808,
            28: 134350880,
            29: 133120,
            30: 2080,
            31: 134217728,
            2147483664: 131072,
            2147483665: 2048,
            2147483666: 134348832,
            2147483667: 133152,
            2147483668: 32,
            2147483669: 134348800,
            2147483670: 134217728,
            2147483671: 134219808,
            2147483672: 134350880,
            2147483673: 134217760,
            2147483674: 134219776,
            2147483675: 0,
            2147483676: 133120,
            2147483677: 2080,
            2147483678: 131104,
            2147483679: 134350848
          }
        ];
        var SBOX_MASK = [
          4160749569,
          528482304,
          33030144,
          2064384,
          129024,
          8064,
          504,
          2147483679
        ];
        var DES = C_algo.DES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keyBits = [];
            for (var i2 = 0; i2 < 56; i2++) {
              var keyBitPos = PC1[i2] - 1;
              keyBits[i2] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
            }
            var subKeys = this._subKeys = [];
            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
              var subKey = subKeys[nSubKey] = [];
              var bitShift = BIT_SHIFTS[nSubKey];
              for (var i2 = 0; i2 < 24; i2++) {
                subKey[i2 / 6 | 0] |= keyBits[(PC2[i2] - 1 + bitShift) % 28] << 31 - i2 % 6;
                subKey[4 + (i2 / 6 | 0)] |= keyBits[28 + (PC2[i2 + 24] - 1 + bitShift) % 28] << 31 - i2 % 6;
              }
              subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
              for (var i2 = 1; i2 < 7; i2++) {
                subKey[i2] = subKey[i2] >>> (i2 - 1) * 4 + 3;
              }
              subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
            }
            var invSubKeys = this._invSubKeys = [];
            for (var i2 = 0; i2 < 16; i2++) {
              invSubKeys[i2] = subKeys[15 - i2];
            }
          },
          encryptBlock: function(M3, offset) {
            this._doCryptBlock(M3, offset, this._subKeys);
          },
          decryptBlock: function(M3, offset) {
            this._doCryptBlock(M3, offset, this._invSubKeys);
          },
          _doCryptBlock: function(M3, offset, subKeys) {
            this._lBlock = M3[offset];
            this._rBlock = M3[offset + 1];
            exchangeLR.call(this, 4, 252645135);
            exchangeLR.call(this, 16, 65535);
            exchangeRL.call(this, 2, 858993459);
            exchangeRL.call(this, 8, 16711935);
            exchangeLR.call(this, 1, 1431655765);
            for (var round = 0; round < 16; round++) {
              var subKey = subKeys[round];
              var lBlock = this._lBlock;
              var rBlock = this._rBlock;
              var f = 0;
              for (var i2 = 0; i2 < 8; i2++) {
                f |= SBOX_P[i2][((rBlock ^ subKey[i2]) & SBOX_MASK[i2]) >>> 0];
              }
              this._lBlock = rBlock;
              this._rBlock = lBlock ^ f;
            }
            var t2 = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t2;
            exchangeLR.call(this, 1, 1431655765);
            exchangeRL.call(this, 8, 16711935);
            exchangeRL.call(this, 2, 858993459);
            exchangeLR.call(this, 16, 65535);
            exchangeLR.call(this, 4, 252645135);
            M3[offset] = this._lBlock;
            M3[offset + 1] = this._rBlock;
          },
          keySize: 64 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        function exchangeLR(offset, mask) {
          var t2 = (this._lBlock >>> offset ^ this._rBlock) & mask;
          this._rBlock ^= t2;
          this._lBlock ^= t2 << offset;
        }
        function exchangeRL(offset, mask) {
          var t2 = (this._rBlock >>> offset ^ this._lBlock) & mask;
          this._lBlock ^= t2;
          this._rBlock ^= t2 << offset;
        }
        C.DES = BlockCipher._createHelper(DES);
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
              throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
            }
            var key1 = keyWords.slice(0, 2);
            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
            this._des1 = DES.createEncryptor(WordArray.create(key1));
            this._des2 = DES.createEncryptor(WordArray.create(key2));
            this._des3 = DES.createEncryptor(WordArray.create(key3));
          },
          encryptBlock: function(M3, offset) {
            this._des1.encryptBlock(M3, offset);
            this._des2.decryptBlock(M3, offset);
            this._des3.encryptBlock(M3, offset);
          },
          decryptBlock: function(M3, offset) {
            this._des3.decryptBlock(M3, offset);
            this._des2.encryptBlock(M3, offset);
            this._des1.decryptBlock(M3, offset);
          },
          keySize: 192 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        C.TripleDES = BlockCipher._createHelper(TripleDES);
      })();
      return CryptoJS2.TripleDES;
    });
  }
});

// node_modules/crypto-js/rc4.js
var require_rc4 = __commonJS({
  "node_modules/crypto-js/rc4.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var RC4 = C_algo.RC4 = StreamCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keySigBytes = key.sigBytes;
            var S3 = this._S = [];
            for (var i2 = 0; i2 < 256; i2++) {
              S3[i2] = i2;
            }
            for (var i2 = 0, j = 0; i2 < 256; i2++) {
              var keyByteIndex = i2 % keySigBytes;
              var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
              j = (j + S3[i2] + keyByte) % 256;
              var t2 = S3[i2];
              S3[i2] = S3[j];
              S3[j] = t2;
            }
            this._i = this._j = 0;
          },
          _doProcessBlock: function(M3, offset) {
            M3[offset] ^= generateKeystreamWord.call(this);
          },
          keySize: 256 / 32,
          ivSize: 0
        });
        function generateKeystreamWord() {
          var S3 = this._S;
          var i2 = this._i;
          var j = this._j;
          var keystreamWord = 0;
          for (var n = 0; n < 4; n++) {
            i2 = (i2 + 1) % 256;
            j = (j + S3[i2]) % 256;
            var t2 = S3[i2];
            S3[i2] = S3[j];
            S3[j] = t2;
            keystreamWord |= S3[(S3[i2] + S3[j]) % 256] << 24 - n * 8;
          }
          this._i = i2;
          this._j = j;
          return keystreamWord;
        }
        C.RC4 = StreamCipher._createHelper(RC4);
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
          /**
           * Configuration options.
           *
           * @property {number} drop The number of keystream words to drop. Default 192
           */
          cfg: RC4.cfg.extend({
            drop: 192
          }),
          _doReset: function() {
            RC4._doReset.call(this);
            for (var i2 = this.cfg.drop; i2 > 0; i2--) {
              generateKeystreamWord.call(this);
            }
          }
        });
        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
      })();
      return CryptoJS2.RC4;
    });
  }
});

// node_modules/crypto-js/rabbit.js
var require_rabbit = __commonJS({
  "node_modules/crypto-js/rabbit.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S3 = [];
        var C_ = [];
        var G2 = [];
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
          _doReset: function() {
            var K2 = this._key.words;
            var iv = this.cfg.iv;
            for (var i2 = 0; i2 < 4; i2++) {
              K2[i2] = (K2[i2] << 8 | K2[i2] >>> 24) & 16711935 | (K2[i2] << 24 | K2[i2] >>> 8) & 4278255360;
            }
            var X2 = this._X = [
              K2[0],
              K2[3] << 16 | K2[2] >>> 16,
              K2[1],
              K2[0] << 16 | K2[3] >>> 16,
              K2[2],
              K2[1] << 16 | K2[0] >>> 16,
              K2[3],
              K2[2] << 16 | K2[1] >>> 16
            ];
            var C2 = this._C = [
              K2[2] << 16 | K2[2] >>> 16,
              K2[0] & 4294901760 | K2[1] & 65535,
              K2[3] << 16 | K2[3] >>> 16,
              K2[1] & 4294901760 | K2[2] & 65535,
              K2[0] << 16 | K2[0] >>> 16,
              K2[2] & 4294901760 | K2[3] & 65535,
              K2[1] << 16 | K2[1] >>> 16,
              K2[3] & 4294901760 | K2[0] & 65535
            ];
            this._b = 0;
            for (var i2 = 0; i2 < 4; i2++) {
              nextState.call(this);
            }
            for (var i2 = 0; i2 < 8; i2++) {
              C2[i2] ^= X2[i2 + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i22 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i22 & 4294901760;
              var i3 = i22 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i22;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i22;
              C2[7] ^= i3;
              for (var i2 = 0; i2 < 4; i2++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M3, offset) {
            var X2 = this._X;
            nextState.call(this);
            S3[0] = X2[0] ^ X2[5] >>> 16 ^ X2[3] << 16;
            S3[1] = X2[2] ^ X2[7] >>> 16 ^ X2[5] << 16;
            S3[2] = X2[4] ^ X2[1] >>> 16 ^ X2[7] << 16;
            S3[3] = X2[6] ^ X2[3] >>> 16 ^ X2[1] << 16;
            for (var i2 = 0; i2 < 4; i2++) {
              S3[i2] = (S3[i2] << 8 | S3[i2] >>> 24) & 16711935 | (S3[i2] << 24 | S3[i2] >>> 8) & 4278255360;
              M3[offset + i2] ^= S3[i2];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X2 = this._X;
          var C2 = this._C;
          for (var i2 = 0; i2 < 8; i2++) {
            C_[i2] = C2[i2];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i2 = 0; i2 < 8; i2++) {
            var gx = X2[i2] + C2[i2];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G2[i2] = gh ^ gl;
          }
          X2[0] = G2[0] + (G2[7] << 16 | G2[7] >>> 16) + (G2[6] << 16 | G2[6] >>> 16) | 0;
          X2[1] = G2[1] + (G2[0] << 8 | G2[0] >>> 24) + G2[7] | 0;
          X2[2] = G2[2] + (G2[1] << 16 | G2[1] >>> 16) + (G2[0] << 16 | G2[0] >>> 16) | 0;
          X2[3] = G2[3] + (G2[2] << 8 | G2[2] >>> 24) + G2[1] | 0;
          X2[4] = G2[4] + (G2[3] << 16 | G2[3] >>> 16) + (G2[2] << 16 | G2[2] >>> 16) | 0;
          X2[5] = G2[5] + (G2[4] << 8 | G2[4] >>> 24) + G2[3] | 0;
          X2[6] = G2[6] + (G2[5] << 16 | G2[5] >>> 16) + (G2[4] << 16 | G2[4] >>> 16) | 0;
          X2[7] = G2[7] + (G2[6] << 8 | G2[6] >>> 24) + G2[5] | 0;
        }
        C.Rabbit = StreamCipher._createHelper(Rabbit);
      })();
      return CryptoJS2.Rabbit;
    });
  }
});

// node_modules/crypto-js/rabbit-legacy.js
var require_rabbit_legacy = __commonJS({
  "node_modules/crypto-js/rabbit-legacy.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
      } else {
        factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S3 = [];
        var C_ = [];
        var G2 = [];
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
          _doReset: function() {
            var K2 = this._key.words;
            var iv = this.cfg.iv;
            var X2 = this._X = [
              K2[0],
              K2[3] << 16 | K2[2] >>> 16,
              K2[1],
              K2[0] << 16 | K2[3] >>> 16,
              K2[2],
              K2[1] << 16 | K2[0] >>> 16,
              K2[3],
              K2[2] << 16 | K2[1] >>> 16
            ];
            var C2 = this._C = [
              K2[2] << 16 | K2[2] >>> 16,
              K2[0] & 4294901760 | K2[1] & 65535,
              K2[3] << 16 | K2[3] >>> 16,
              K2[1] & 4294901760 | K2[2] & 65535,
              K2[0] << 16 | K2[0] >>> 16,
              K2[2] & 4294901760 | K2[3] & 65535,
              K2[1] << 16 | K2[1] >>> 16,
              K2[3] & 4294901760 | K2[0] & 65535
            ];
            this._b = 0;
            for (var i2 = 0; i2 < 4; i2++) {
              nextState.call(this);
            }
            for (var i2 = 0; i2 < 8; i2++) {
              C2[i2] ^= X2[i2 + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i22 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i22 & 4294901760;
              var i3 = i22 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i22;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i22;
              C2[7] ^= i3;
              for (var i2 = 0; i2 < 4; i2++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M3, offset) {
            var X2 = this._X;
            nextState.call(this);
            S3[0] = X2[0] ^ X2[5] >>> 16 ^ X2[3] << 16;
            S3[1] = X2[2] ^ X2[7] >>> 16 ^ X2[5] << 16;
            S3[2] = X2[4] ^ X2[1] >>> 16 ^ X2[7] << 16;
            S3[3] = X2[6] ^ X2[3] >>> 16 ^ X2[1] << 16;
            for (var i2 = 0; i2 < 4; i2++) {
              S3[i2] = (S3[i2] << 8 | S3[i2] >>> 24) & 16711935 | (S3[i2] << 24 | S3[i2] >>> 8) & 4278255360;
              M3[offset + i2] ^= S3[i2];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X2 = this._X;
          var C2 = this._C;
          for (var i2 = 0; i2 < 8; i2++) {
            C_[i2] = C2[i2];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i2 = 0; i2 < 8; i2++) {
            var gx = X2[i2] + C2[i2];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G2[i2] = gh ^ gl;
          }
          X2[0] = G2[0] + (G2[7] << 16 | G2[7] >>> 16) + (G2[6] << 16 | G2[6] >>> 16) | 0;
          X2[1] = G2[1] + (G2[0] << 8 | G2[0] >>> 24) + G2[7] | 0;
          X2[2] = G2[2] + (G2[1] << 16 | G2[1] >>> 16) + (G2[0] << 16 | G2[0] >>> 16) | 0;
          X2[3] = G2[3] + (G2[2] << 8 | G2[2] >>> 24) + G2[1] | 0;
          X2[4] = G2[4] + (G2[3] << 16 | G2[3] >>> 16) + (G2[2] << 16 | G2[2] >>> 16) | 0;
          X2[5] = G2[5] + (G2[4] << 8 | G2[4] >>> 24) + G2[3] | 0;
          X2[6] = G2[6] + (G2[5] << 16 | G2[5] >>> 16) + (G2[4] << 16 | G2[4] >>> 16) | 0;
          X2[7] = G2[7] + (G2[6] << 8 | G2[6] >>> 24) + G2[5] | 0;
        }
        C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
      })();
      return CryptoJS2.RabbitLegacy;
    });
  }
});

// node_modules/crypto-js/index.js
var require_crypto_js = __commonJS({
  "node_modules/crypto-js/index.js"(exports, module2) {
    (function(root, factory, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory(require_core(), require_x64_core(), require_lib_typedarrays(), require_enc_utf16(), require_enc_base64(), require_enc_base64url(), require_md5(), require_sha1(), require_sha256(), require_sha224(), require_sha512(), require_sha384(), require_sha3(), require_ripemd160(), require_hmac(), require_pbkdf2(), require_evpkdf(), require_cipher_core(), require_mode_cfb(), require_mode_ctr(), require_mode_ctr_gladman(), require_mode_ofb(), require_mode_ecb(), require_pad_ansix923(), require_pad_iso10126(), require_pad_iso97971(), require_pad_zeropadding(), require_pad_nopadding(), require_format_hex(), require_aes(), require_tripledes(), require_rc4(), require_rabbit(), require_rabbit_legacy());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./enc-base64url", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
      } else {
        root.CryptoJS = factory(root.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      return CryptoJS2;
    });
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => gamification2,
  hoursUntilMinutesPassed: () => hoursUntilMinutesPassed,
  isMinutesPassed: () => isMinutesPassed
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var defaultSettings = {
  enableInitCommand: "U2FsdGVkX1+7lWe/h95uqzgl27JBGW2iki7sBwk44YQ=",
  bindEnter: "U2FsdGVkX18RzGkyLEaTSnYuglT9lfhjvsi1mmI8BLo=",
  bindTab: "U2FsdGVkX18hvqMohlkOlQWRrDXthNh0Y6iIU31+fgM=",
  avatarPageName: "U2FsdGVkX19tx7HOhFe//jFZyT7M8iP/57yVK108QS6jyjHSUe6mc5Wqzpt2vdiQ",
  tagsExclude: "U2FsdGVkX1/1DDLTq+emYSwMYdTdLfZtFMEy+v+2lTM=",
  folderExclude: "U2FsdGVkX18h451OSiDtzWciseuXbr1aiod52D/Zthw=",
  progressiveSumLayer2: "U2FsdGVkX18CY7oxtyIPF7Be0q+Dsqh4uF42CZ9b+sw=",
  progressiveSumLayer3: "U2FsdGVkX1+JdwScrMUelt1ay2X2gKm+pjwjIfoeQVU=",
  numAllFiles: "U2FsdGVkX19++peid8UuEoUaRBuVZ57oNlmyBRDXgyQ=",
  numAllFilesCount: "U2FsdGVkX197NvA1/++DqTNGdBenzqKkxolb82XlHUE=",
  chartReduzierungMonate: "U2FsdGVkX1+iuJzyKJMnwYqJkkDD/qMMOhfF6gIT0r4=",
  statusPoints: "U2FsdGVkX19q1aAW1mbu07SLecx4hhLoGuU2xsOYLQo=",
  statusLevel: "U2FsdGVkX1+mrW9/+xmKESLksN/U8suua6whHcompmc=",
  xpForNextLevel: "U2FsdGVkX198I4j+ZJHYvW39SLG8f9rtQELYITZ+jw0=",
  gamificationStartDate: "U2FsdGVkX1/iQSlDZzeISa2rUzwbueZhL88bjrwwqgA=",
  badgeBoosterState: "U2FsdGVkX1+e6QXU8Y1jXfe0FnbkvnHh1bVvi1A5euI=",
  badgeBoosterFactor: "U2FsdGVkX1/gq8KlX95Wa4N9wIddrk855KCdTprCGLM=",
  debug: "U2FsdGVkX1+ThRKdv5UnXteNWll21exiEj5bVw+Zq0g=",
  dailyNoteCreationTask: "U2FsdGVkX1/hAj1ZZ9VK0nFlJh+m/r8B3Lrg2tQoPi4=",
  dailyNoteCreationDate: "U2FsdGVkX195v33EhTQvoQtR2/xfbC2Iag2Ly1UFSj8=",
  weeklyNoteCreationTask: "U2FsdGVkX1/MYfi0r0Btn2J7PmdQcWodJawC/uZAUSQ=",
  weeklyNoteCreationDate: "U2FsdGVkX18OX530OPOaURg/bv8xrM17hE0Y6641e30=",
  nexusNode: "U2FsdGVkX1+5+wg6OjOxBUvEe5w/SU0grvCLIshU/9s=",
  connectionCrystal: "U2FsdGVkX19SFmrQpmHJwAeiB/w1zUwmN3nOvfbfs8c=",
  masteryScroll: "U2FsdGVkX18Kw0rp3b/nkINNN3SpqvweJVE/rATCHtM=",
  insightPrism: "U2FsdGVkX1++HZ/2hGH+6N2troq6QLeUeEMO26tAcfI=",
  reflectiveEssence: "U2FsdGVkX19Z7F2Gh8bZXvDd7N18l1w+HbcJk0gfWA0=",
  amplificationCrystal: "U2FsdGVkX18yMidug9zA9AWEmHMGg9AZgeI7eZ+AXek=",
  creativeCatalyst: "U2FsdGVkX19VtBhRyx6pV/JbEkInmpgcWc14KAnRQDY=",
  precisionLens: "U2FsdGVkX18sNsXFgyqFUoCWskfyNB8PIDGaLWLloNA=",
  temporalTweaker: "U2FsdGVkX19gEZkMGrC9WfDXQJ1dXBTpGVV7FsgqL6c=",
  perpetualProgress: "U2FsdGVkX1+3G/oVNviHJFRqFMB4BsPOCQ4Idrf/17I=",
  strategicSynapses: "U2FsdGVkX1/BrFIepvBEWHDzGyTz5YsLOM2YVrewH4c=",
  acceleratedAcquisition: "U2FsdGVkX19Zh7lhInuLpVfmTyEkk/67rXJ3QCiIN0g=",
  linkersLode: "U2FsdGVkX19xaY2GD0sqSMMf9Yd7bocbKhI10xh5mE8=",
  effortlessExpansion: "U2FsdGVkX1+qXEn+UxHss4I14IjhiALGWPRbLkVdjQQ=",
  recursiveReflection: "U2FsdGVkX1/Gmt0ZFIV1dbgEVhV1ZWgYUD6y2nynX7o=",
  synapticSurge: "U2FsdGVkX18+ooWXF9paTPTKOFyR2X4G9MA4lU+lYbI=",
  inspirationInfusion: "U2FsdGVkX18nz7ETr6ySHiO0ZmEB/WrazgNilPnlKkQ=",
  titleTitan: "U2FsdGVkX1/IMkDcmc8A20Uv9ifppYH5tyVKOaMagEY=",
  precisionPrism: "U2FsdGVkX1+72YwT/XdQzbpOLwA9ltJY8a+3GWB+IkQ=",
  hyperlinkHarmony: "U2FsdGVkX191lYd3kaeLOKdWTo9GllDL25tN36zPYxE=",
  ephemeralEuphoria: "U2FsdGVkX1+ijNputHqHW5gK0frfmswGx7EUdaHxjnk=",
  boosterFactorPerpetualProgress: "U2FsdGVkX19/Fss2X+hd+w6ZmI5yNJcuUWA+ImrOGmg=",
  boosterDatePerpetualProgress: "U2FsdGVkX1+RQltOMLx9axaYLmqyGEU9q2EJ6aFkRyvnCWTShMLGhyFmYzT35BaY",
  boosterFactorStrategicSynapses: "U2FsdGVkX18575mGIVSjGk/qJposIrfRUy+v/Cs8dK0=",
  boosterDateStrategicSynapses: "U2FsdGVkX1/T9U0yB5j6ibGAvV8RKrcrjZrKtygKgrhhy/sPmkRzj0LHU0FzqhDG",
  boosterFactorLinkersLode: "U2FsdGVkX1/JDUUUoTFpuDi548f2Nw8MJ+kFwD7lK9s=",
  boosterDateLinkersLode: "U2FsdGVkX1+1jYOChIfzGgtJ8+CYCN41Qnrujq/tmeBpUVrZI/XX+Izuhc7SWCJw",
  boosterFactorRecursiveReflection: "U2FsdGVkX1+tRjjR8AI/6D0EauMuA9vRZ2mhjxdyRH4=",
  boosterDateRecursiveReflection: "U2FsdGVkX1+ntCAllKE7umlYpfLgi6KtRB1O9iIutU2MPIDqHfnh6bx/q9KYtff7",
  boosterFactorSynapticSurge: "U2FsdGVkX19IbcaQ97T2TGNdFr1ftvq9+6gltahvc5Q=",
  boosterDateSynapticSurge: "U2FsdGVkX18IPK2hUqT98pqhjle4ubA7nJlgJ9ZhK/r8N9xzje3oyMcNCw4OGL9F",
  boosterFactorTitleTitan: "U2FsdGVkX18GwzghTQZSY0ZudqWBwCMIk3OMT7chsLM=",
  boosterDateTitleTitan: "U2FsdGVkX19JJyIYYraGdEfbK6CGaGUL9TtlH8bzpJ5mLK+Wr1pgfQqvWCBBLJVo",
  boosterFactorPrecisionPrism: "U2FsdGVkX1+NMV80rm7GA53C6whlwKdSxCAiNmbeECs=",
  boosterDatePrecisionPrism: "U2FsdGVkX18OwTBbWqLLFPE4CwWAFHbjA050EzAa/O77pH0RCXhVXyvfQUN0f+Yi",
  boosterFactorHyperlinkHarmony: "U2FsdGVkX1/G9+A9JIpqpqBbGDCzhITDzbD9VU30gOQ=",
  boosterDateHyperlinkHarmony: "U2FsdGVkX1+qUnz6LN+9w8gDvpVPPOmgy3BNAOa/mm1OwjUaVX05LqorO2wrXLho",
  boosterFactorEphemeralEuphoria: "U2FsdGVkX1+pxM+VURwTAj8eAAGOsb2ERuh1Lh7ZLnE=",
  boosterDateEphemeralEuphoria: "U2FsdGVkX19pJpw2a3f0SvfpjfUS7z9MlPAuqASwQFJBLjWjyHUj5qYGfN6rb/SY",
  streakbooster: "U2FsdGVkX1/lU8z1269GCh/eAbXcmvMeI8MyfL7nzEI=",
  streakboosterDate: "U2FsdGVkX1+DBUBmrzXuSiZlRp1jO9/UJv8sTTfeSNI=",
  boosterUseCount: "U2FsdGVkX1/VWmniuhXR6FAx6PTBe9NS+tCv9XbK32Q=",
  boosterUseCountTemporalTweaker: "U2FsdGVkX1/r2JjeQiWJArz03En3WZO2MecJZ4KA/U8=",
  boosterUseCountPerpetualProgress: "U2FsdGVkX19mSQeU3SjWhwKUV8GSLHCNudf0Va+k/fM=",
  boosterUseCountStrategicSynapses: "U2FsdGVkX1+UVz9evvy+9VJbfufBy5Mv00A9OWGo3M8=",
  boosterUseCountAcceleratedAcquisition: "U2FsdGVkX1+6INJ1upXkyApU2t0oUX6Gm33yStXTsGM=",
  boosterUseCountLinkersLode: "U2FsdGVkX1/PqKkLgWb+qSm+MEYScKaN9dc/2O1NIA4=",
  boosterUseCountEffortlessExpansion: "U2FsdGVkX18tZ1UMsNevgp15doSbDNgb1iBVPCsojmk=",
  boosterUseCountrEcursiveReflection: "U2FsdGVkX1/cRMNf0xd92ddkyEikcfZT80KpSV2reXo=",
  boosterUseCountSynapticSurge: "U2FsdGVkX19aUtz8wGpSpuK6PV1rlJqA947SCgGrrnY=",
  boosterUseCountInspirationInfusion: "U2FsdGVkX1/1FifR678wktsWCIAOauzON9hVqMeGiek=",
  boosterUseCountTitleTitan: "U2FsdGVkX18J9uTJ25ZVaqnEMsZ/Dn1UQzN7DMvN0ug=",
  boosterUseCountPrecisionPrism: "U2FsdGVkX18/kncuSG4klFZ6LpDHkp80wmp2U0knrr4=",
  boosterUseCountHyperlinkHarmony: "U2FsdGVkX1+R4fU/oDIdb34kCIedxc4165PX3oOnCLc=",
  boosterUseCountEphemeralEuphoria: "U2FsdGVkX191hJANYr8JHI1bn1YRrJfBh0cQ0vgkKRM=",
  counterMajurityCalc: "U2FsdGVkX19TLndonGY4Y8vHuZFfLJ5gZ2t/CLprh0o=",
  counterMajurityCalcInitial: "U2FsdGVkX1+2Qii8qhFSqrNqmKR1Wh6saEjYbwPdi8Q="
};
var GamificationPluginSettings = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
    let settings = Object.assign({}, defaultSettings);
  }
  display() {
    const { containerEl } = this;
    containerEl.addClass("excalidraw-settings");
    this.containerEl.empty();
    const coffeeDiv = containerEl.createDiv("coffee");
    coffeeDiv.addClass("ex-coffee-div");
    const coffeeLink = coffeeDiv.createEl("a", {
      href: "https://ko-fi.com/andreastrebing"
    });
    const coffeeImg = coffeeLink.createEl("img", {
      attr: {
        src: "https://cdn.ko-fi.com/cdn/kofi3.png?v=3"
      }
    });
    coffeeImg.height = 45;
    containerEl.createEl("h2", { text: "Gamify your PKM - Settings" });
    console.log("settings called");
    new import_obsidian.Setting(containerEl).setName("#tags to ignore").setDesc('enter tags without # and separate with ", ".\nInclude nested tags.').addText((text) => text.setPlaceholder("Enter your tag1, tag2/subtag, \u2026").setValue(this.plugin.settings.tagsExclude).onChange(async (value) => {
      this.plugin.settings.tagsExclude = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("folder to ignore").setDesc('enter folder whichs content shall be ignored. Separate with ", ".').addText((text) => text.setPlaceholder("Enter your folder1, folder2, \u2026").setValue(this.plugin.settings.folderExclude).onChange(async (value) => {
      this.plugin.settings.folderExclude = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Profile Page Name").setDesc("you can change here the name of your profile page if you like.").addText((text) => text.setPlaceholder("name").setValue(this.plugin.settings.avatarPageName).onChange(async (value) => {
      this.plugin.settings.avatarPageName = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h2", { text: "Other Settings" });
    new import_obsidian.Setting(containerEl).setName("Disable Init Command").setDesc("you can remove the init command from command prompt by switching off.\nrestart needed.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableInitCommand).onChange((value) => {
        this.plugin.settings.enableInitCommand = value;
        this.plugin.saveData(this.plugin.settings);
      })
    );
    new import_obsidian.Setting(containerEl).setName("limit the visible month in the chart on your avatar page: " + this.plugin.settings.avatarPageName).setDesc("if 0, all month will be shown. Enter a number how many month shall be shown.").addText((text) => text.setPlaceholder("Number of Month to show").setValue(this.plugin.settings.chartReduzierungMonate.toString()).onChange(async (value) => {
      this.plugin.settings.chartReduzierungMonate = parseInt(value);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Progressive Summarization").setDesc("you can change which formatting you use for Layer 2 and 3.").addText((text) => text.setPlaceholder("Layer 2 is usually **").setValue(this.plugin.settings.progressiveSumLayer2).onChange(async (value) => {
      this.plugin.settings.progressiveSumLayer2 = value;
      await this.plugin.saveSettings();
    })).addText((text) => text.setPlaceholder("Layer 3 is usually ==").setValue(this.plugin.settings.progressiveSumLayer3).onChange(async (value) => {
      this.plugin.settings.progressiveSumLayer3 = value;
      await this.plugin.saveSettings();
    }));
  }
};

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/isDate/index.js
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

// node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/defaultOptions/index.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters = {
  // Year
  y: function y(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var lightFormatters_default = formatters;

// node_modules/date-fns/esm/_lib/format/formatters/index.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters2 = {
  // Era
  G: function G(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y2(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters_default.y(date, token);
  },
  // Local week-numbering year
  Y: function Y(date, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function Q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M2(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters_default.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w(date, token, localize2, options) {
    var week = getUTCWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function I(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function d2(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters_default.d(date, token);
  },
  // Day of year
  D: function D(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function E(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a2(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h2(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters_default.h(date, token);
  },
  // Hour [0-23]
  H: function H2(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters_default.H(date, token);
  },
  // Hour [0-11]
  K: function K(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function k(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function m2(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters_default.m(date, token);
  },
  // Second
  s: function s2(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters_default.s(date, token);
  },
  // Fraction of second
  S: function S2(date, token) {
    return lightFormatters_default.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
var formatters_default = formatters2;

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters_default = longFormatters;

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
var formatDistance_default = formatDistance;

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
var formatLong_default = formatLong;

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
var formatRelative_default = formatRelative;

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
var localize_default = localize;

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
var match_default = match;

// node_modules/date-fns/esm/locale/en-US/index.js
var locale = {
  code: "en-US",
  formatDistance: formatDistance_default,
  formatLong: formatLong_default,
  formatRelative: formatRelative_default,
  localize: localize_default,
  match: match_default,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
var en_US_default = locale;

// node_modules/date-fns/esm/_lib/defaultLocale/index.js
var defaultLocale_default = en_US_default;

// node_modules/date-fns/esm/format/index.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale_default;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  var matched = input.match(escapedStringRegExp);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}

// src/constants.ts
var pointsNoteMajurity = 100;
var pointsMajurity = 10;
var pointsForDailyChallenge = 500;
var pointsForWeeklyChallenge = 2e3;
var streakboosterDecrease = 0.2;
var streakboosterIncreaseDaily = 0.1;
var streakboosterIncreaseWeekly = 1;
var CryptoJS = require_crypto_js();
var secretKey = "2ZU^12y#QmNB5$yEin5^";
var avatarInitContent = `# Avatar

|        |     |
| ------ | --- |
| Level  | 0    |
| Points | 0    |
^levelAndPoints	
\`\`\`chart
type: bar
labels: [Expririence]
series:
  - title: points reached
    data: [0]
  - title: points to earn to level up
    data: [1000]
xMin: 0
xMax: 1000
tension: 0.2
width: 40%
labelColors: false
fill: false
beginAtZero: false
bestFit: false
bestFitTitle: undefined
bestFitNumber: 0
stacked: true
indexAxis: y
xTitle: "progress"
legend: false
\`\`\`

|                    |       |
| ------------------ | ----- |
| **booster factor** | **0** |
^boosterFactor

|             |     |       |
| ----------- | --- | ----- |
| **daily Notes** | *500EP* | **0/2** |
^dailyNotesChallenge

|  |     ||
| ---- | --- | --- |
| **weekly Notes** | *2000EP*     |  **0/7**   |
^weeklyNotesChallenge

\`\`\`chart
type: bar
labels: [Notes]
series:
  - title: days done in a row
    data: [0]
  - title: days to do in a row
    data: [7]
xMin: 0
xMax: 7
tension: 0.2
width: 40%
labelColors: false
fill: false
beginAtZero: false
bestFit: false
bestFitTitle: undefined
bestFitNumber: 0
stacked: true
indexAxis: y
xTitle: "days"
legend: false
\`\`\`

| Level | Count |
| :---: | :---: |
| Majurity 5 |\`$=dv.pages().where(p => [5, '5', '5\u27A1\uFE0F', '5\u2B07\uFE0F', '5\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 4 |\`$=dv.pages().where(p => [4, '4', '4\u27A1\uFE0F', '4\u2B07\uFE0F', '4\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 3 |\`$=dv.pages().where(p => [3, '3', '3\u27A1\uFE0F', '3\u2B07\uFE0F', '3\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 2 |\`$=dv.pages().where(p => [2, '2', '2\u27A1\uFE0F', '2\u2B07\uFE0F', '2\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 1 |\`$=dv.pages().where(p => [1, '1', '1\u27A1\uFE0F', '1\u2B07\uFE0F', '1\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 0 |\`$=dv.pages().where(p => [0, '0', '0\u27A1\uFE0F', '0\u2B07\uFE0F', '0\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|


\`\`\`chart
type: bar
labels: [0, 0, 0]
series:
  - title: modified
    data: [0, 0, 0]
tension: 0.2
width: 80 %
labelColors: false
fill: false
beginAtZero: false
bestFit: false
bestFitTitle: undefined
bestFitNumber: 0
stacked: true
yTitle: "Number of Notes"
xTitle: "Months"
xMin: 0
\`\`\`
^ChartMonth


### Badges
#### achieved


#### outstanding
level 5: *Enlightened Novice*
level 10: *Curious Connoisseur*
level 20: *Brainiac Trailblazer*
level 27: *Scholarly Trailblazer*
level 35: *Info Ninja Master*
level 42: *Wise Owl Guru*
level 50: *Einstein Incarnate*
level 60: *Mastermind Sage*
level 75: *Cerebral Maestro*
level 82: *Zen Knowledge Keeper*
level 90: *Grand Archivist Overlord*
level 100: *Omniscient Sage of Everything*



### **note-maturity = 5**
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 5 or note-maturity = "5" or note-maturity = "5\u27A1\uFE0F" or note-maturity = "5\u2B06\uFE0F" or note-maturity = "5\u2B07\uFE0F"
\`\`\`

### **note-maturity = 4**
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 4 or note-maturity = "4" or note-maturity = "4\u27A1\uFE0F" or note-maturity = "4\u2B06\uFE0F" or note-maturity = "4\u2B07\uFE0F"
\`\`\`

### note-maturity = 3
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 3 or note-maturity = "3" or note-maturity = "3\u27A1\uFE0F" or note-maturity = "3\u2B06\uFE0F" or note-maturity = "3\u2B07\uFE0F"
\`\`\`

### note-maturity = 2
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 2 or note-maturity = "2" or note-maturity = "2\u27A1\uFE0F" or note-maturity = "2\u2B06\uFE0F" or note-maturity = "2\u2B07\uFE0F"
\`\`\`

### note-maturity = 1
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 1 or note-maturity = "1" or note-maturity = "1\u27A1\uFE0F" or note-maturity = "1\u2B06\uFE0F" or note-maturity = "1\u2B07\uFE0F"
\`\`\`

### note-maturity = 0
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 0 or note-maturity = "0" or note-maturity = "0\u27A1\uFE0F" or note-maturity = "0\u2B06\uFE0F" or note-maturity = "0\u2B07\uFE0F"
\`\`\`
`;
var listOfUseableBoostersToBeShown = ["Perpetual Progress", "Title Titan", "Precision Prism"];
var listOfUseableIngredientsToBeShown = ["Connection Crystal", "Insight Prism", "Creative Catalyst", "Precision Lens"];
var chanceToEarnIngredient = 0.5;
var elements = [
  { shortName: "S2", name: "Connection Crystal", varName: "connectionCrystal" },
  { shortName: "S4", name: "Insight Prism", varName: "insightPrism" },
  { shortName: "S7", name: "Creative Catalyst", varName: "creativeCatalyst" },
  { shortName: "S8", name: "Precision Lens", varName: "precisionLens" },
  { shortName: "S1", name: "Nexus Node", varName: "nexusNode" },
  { shortName: "S3", name: "Mastery Scroll", varName: "masteryScroll" },
  { shortName: "S5", name: "Reflective Essence", varName: "reflectiveEssence" },
  { shortName: "S6", name: "Amplification Crystal", varName: "amplificationCrystal" }
];
var boosterRecipes = [
  { boosterUseCountName: "boosterUseCountTemporalTweaker", boosterRunTime: 0, boosterCooldown: 0, boosterDate: "", boosterSwitch: "", varname: "temporalTweaker", name: "Temporal Tweaker", incredients: ["2xS1", "1xS6"], description: "Temporal Tweaker: reset the cooldown phase for a booster your choice" },
  { boosterUseCountName: "boosterUseCountPerpetualProgress", boosterRunTime: 4 * 60, boosterCooldown: 36 * 60, boosterDate: "boosterDatePerpetualProgress", boosterSwitch: "boosterFactorPerpetualProgress", varname: "perpetualProgress", name: "Perpetual Progress", incredients: ["2xS2", "1xS4"], description: "Perpetual Progress: get 3 times points an all your actions for the next 4 hours. You can use Perpetual Progress every three days, if you have the ingredients to craft it." },
  { boosterUseCountName: "boosterUseCountStrategicSynapses", boosterRunTime: 4 * 60, boosterCooldown: 120 * 60, boosterDate: "boosterDateStrategicSynapses", boosterSwitch: "boosterFactorStrategicSynapses", varname: "strategicSynapses", name: "Strategic Synapses", incredients: ["3xS1", "2xS2"], description: "Strategic Synapses: gain 3 times EP for all actions on Map Of Content ratings for the next 4 hours. This booster has a cooldown time of 5 days." },
  { boosterUseCountName: "boosterUseCountAcceleratedAcquisition", boosterRunTime: 0, boosterCooldown: 36 * 60, boosterDate: "", boosterSwitch: "", varname: "acceleratedAcquisition", name: "Accelerated Acquisition", incredients: ["1xS3", "2xS4"], description: "Accelerated Acquisition: Use Accelerated Acquisition and collect much faster for the next 12 hours all sorts of ingredients when creating and improving notes" },
  { boosterUseCountName: "boosterUseCountLinkersLode", boosterRunTime: 3 * 60, boosterCooldown: 48 * 60, boosterDate: "boosterDateLinkersLode", boosterSwitch: "boosterFactorLinkersLode", varname: "linkersLode", name: "Linkers Lode", incredients: ["3xS2", "1xS1"], description: "Linkers Lode: collect extra points when creating chain of thoughts for the next 3 hours. (cooldown 2 days)" },
  { boosterUseCountName: "boosterUseCountEffortlessExpansion", boosterRunTime: 0, boosterCooldown: 480 * 60, boosterDate: "", boosterSwitch: "", varname: "effortlessExpansion", name: "Effortless Expansion", incredients: ["2xS3", "1xS6"], description: 'Effortless Expansion: Cast "Effortless Expansion" and lower the cap to the next level about 20% in the next 5 days. (Cooldown 20 days)' },
  { boosterUseCountName: "boosterUseCountrEcursiveReflection", boosterRunTime: 5 * 60, boosterCooldown: 36 * 60, boosterDate: "boosterDateRecursiveReflection", boosterSwitch: "boosterFactorRecursiveReflection", varname: "recursiveReflection", name: "Recursive Reflection", incredients: ["2xS4", "1xS5"], description: "Recursive Reflection: Improve your notes and get 5 times the points you get on normal condition for the next 5 hours. Cooldown 3 days." },
  { boosterUseCountName: "boosterUseCountSynapticSurge", boosterRunTime: 2 * 60, boosterCooldown: 36 * 60, boosterDate: "boosterDateSynapticSurge", boosterSwitch: "boosterFactorSynapticSurge", varname: "synapticSurge", name: "Synaptic Surge", incredients: ["2xS2", "1xS1"], description: 'Synaptic Surge: Link your ideas together, every increase in "linking maturity" pays out 20 times for the next 2 hours.' },
  { boosterUseCountName: "boosterUseCountInspirationInfusion", boosterRunTime: 0, boosterCooldown: 48 * 60, boosterDate: "", boosterSwitch: "", varname: "inspirationInfusion", name: "Inspiration Infusion", incredients: ["2xS7", "1xS1"], description: "Inspiration Infusion: Increase the frequency to get helpful prompts to power up you personal knowledge management for the next 2 days." },
  { boosterUseCountName: "boosterUseCountTitleTitan", boosterRunTime: 3 * 60, boosterCooldown: 36 * 60, boosterDate: "boosterDateTitleTitan", boosterSwitch: "boosterFactorTitleTitan", varname: "titleTitan", name: "Title Titan", incredients: ["2xS8", "1xS7"], description: "Title Titan: Quadro your points when making your note title more to the point expressing the idea of your note for the next 3 hours." },
  { boosterUseCountName: "boosterUseCountPrecisionPrism", boosterRunTime: 3 * 60, boosterCooldown: 36 * 60, boosterDate: "boosterDatePrecisionPrism", boosterSwitch: "boosterFactorPrecisionPrism", varname: "precisionPrism", name: "Precision Prism", incredients: ["2xS8", "1xS2"], description: 'Precision Prism: 4 times the points when increasing the "note length majurity" for a note the next 3 hours.' },
  { boosterUseCountName: "boosterUseCountHyperlinkHarmony", boosterRunTime: 3 * 60, boosterCooldown: 36 * 60, boosterDate: "boosterDateHyperlinkHarmony", boosterSwitch: "boosterFactorHyperlinkHarmony", varname: "hyperlinkHarmony", name: "Hyperlink Harmony", incredients: ["2xS2", "1xS6"], description: 'Hyperlink Harmony: Get for "Inlink majurity" AND "outlink majurity" improvements 5 times the point the next 3 hours.' },
  { boosterUseCountName: "boosterUseCountEphemeralEuphoria", boosterRunTime: 2 * 60, boosterCooldown: 2160 * 60, boosterDate: "boosterDateEphemeralEuphoria", boosterSwitch: "boosterFactorEphemeralEuphoria", varname: "ephemeralEuphoria", name: "Ephemeral Euphoria", incredients: ["1000xSX"], description: "Unearth the hidden potential within your knowledge repository with the Ephemeral Euphoria booster. For a fleeting two-hour window, your notes will resonate with an extraordinary vitality, allowing you to earn points at an astonishing rate. Seize this moment of boundless opportunity and watch your knowledge flourish like never before! Be aware, you need in sum 1000 ingrediments to craft, ingrediments will be taken from all pots." }
];

// src/majuritycalculation.ts
var fs = __toESM(require("fs"));
var path = __toESM(require("path"));
function rateProgressiveSummarization(charCountTotal, layer2count, layer3count) {
  const percentLayer2 = layer2count * 100 / charCountTotal;
  const percentLayer3 = layer3count * 100 / layer2count;
  var layer2majurity = 0;
  var layer3majurity = 0;
  var majurity = 0;
  if (charCountTotal < 3e3) {
    majurity = 0;
  } else {
    if (percentLayer2 == 0) {
      layer2majurity = 0;
    } else if (percentLayer2 <= 10) {
      layer2majurity = 5;
    } else if (percentLayer2 <= 20) {
      layer2majurity = 4;
    } else if (percentLayer2 <= 30) {
      layer2majurity = 3;
    } else if (percentLayer2 <= 40) {
      layer2majurity = 2;
    } else if (percentLayer2 <= 40) {
      layer2majurity = 1;
    } else {
      layer2majurity = 0;
    }
    if (layer3count == 0) {
      layer3majurity = 0;
    } else if (percentLayer3 <= 10) {
      layer3majurity = 5;
    } else if (percentLayer3 <= 20) {
      layer3majurity = 4;
    } else {
      layer3majurity = 0;
    }
    if (layer2majurity == 1 && layer3majurity == 0) {
      majurity = 1;
    } else if (layer2majurity == 2 && layer3majurity == 0) {
      majurity = 2;
    } else if (layer2majurity >= 3 && layer3majurity == 0) {
      majurity = 3;
    } else if ((layer2majurity == 3 || layer2majurity == 4) && (layer3majurity == 4 || layer3majurity == 5)) {
      majurity = 4;
    } else if (layer2majurity == 5 && layer3majurity == 5) {
      majurity = 5;
    } else {
      majurity = 0;
    }
  }
  return majurity;
}
function countLayer2AndLayer3Characters(content, filename, layer2, layer3) {
  const filenameWithoutExtension = filename;
  const strippedContent = content.replace(/[*_~`]/g, "");
  const headingRegex = /^(#+)\s(.*)$/gm;
  const contentWithoutHeadings = strippedContent.replace(headingRegex, (match2, p1, p2) => {
    if (p2 === filenameWithoutExtension) {
      return "";
    }
    return match2;
  });
  const metadataRegex = /^---[\s\S]*?---/gm;
  const contentWithoutMetadata = contentWithoutHeadings.replace(metadataRegex, "");
  const tagRegex = /#[^\s]+/g;
  const contentWithoutTags = contentWithoutMetadata.replace(tagRegex, "");
  const linkRegex = /\[.*?\]\(.*?\)|\[\[.*?\]\]/g;
  const contentWithoutLinks = contentWithoutTags.replace(linkRegex, "");
  const filteredContent = contentWithoutLinks.split("\n").filter((line) => line.trim() !== "").filter((line) => line.trim() !== "---").join("\n");
  const charCount = filteredContent.length;
  let highlightedCount = 0;
  let boldCount = 0;
  var layer2exclude = "=";
  var layer3exclude = "\\*";
  if (layer3 == "**") {
    layer3 = "\\*\\*";
    layer3exclude = "\\*";
    layer2exclude = "=";
  }
  if (layer2 == "**") {
    layer2 = "\\*\\*";
    layer3exclude = "=";
    layer2exclude = "\\*";
  }
  const highlightRegex = new RegExp(`${layer2}[^${layer2exclude}]+${layer2}`, "g");
  const boldRegex = new RegExp(`${layer3}[^${layer3exclude}]+${layer3}`, "g");
  const highlightedMatches = content.match(highlightRegex);
  if (highlightedMatches) {
    highlightedCount = highlightedMatches.join("").length - highlightedMatches.length * 4;
    const layer2String = highlightedMatches.join("");
    const boldMatches = layer2String.match(boldRegex);
    if (boldMatches) {
      boldCount = boldMatches.join("").length - boldMatches.length * 4;
    }
  }
  return { charCount, highlightedCount, boldCount };
}
function rateLevelOfMaturity(noteLength, lengthOfTitle, Inlinks, outgoingLinks, progressiveSumMajurity) {
  var lengthMajurity = 0;
  if (noteLength >= progressiveSumMajurity) {
    lengthMajurity = noteLength;
  } else {
    lengthMajurity = progressiveSumMajurity;
  }
  const totalWeight = lengthMajurity + lengthOfTitle + Inlinks + outgoingLinks;
  const averageWeight = totalWeight / 5;
  if (averageWeight < 0.5) {
    return 0;
  } else if (averageWeight <= 1) {
    return 1;
  } else if (averageWeight <= 2) {
    return 2;
  } else if (averageWeight <= 3) {
    return 3;
  } else if (averageWeight <= 3.5) {
    return 4;
  } else if (averageWeight <= 4) {
    return 5;
  } else {
    return 0;
  }
}
function rateOutlinks(outlinks) {
  if (outlinks < 2) {
    return 0;
  } else if (outlinks < 3) {
    return 1;
  } else if (outlinks < 5) {
    return 4;
  } else if (outlinks < 9) {
    return 5;
  } else if (outlinks < 11) {
    return 3;
  } else if (outlinks < 12) {
    return 1;
  } else {
    return 0;
  }
}
function rateInlinks(numInlinks) {
  if (numInlinks == 0) {
    return 0;
  } else if (numInlinks < 4) {
    return 1;
  } else if (numInlinks < 8) {
    return 2;
  } else if (numInlinks < 11) {
    return 3;
  } else if (numInlinks < 16) {
    return 4;
  } else if (numInlinks >= 16 && numInlinks < 500) {
    return 5;
  } else {
    return 0;
  }
}
function rateDirection(ratingCurrent, ratingNew) {
  let rating = "";
  if (parseInt(ratingCurrent, 10) > ratingNew) {
    rating = ratingNew + "\u2B07\uFE0F";
  } else if (parseInt(ratingCurrent, 10) < ratingNew) {
    rating = ratingNew + "\u2B06\uFE0F";
  } else if (parseInt(ratingCurrent, 10) == ratingNew) {
    rating = ratingNew + "\u27A1\uFE0F";
  } else {
    rating = ratingNew + "";
  }
  return rating;
}
function rateLengthFilename(filename) {
  if (filename.length < 30) {
    return 0;
  } else if (filename.length < 80) {
    return 1;
  } else if (filename.length < 100) {
    return 3;
  } else if (filename.length < 150) {
    return 5;
  } else if (filename.length < 190) {
    return 4;
  } else if (filename.length < 210) {
    return 2;
  } else if (filename.length < 250) {
    return 1;
  } else {
    return 0;
  }
}
function rateNoteLength(contenlength) {
  if (contenlength < 200) {
    return 0;
  } else if (contenlength < 550) {
    return 4;
  } else if (contenlength < 1e3) {
    return 5;
  } else if (contenlength < 1200) {
    return 4;
  } else if (contenlength < 2e3) {
    return 3;
  } else if (contenlength < 2500) {
    return 2;
  } else if (contenlength < 3e3) {
    return 1;
  } else {
    return 0;
  }
}
function getNumberOfOutlinks(activeFile) {
  var _a;
  if (!activeFile) {
    return 0;
  }
  const inlinks = (_a = app.metadataCache.getFileCache(activeFile)) == null ? void 0 : _a.links;
  return inlinks ? Object.keys(inlinks).length : 0;
}
function countCharactersInActiveFile(content, filename) {
  const filenameWithoutExtension = filename;
  const strippedContent = content.replace(/[*_~`]/g, "");
  const headingRegex = /^(#+)\s(.*)$/gm;
  const contentWithoutHeadings = strippedContent.replace(headingRegex, (match2, p1, p2) => {
    if (p2 === filenameWithoutExtension) {
      return "";
    }
    return match2;
  });
  const metadataRegex = /^---[\s\S]*?---/gm;
  const contentWithoutMetadata = contentWithoutHeadings.replace(metadataRegex, "");
  const tagRegex = /#[^\s]+/g;
  const contentWithoutTags = contentWithoutMetadata.replace(tagRegex, "");
  const linkRegex = /\[.*?\]\(.*?\)|\[\[.*?\]\]/g;
  const contentWithoutLinks = contentWithoutTags.replace(linkRegex, "");
  const filteredContent = contentWithoutLinks.split("\n").filter((line) => line.trim() !== "").filter((line) => line.trim() !== "---").join("\n");
  const charCount = filteredContent.length;
  return charCount;
}
function count_inlinks(file) {
  const { app: { metadataCache: { resolvedLinks } } } = this;
  const { path: path2 } = file;
  const sumInlinks = Object.values(resolvedLinks).map((val) => {
    var _a;
    return (_a = val[path2]) != null ? _a : 0;
  }).reduce((left, right) => left + right, 0);
  return sumInlinks;
}
var getFileCountMap = async (app2, excludeTag, excludeFolder) => {
  const { vault } = app2;
  let excludedSubstrings = [];
  if (excludeTag == void 0) {
    excludedSubstrings = [];
  } else {
    excludedSubstrings = excludeTag.split(", ");
  }
  let excludedFolders = [];
  if (excludeFolder == void 0) {
    excludedFolders = [];
  } else {
    excludedFolders = excludeFolder.split(", ");
  }
  excludedFolders.push(".obsidian", ".trash");
  const fileCountMap = /* @__PURE__ */ new Map();
  const files = await vault.getMarkdownFiles();
  for (const file of files) {
    const fileName = file.basename;
    const currentCount = fileCountMap.get(fileName) || 0;
    fileCountMap.set(fileName, currentCount + 1);
    const fileContents = await app2.vault.read(file);
    if (!excludedSubstrings.some((substring) => fileContents.includes(substring)) && !excludedFolders.some((folder) => file.path.includes(folder))) {
      const fileName2 = file.basename;
      const currentCount2 = fileCountMap.get(fileName2) || 0;
      fileCountMap.set(fileName2, currentCount2 + 1);
    }
  }
  return fileCountMap;
};
var getFileMap = async (app2, excludeTag, excludeFolder) => {
  const { vault } = app2;
  let excludedSubstrings = [];
  if (excludeTag == void 0) {
    excludedSubstrings = [];
  } else {
    excludedSubstrings = excludeTag.split(", ");
  }
  let excludedFolders = [];
  if (excludeFolder == void 0) {
    excludedFolders = [];
  } else {
    excludedFolders = excludeFolder.split(", ");
  }
  excludedFolders.push(".obsidian", ".trash");
  let fileArray = [];
  const files = await vault.getMarkdownFiles();
  for (const file of files) {
    const fileContents = await app2.vault.read(file);
    if ((!excludedSubstrings.some((substring) => fileContents.includes(substring)) || excludeTag.length === 0) && !excludedFolders.some((folder) => file.path.includes(folder))) {
      fileArray.push(file);
    }
  }
  return fileArray;
};

// src/creatmodchartcalculation.ts
function findEarliestModifiedFile(files) {
  let earliestModifiedFile = files[0];
  for (const file of files) {
    if (file.stat.mtime < earliestModifiedFile.stat.mtime) {
      earliestModifiedFile = file;
    }
  }
  return earliestModifiedFile;
}
function monthsBetween(startMonth, endMonth) {
  let months = endMonth.getMonth() - startMonth.getMonth() + 1;
  if (endMonth.getFullYear() > startMonth.getFullYear()) {
    months += (endMonth.getFullYear() - startMonth.getFullYear()) * 12;
  }
  return months;
}
function getModificationDates(files) {
  const creationDates = [];
  for (const file of files) {
    creationDates.push(new Date(file.stat.mtime));
  }
  return creationDates;
}
function createChartFormat(y_axis, countsStringMod, chartReduzierungMonate) {
  let monatsbegrenzung = null;
  if (chartReduzierungMonate == 0) {
    monatsbegrenzung = 0;
  } else {
    monatsbegrenzung = countsStringMod.split(",").length - chartReduzierungMonate;
  }
  return "```chart\ntype: bar\nlabels: [" + y_axis + "]\nseries:\n  - title: modified\n    data: [" + countsStringMod + ']\ntension: 0.2\nwidth: 80 %\nlabelColors: false\nfill: false\nbeginAtZero: false\nbestFit: false\nbestFitTitle: undefined\nbestFitNumber: 0\nstacked: true\nyTitle: "Number of Notes"\nxTitle: "Months"\nxMin: ' + monatsbegrenzung + "\n```";
}
async function replaceChartContent(avatarPageName, newContent) {
  const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
  if (existingFile == null) {
    console.log(`File ${avatarPageName}.md does not exist`);
    return;
  }
  const file = existingFile;
  const content = await app.vault.read(file);
  let reference = null;
  let end = null;
  let start = null;
  const lines = content.split("\n");
  for (let i2 = 0; i2 < lines.length; i2++) {
    const line = lines[i2].trim();
    if (line === "^ChartMonth") {
      if (reference === null) {
        reference = i2;
      }
    }
  }
  if (reference != null) {
    end = reference;
    start = reference - 19;
    const newLines = [...lines.slice(0, start), newContent, ...lines.slice(end)];
    await app.vault.modify(file, newLines.join("\n"));
  }
}

// src/badges.ts
function checkIfReceiveABadge(levelOld, levelNew) {
  const badgeLevels = [5, 10, 20, 27, 35, 42, 50, 60, 75, 82, 90, 100];
  let receiveBadge = false;
  for (let i2 = 0; i2 < badgeLevels.length; i2++) {
    if (levelOld < badgeLevels[i2] && levelNew >= badgeLevels[i2]) {
      receiveBadge = true;
    }
  }
  return receiveBadge;
}
function getBadgeForLevel(level, inform) {
  const badgeLevels = [5, 10, 20, 27, 35, 42, 50, 60, 75, 82, 90, 100];
  const badgeNames = [
    { name: "Enlightened Novice", description: "Huzzah! You've embarked on the path of knowledge and earned the title of 'Enlightened Novice.' The journey has just begun, and you're already radiating wisdom like a baby sun!", level: "level 5" },
    { name: "Curious Connoisseur", description: "Fantastic! You've embraced the wonders of learning and become a 'Curious Connoisseur.' Your appetite for knowledge is insatiable, like a bottomless bowl of ice cream!", level: "level 10" },
    { name: "Brainiac Trailblazer", description: "Bravo! As a 'Brainiac Trailblazer,' you've carved your way through a jungle of information and emerged victorious. Your intellect is a beacon shining brightly for others to follow!", level: "level 20" },
    { name: "Scholarly Trailblazer", description: "Impressive! You're now a 'Scholarly Trailblazer,' boldly venturing through a sea of knowledge with a compass of curiosity and a map of intellect!", level: "level 27" },
    { name: "Info Ninja Master", description: "Incredible! You've reached the pinnacle of stealthy knowledge management. As an 'Info Ninja Master,' you can snatch information from the shadows like a digital ninja!", level: "level 35" },
    { name: "Wise Owl Guru", description: "Whoo-hoo! You've achieved 'Wise Owl Guru' status. Your wisdom is legendary, and your hoots of knowledge echo through the forest of ignorance!", level: "level 42" },
    { name: "Einstein Incarnate", description: "Eureka! You've become an 'Einstein Incarnate,' pushing the boundaries of understanding and bending the fabric of knowledge to your will!", level: "level 50" },
    { name: "Mastermind Sage", description: "Magnificent! You've ascended to the rank of 'Mastermind Sage,' guiding the rivers of information and enlightening all who seek wisdom!", level: "level 60" },
    { name: "Cerebral Maestro", description: "Bravissimo! You're now a 'Cerebral Maestro,' conducting the symphony of knowledge with the finesse of a virtuoso conductor!", level: "level 75" },
    { name: "Zen Knowledge Keeper", description: "Serenity achieved! As a 'Zen Knowledge Keeper,' you maintain a tranquil mind while managing vast pools of knowledge with grace and poise.", level: "level 82" },
    { name: "Grand Archivist Overlord", description: "All hail the 'Grand Archivist Overlord!' You wield the knowledge of ages and hold the keys to unlock the gates of wisdom!", level: "level 90" },
    { name: "Omniscient Sage of Everything", description: "Congratulations, oh wise one! You've attained the highest level of enlightenment as the 'Omniscient Sage of Everything.' Your understanding knows no bounds, and your wisdom is as vast as the cosmos itself!", level: "level 100" }
  ];
  let index = 0;
  for (let i2 = 0; i2 < badgeLevels.length; i2++) {
    if (level >= badgeLevels[i2]) {
      index = i2;
    } else {
      break;
    }
  }
  return badgeNames[index];
}
function getBadgeForInitLevel(level) {
  const badgeLevels = [0, 3, 7, 15, 23, 30, 35, 42, 50, 60, 75, 82, 90, 100];
  const badgeNamesInit = [
    { name: "Lore Seeker Initiate", description: "Welcome to the journey of knowledge! As a 'Lore Seeker Initiate,' you've taken your first steps into the world of organized wisdom. Your quest has just begun, and with each note you make, you lay the foundation for a future rich with insights and understanding. Your journey starts here, and the path ahead is filled with potential and discovery.", level: "level 1" },
    { name: "Lore Apprentice", description: "You've hit the ground running with your existing knowledge treasures! You're already an 'Lore Apprentice,' armed with a wealth of wisdom and ready to shape it further.", level: "level 3" },
    { name: "Savvy Scholar", description: "Your existing notes have given you a head start! You're now a 'Savvy Scholar,' confidently diving into the sea of information with a treasure trove of insights.", level: "level 7" },
    { name: "Sage's Foundation", description: "Building upon your pre-existing notes, you're establishing the 'Sage's Foundation' for an even grander edifice of knowledge. Your groundwork is impressive!", level: "level 15" },
    { name: "Wisdom Seedling", description: "Your existing notes have nurtured the growth of a 'Wisdom Seedling.' You're cultivating your garden of knowledge with care and patience.", level: "level 23" },
    { name: "Prodigious Preparer", description: "Thanks to your prior efforts, you're a 'Prodigious Preparer,' standing tall among your notes and ready to conquer new realms of understanding.", level: "level 30" },
    { name: "Epic Epiphany Explorer", description: "Your past notes have led you to the grand 'Epic Epiphany Explorer' status! You've already been down a few rabbit holes and come out with dazzling discoveries.", level: "level 35" },
    { name: "Lore Luminary", description: "With your existing notes illuminating your path, you've become a 'Lore Luminary,' shining light on the mysteries of the universe, one idea at a time.", level: "level 42" },
    { name: "Scribe of the Ancients", description: "Your mastery of personal knowledge management has elevated you to the esteemed rank of the 'Scribe of the Ancients.' Your existing notes have transformed into treasures, bridging the gap between old wisdom and new discoveries.", level: "level 50" },
    { name: "Eureka Maestro", description: "Armed with your existing notes, you're the 'Eureka Maestro,' composing a symphony of insights that harmonize with the melody of discovery.", level: "level 60" },
    { name: "Chronicles Champion", description: "With your existing notes standing as a testament, you've ascended to the illustrious 'Chronicles Champion' level. Your journey through time's tapestry has brought forth a symphony of insights that harmonize past and present.", level: "level 75" },
    { name: "The Curious Cartographer", description: "As 'The Curious Cartographer,' your existing notes have mapped out uncharted territories of understanding. Your curiosity knows no bounds, and your notes are the compass guiding your exploration.", level: "level 82" },
    { name: "Sultan of Synthesis", description: "Your existing notes have made you the 'Sultan of Synthesis.' You're the master weaver, threading together threads of information into a rich tapestry of insight.", level: "level 90" },
    { name: "Eternal Archivist", description: "At the pinnacle of personal knowledge mastery, you're now revered as the 'Eternal Archivist.' Your existing notes, carefully curated and nurtured, stand as immortal beacons, guiding seekers through the labyrinth of knowledge across ages.", level: "level 100" }
  ];
  let index = 0;
  for (let i2 = 0; i2 < badgeLevels.length; i2++) {
    if (level >= badgeLevels[i2]) {
      index = i2;
    } else {
      break;
    }
  }
  return badgeNamesInit[index];
}

// src/levels.ts
var levelData = [
  { points: 0, level: 0, pointsNext: 0 },
  { points: 0, level: 1, pointsNext: 1e3 },
  { points: 1e3, level: 2, pointsNext: 3e3 },
  { points: 3e3, level: 3, pointsNext: 7500 },
  { points: 7500, level: 4, pointsNext: 15e3 },
  { points: 15e3, level: 5, pointsNext: 3e4 },
  { points: 3e4, level: 6, pointsNext: 5e4 },
  { points: 5e4, level: 7, pointsNext: 8e4 },
  { points: 8e4, level: 8, pointsNext: 12e4 },
  { points: 12e4, level: 9, pointsNext: 17e4 },
  { points: 17e4, level: 10, pointsNext: 23e4 },
  { points: 23e4, level: 11, pointsNext: 3e5 },
  { points: 3e5, level: 12, pointsNext: 38e4 },
  { points: 38e4, level: 13, pointsNext: 47e4 },
  { points: 47e4, level: 14, pointsNext: 6e5 },
  { points: 6e5, level: 15, pointsNext: 75e4 },
  { points: 75e4, level: 16, pointsNext: 92e4 },
  { points: 92e4, level: 17, pointsNext: 111e4 },
  { points: 111e4, level: 18, pointsNext: 132e4 },
  { points: 132e4, level: 19, pointsNext: 155e4 },
  { points: 155e4, level: 20, pointsNext: 18e5 },
  { points: 18e5, level: 21, pointsNext: 207e4 },
  { points: 207e4, level: 22, pointsNext: 236e4 },
  { points: 236e4, level: 23, pointsNext: 267e4 },
  { points: 267e4, level: 24, pointsNext: 3e6 },
  { points: 3e6, level: 25, pointsNext: 335e4 },
  { points: 335e4, level: 26, pointsNext: 372e4 },
  { points: 372e4, level: 27, pointsNext: 411e4 },
  { points: 411e4, level: 28, pointsNext: 452e4 },
  { points: 452e4, level: 29, pointsNext: 495e4 },
  { points: 495e4, level: 30, pointsNext: 54e5 },
  { points: 54e5, level: 31, pointsNext: 587e4 },
  { points: 587e4, level: 32, pointsNext: 636e4 },
  { points: 636e4, level: 33, pointsNext: 687e4 },
  { points: 687e4, level: 34, pointsNext: 74e5 },
  { points: 74e5, level: 35, pointsNext: 795e4 },
  { points: 795e4, level: 36, pointsNext: 852e4 },
  { points: 852e4, level: 37, pointsNext: 911e4 },
  { points: 911e4, level: 38, pointsNext: 972e4 },
  { points: 972e4, level: 39, pointsNext: 1035e4 },
  { points: 1035e4, level: 40, pointsNext: 11e6 },
  { points: 11e6, level: 41, pointsNext: 1167e4 },
  { points: 1167e4, level: 42, pointsNext: 1236e4 },
  { points: 1236e4, level: 43, pointsNext: 1307e4 },
  { points: 1307e4, level: 44, pointsNext: 138e5 },
  { points: 138e5, level: 45, pointsNext: 1455e4 },
  { points: 1455e4, level: 46, pointsNext: 1532e4 },
  { points: 1532e4, level: 47, pointsNext: 1611e4 },
  { points: 1611e4, level: 48, pointsNext: 1692e4 },
  { points: 1692e4, level: 49, pointsNext: 1775e4 },
  { points: 1775e4, level: 50, pointsNext: 186e5 },
  { points: 186e5, level: 51, pointsNext: 1947e4 },
  { points: 1947e4, level: 52, pointsNext: 2036e4 },
  { points: 2036e4, level: 53, pointsNext: 2127e4 },
  { points: 2127e4, level: 54, pointsNext: 222e5 },
  { points: 222e5, level: 55, pointsNext: 2315e4 },
  { points: 2315e4, level: 56, pointsNext: 2412e4 },
  { points: 2412e4, level: 57, pointsNext: 2511e4 },
  { points: 2511e4, level: 58, pointsNext: 2612e4 },
  { points: 2612e4, level: 59, pointsNext: 2715e4 },
  { points: 2715e4, level: 60, pointsNext: 282e5 },
  { points: 282e5, level: 61, pointsNext: 2927e4 },
  { points: 2927e4, level: 62, pointsNext: 3036e4 },
  { points: 3036e4, level: 63, pointsNext: 3147e4 },
  { points: 3147e4, level: 64, pointsNext: 326e5 },
  { points: 326e5, level: 65, pointsNext: 3375e4 },
  { points: 3375e4, level: 66, pointsNext: 3492e4 },
  { points: 3492e4, level: 67, pointsNext: 3611e4 },
  { points: 3611e4, level: 68, pointsNext: 3732e4 },
  { points: 3732e4, level: 69, pointsNext: 3855e4 },
  { points: 3855e4, level: 70, pointsNext: 398e5 },
  { points: 398e5, level: 71, pointsNext: 4107e4 },
  { points: 4107e4, level: 72, pointsNext: 4236e4 },
  { points: 4236e4, level: 73, pointsNext: 4367e4 },
  { points: 4367e4, level: 74, pointsNext: 45e6 },
  { points: 45e6, level: 75, pointsNext: 4635e4 },
  { points: 4635e4, level: 76, pointsNext: 4772e4 },
  { points: 4772e4, level: 77, pointsNext: 4911e4 },
  { points: 4911e4, level: 78, pointsNext: 5052e4 },
  { points: 5052e4, level: 79, pointsNext: 5195e4 },
  { points: 5195e4, level: 80, pointsNext: 534e5 },
  { points: 534e5, level: 81, pointsNext: 5487e4 },
  { points: 5487e4, level: 82, pointsNext: 5636e4 },
  { points: 5636e4, level: 83, pointsNext: 5787e4 },
  { points: 5787e4, level: 84, pointsNext: 594e5 },
  { points: 594e5, level: 85, pointsNext: 6095e4 },
  { points: 6095e4, level: 86, pointsNext: 6252e4 },
  { points: 6252e4, level: 87, pointsNext: 6411e4 },
  { points: 6411e4, level: 88, pointsNext: 6572e4 },
  { points: 6572e4, level: 89, pointsNext: 6735e4 },
  { points: 6735e4, level: 90, pointsNext: 69e6 },
  { points: 69e6, level: 91, pointsNext: 7067e4 },
  { points: 7067e4, level: 92, pointsNext: 7236e4 },
  { points: 7236e4, level: 93, pointsNext: 7407e4 },
  { points: 7407e4, level: 94, pointsNext: 758e5 },
  { points: 758e5, level: 95, pointsNext: 7755e4 },
  { points: 7755e4, level: 96, pointsNext: 7932e4 },
  { points: 7932e4, level: 97, pointsNext: 8111e4 },
  { points: 8111e4, level: 98, pointsNext: 8292e4 },
  { points: 8292e4, level: 99, pointsNext: 8475e4 },
  { points: 8475e4, level: 100, pointsNext: 866e5 },
  { points: 866e5, level: 101, pointsNext: 8847e4 },
  { points: 8847e4, level: 102, pointsNext: 9036e4 },
  { points: 9036e4, level: 103, pointsNext: 9227e4 },
  { points: 9227e4, level: 104, pointsNext: 942e5 },
  { points: 942e5, level: 105, pointsNext: 9615e4 },
  { points: 9615e4, level: 106, pointsNext: 9812e4 },
  { points: 9812e4, level: 107, pointsNext: 10011e4 },
  { points: 10011e4, level: 108, pointsNext: 10212e4 },
  { points: 10212e4, level: 109, pointsNext: 10212e4 },
  { points: 10415e4, level: 110, pointsNext: 10615e4 }
];
function getLevelForPoints(points) {
  let level = levelData[0];
  for (const data of levelData) {
    if (points >= data.points) {
      level = data;
    } else {
      break;
    }
  }
  return level;
}
function statusPointsForLevel(targetLevel) {
  let statusPoints = 0;
  for (const data of levelData) {
    if (targetLevel == data.level && statusPoints == 0) {
      statusPoints = data.points;
    }
  }
  return statusPoints;
}

// src/randomNotificationText.ts
var messagesWeeklyChallenge = [
  "Seven days of note-taking? You're practically a note ninja turtle now! \u{1F422}\u{1F4DD} [X] points, cowabunga!",
  "You've just completed a week-long note-taking marathon! \u{1F3C3}\u200D\u2642\uFE0F\u{1F4DD} [X] points earned. Ready for the next lap?",
  "A whole week of notes? You're on fire! \u{1F525}\u{1F4DD} [X] points, keep the spark alive!",
  "Seven notes in seven days - that's like a note symphony! \u{1F3B6}\u{1F4DD} [X] points, maestro!",
  "You're on a seven-day note-taking fiesta! \u{1F389}\u{1F4DD} [X] points, keep the party going!",
  "Seven days, seven notes - You're like the James Bond of note-taking! \u{1F576}\uFE0F\u{1F4DD} [X] points, secret agent!",
  "You're officially a 'Note-A-Day' superhero! \u{1F9B8}\u200D\u2642\uFE0F\u{1F4DD} [X] points, capes optional!",
  "A whole week of notes? You've practically written a mini novel by now! \u{1F4DA}\u{1F4DD} [X] points, author status achieved!",
  "Seven days straight? You're the Usain Bolt of note-taking! \u{1F3C3}\u200D\u2642\uFE0F\u{1F4DD} [X] points, sprinting towards knowledge!",
  "You're on a seven-day note-taking spree! It's like a notes-plosion! \u{1F4A5}\u{1F4DD} [X] points, keep the fireworks coming!",
  "Seven days, seven notes - you're basically the Michael Jordan of note-taking! \u{1F3C0}\u{1F4DD} [X] points, slam dunk!",
  "A whole week of notes? You're the note-taking MVP! \u{1F3C6}\u{1F4DD} [X] points, keep scoring!",
  "You've just unlocked the 'Seven Day Note Fever' achievement! \u{1F31F}\u{1F4DD} [X] points, catch the fever!",
  "Seven days, seven notes - you're a note-taking rockstar! \u{1F3B8}\u{1F4DD} [X] points, keep jammin'!",
  "You're on a seven-day note-taking magic show! Now you see the notes, now you don't! \u{1F3A9}\u2728 [X] points, keep the magic alive!",
  "A whole week of notes? You're like a note-taking Jedi Master! \u{1F30C}\u2694\uFE0F [X] points, may the notes be with you!",
  "Seven days straight? You're the Tony Hawk of note-taking! \u{1F6F9}\u{1F4DD} [X] points, keep shredding!",
  "You're on a seven-day note-taking rollercoaster! Up and down, but always moving forward! \u{1F3A2}\u{1F4DD} [X] points, enjoy the ride!",
  "Seven days, seven notes - you're a note-taking DJ spinning knowledge beats! \u{1F3A7}\u{1F4DD} [X] points, drop the knowledge!",
  "You've just conquered the seven-day note-taking challenge! You're the note-taking Indiana Jones! \u{1F3F9}\u{1F4DD} [X] points, keep exploring!",
  "A whole week of notes? You're the note-taking Sherlock Holmes, solving knowledge mysteries! \u{1F50D}\u{1F4DD} [X] points, keep sleuthing!",
  "Seven days, seven notes - you're a note-taking Picasso, creating a masterpiece of knowledge! \u{1F3A8}\u{1F4DD} [X] points, keep painting!",
  "You're on a seven-day note-taking rocket ship! Destination: Infinite Knowledge! \u{1F680}\u{1F4DD} [X] points, enjoy the journey!",
  "Seven days straight? You're the note-taking MacGyver, turning information into solutions! \u{1F527}\u{1F4DD} [X] points, keep crafting!",
  "You're on a seven-day note-taking safari, exploring the wilds of knowledge! \u{1F418}\u{1F4DD} [X] points, keep exploring!",
  "Seven days, seven notes - you're a note-taking chef, cooking up a knowledge feast! \u{1F373}\u{1F4DD} [X] points, keep cooking!",
  "You've just unlocked the seven-day note-taking badge! You're the note-taking superhero we need! \u{1F9B8}\u200D\u2640\uFE0F\u{1F4DD} [X] points, keep saving the day!",
  "A whole week of notes? You're the note-taking Lewis and Clark, charting new territories of knowledge! \u{1F5FA}\uFE0F\u{1F4DD} [X] points, keep exploring!",
  "Seven days, seven notes - you're a note-taking DJ, dropping beats of wisdom! \u{1F3A7}\u{1F4DD} [X] points, keep spinning!",
  "You're on a seven-day note-taking treasure hunt, discovering gems of wisdom! \u{1F48E}\u{1F4DD} [X] points, keep hunting!",
  "Seven days straight? You're the note-taking ninja warrior, conquering the knowledge obstacle course! \u{1F94B}\u{1F4DD} [X] points, keep slaying!",
  "You're on a seven-day note-taking rocket ship! Destination: Infinite Knowledge! \u{1F680}\u{1F4DD} [X] points, enjoy the journey!",
  "Seven days, seven notes - you're a note-taking detective, solving cases of curiosity! \u{1F575}\uFE0F\u200D\u2642\uFE0F\u{1F4DD} [X] points, keep detecting!",
  "You've just unlocked the seven-day note-taking badge! You're the note-taking superhero we need! \u{1F9B8}\u200D\u2642\uFE0F\u{1F4DD} [X] points, keep saving the day!",
  "A whole week of notes? You're the note-taking pioneer, blazing trails through the forests of information! \u{1F332}\u{1F4DD} [X] points, keep pioneering!",
  "Seven days, seven notes - you're a note-taking DJ, dropping beats of wisdom! \u{1F3A7}\u{1F4DD} [X] points, keep spinning!",
  "You're on a seven-day note-taking treasure hunt, discovering gems of wisdom! \u{1F48E}\u{1F4DD} [X] points, keep hunting!",
  "Seven days straight? You're the note-taking ninja warrior, conquering the knowledge obstacle course! \u{1F94B}\u{1F4DD} [X] points, keep slaying!",
  "You're on a seven-day note-taking rollercoaster! Up and down, but always moving forward! \u{1F3A2}\u{1F4DD} [X] points, enjoy the ride!",
  "Seven days, seven notes - you're a note-taking DJ spinning knowledge beats! \u{1F3A7}\u{1F4DD} [X] points, drop the knowledge!",
  "You've just conquered the seven-day note-taking challenge! You're the note-taking Indiana Jones! \u{1F3F9}\u{1F4DD} [X] points, keep exploring!",
  "A whole week of notes? You're the note-taking Sherlock Holmes, solving knowledge mysteries! \u{1F50D}\u{1F4DD} [X] points, keep sleuthing!",
  "Seven days, seven notes - you're a note-taking Picasso, creating a masterpiece of knowledge! \u{1F3A8}\u{1F4DD} [X] points, keep painting!",
  "You're on a seven-day note-taking safari, exploring the wilds of knowledge! \u{1F418}\u{1F4DD} [X] points, keep exploring!",
  "Seven days straight? You're the Tony Hawk of note-taking! \u{1F6F9}\u{1F4DD} [X] points, keep shredding!",
  "You're on a seven-day note-taking rocket ship! Destination: Infinite Knowledge! \u{1F680}\u{1F4DD} [X] points, enjoy the journey!",
  "Seven days, seven notes - you're a note-taking ninja turtle now! \u{1F422}\u{1F4DD} [X] points, cowabunga!",
  "You've just completed a week-long note-taking marathon! \u{1F3C3}\u200D\u2642\uFE0F\u{1F4DD} [X] points earned. Ready for the next lap?",
  "A whole week of notes? You're on fire! \u{1F525}\u{1F4DD} [X] points, keep the spark alive!",
  "Seven notes in seven days - that's like a note symphony! \u{1F3B6}\u{1F4DD} [X] points, maestro!"
];
var twoNoteMessages = [
  "Boom! You just aced the 2-note tango! \u{1F389} [X] points in the pocket. Keep groovin'!",
  "Two notes in a day? You're officially a Note Ninja! \u{1F94B} [X] points earned. Rock on!",
  "High-five! You've conquered the 2-note rodeo! \u{1F920} [X] points earned. Yeehaw!",
  "Double trouble! Two notes in one day, you legend! \u{1F31F} [X] points, rockstar!",
  "You're on fire! Two notes in a day - what's your secret weapon? \u{1F525} [X] points!",
  "Bingo! Two notes in a day! You're on a roll! \u{1F680} [X] points earned. Keep it up!",
  "Kaboom! You just blew the 2-note challenge out of the water! \u{1F4A5} [X] points!",
  "You're officially a 2-note superstar! \u{1F31F} [X] points in the bag. Keep shining!",
  "Double up, double down! Two notes in one day - you're a rockstar! \u{1F3B8} [X] points!",
  "You've just joined the 2-note party! \u{1F973} [X] points earned. Let's keep dancing!",
  "Ka-ching! Two notes in a day! You're racking up those points! \u{1F4B0} [X] earned!",
  "You're a 2-note magician! \u{1F3A9}\u2728 [X] points earned. What's your next trick?",
  "Two notes? Nailed it! You're on a roll! \u{1F31F} [X] points earned. Keep it going!",
  "Abra-cadabra! Two notes appear! \u{1F3A9}\u2728 [X] points earned. Keep the magic alive!",
  "Double trouble, double the fun! Two notes in one day! \u{1F389} [X] points, superstar!",
  "You've just unlocked the 2-note achievement! \u{1F31F} [X] points earned. Keep soaring!",
  "Woo-hoo! Two notes in a day! You're on fire! \u{1F525} [X] points, keep it up!",
  "You're a 2-note wizard! \u2728\u{1F52E} [X] points earned. What's your next spell?",
  "Double the notes, double the awesomeness! \u{1F31F} [X] points, rockstar!",
  "You've just kicked the 2-note challenge out of the park! \u26BE [X] points!",
  "Boom! You just conquered the 2-note challenge! \u{1F389} [X] points, superstar!",
  "Double the notes, double the celebration! \u{1F973} [X] points earned. Party on!",
  "You're a 2-note maestro! \u{1F3B5} [X] points in the pocket. Keep the music playing!",
  "Kaboom! Two notes in a day! You're on a roll! \u{1F680} [X] points earned. Keep it up!",
  "You've just joined the 2-note fiesta! \u{1F973} [X] points earned. Let's keep dancing!",
  "Zap! You've just electrified the 2-note challenge! \u26A1 [X] points, rockstar!",
  "Double notes, double the sparkle! \u{1F31F} [X] points earned. Keep shining bright!",
  "You're a 2-note dynamo! \u{1F4A5} [X] points earned. What's your next explosion?",
  "Kaboom! Two notes in a day! You're on fire! \u{1F525} [X] points, keep it up!",
  "You've just unlocked the 2-note achievement! \u{1F31F} [X] points earned. Keep soaring!",
  "Woo-hoo! Two notes in a day! You're on a roll! \u{1F389} [X] points, keep it up!",
  "You're a 2-note wizard! \u2728\u{1F52E} [X] points earned. What's your next spell?",
  "Double the notes, double the awesomeness! \u{1F31F} [X] points, rockstar!",
  "You've just kicked the 2-note challenge out of the park! \u26BE [X] points!",
  "Boom! You just conquered the 2-note challenge! \u{1F389} [X] points, superstar!",
  "Double the notes, double the celebration! \u{1F973} [X] points earned. Party on!",
  "You're a 2-note maestro! \u{1F3B5} [X] points in the pocket. Keep the music playing!",
  "Zap! You've just electrified the 2-note challenge! \u26A1 [X] points, rockstar!",
  "Double notes, double the sparkle! \u{1F31F} [X] points earned. Keep shining bright!",
  "You're a 2-note dynamo! \u{1F4A5} [X] points earned. What's your next explosion?",
  "Kapow! Two notes in a day - you're a superhero! \u{1F9B8}\u200D\u2642\uFE0F [X] points!",
  "You're a 2-note legend! \u{1F31F} [X] points earned. What's your next adventure?",
  "Bingo! Two notes in a day! You're on a roll! \u{1F680} [X] points, keep it up!",
  "You're a 2-note wizard! \u2728\u{1F52E} [X] points earned. What's your next spell?",
  "Double the notes, double the awesomeness! \u{1F31F} [X] points, rockstar!",
  "You've just kicked the 2-note challenge out of the park! \u26BE [X] points!",
  "Boom! You just conquered the 2-note challenge! \u{1F389} [X] points, superstar!",
  "Double the notes, double the celebration! \u{1F973} [X] points earned. Party on!",
  "You're a 2-note maestro! \u{1F3B5} [X] points in the pocket. Keep the music playing!",
  "Zap! You've just electrified the 2-note challenge! \u26A1 [X] points, rockstar!",
  "Double notes, double the sparkle! \u{1F31F} [X] points earned. Keep shining bright!",
  "You're a 2-note dynamo! \u{1F4A5} [X] points earned. What's your next explosion?"
];
var randomPointNotices = [
  "Bazinga! You just snagged [X] points!",
  "Kaboom! [X] points are now in your pocket!",
  "Woohoo! [X] points earned! Keep it up!",
  "Points ahoy! [X] more in the bank!",
  "Score! [X] points added to your total!",
  "You're on fire! [X] points in the bag!",
  "Zippity-zap! [X] points for you!",
  "Champion move! [X] points are yours!",
  "Bingo! [X] points just for you!",
  "Shazam! [X] points to the rescue!",
  "Ka-ching! [X] points earned!",
  "Superb! [X] more points for you!",
  "Bravo! [X] points added to your stash!",
  "Well done! [X] more points in tow!",
  "Zap! [X] points, just like that!",
  "A round of applause for [X] points!",
  "Whoosh! [X] points are yours!",
  "Zing! [X] points for your efforts!",
  "Woo! [X] points, way to go!",
  "Zesty! [X] points in your tally!",
  "Great job! [X] more points for you!",
  "Fantastic! [X] points in the bag!",
  "Zowie! [X] points just for you!",
  "Hooray! [X] points in your account!",
  "Nice one! [X] points in the pocket!",
  "Woot woot! [X] points, nice work!",
  "Zigzag! [X] points, keep it up!",
  "Bam! [X] points, well done!",
  "Cool beans! [X] points for you!",
  "Zesty! [X] points, keep it up!",
  "Splendid! [X] points for your efforts!",
  "Marvelous! [X] points earned!",
  "Zany! [X] points, well done!",
  "Exquisite! [X] points in your stash!",
  "Outstanding! [X] points for you!",
  "Zesty! [X] points, nice job!",
  "Magnificent! [X] points earned!",
  "Zigzag! [X] points in your tally!",
  "Terrific! [X] points for you!",
  "Superb! [X] points, well done!",
  "Zowie! [X] points for your efforts!",
  "Excellent! [X] points earned!",
  "Zap! [X] points in your account!",
  "Awesome! [X] points, way to go!",
  "Well played! [X] points for you!",
  "Zesty! [X] points, nice work!",
  "Impressive! [X] points, keep it up!",
  "Brilliant! [X] points, well done!",
  "Zing! [X] points for your efforts!",
  "Nice move! [X] points earned!",
  "Zesty! [X] points in the bag!",
  "Stellar! [X] points just for you!",
  "Well deserved! [X] points earned!"
];
function getRandomMessageWeeklyChallenge(points) {
  const randomIndex = Math.floor(Math.random() * messagesWeeklyChallenge.length);
  const message = messagesWeeklyChallenge[randomIndex];
  return message.replace("[X]", points.toString());
}
function getRandomMessageTwoNoteChallenge(points) {
  const randomIndex = Math.floor(Math.random() * twoNoteMessages.length);
  const message = twoNoteMessages[randomIndex];
  return message.replace("[X]", points.toString());
}
function getRandomMessagePoints(points) {
  const randomIndex = Math.floor(Math.random() * randomPointNotices.length);
  const message = randomPointNotices[randomIndex];
  return message.replace("[X]", points.toString());
}

// src/ModalInformationbox.ts
var import_obsidian2 = require("obsidian");
var ModalInformationbox = class extends import_obsidian2.Modal {
  // Store the text to be displayed
  constructor(app2, displayText) {
    super(app2);
    this.displayText = displayText;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText(this.displayText);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/ModalBooster.ts
var import_obsidian4 = require("obsidian");

// src/MultiSelectModal.ts
var import_obsidian3 = require("obsidian");
var MultiSelectModal = class extends import_obsidian3.Modal {
  constructor(app2, items, buttonText, gamificationInstance) {
    super(app2);
    this.selectedItems = [];
    this.remainingStock = {};
    this.boosters = {};
    this.useBooster = false;
    this.remainingBoosterStock = {};
    this.items = items;
    this.buttonText = buttonText;
    this.gamificationInstance = gamificationInstance;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.useBooster) {
      boosterRecipes.forEach((item) => {
        if (this.boosterAvailableForUse(item.name)) {
          const listItem = this.createItemContainer(item.name);
          contentEl.appendChild(listItem);
        }
      });
    } else {
      const listItem = this.createItemContainer("");
      contentEl.appendChild(listItem);
    }
  }
  onClose() {
    this.selectedItems = [];
  }
  boosterAvailableForUse(item) {
    let found = false;
    listOfUseableBoostersToBeShown.forEach((element) => {
      if (item == element) {
        if (!found) {
          found = true;
        }
      }
    });
    return found;
  }
  setUseBooster(useBooster) {
    this.useBooster = useBooster;
  }
  // Updated createItemContainer method
  createItemContainer(labelText) {
    if (this.useBooster) {
      return this.createBoosterList(labelText);
    } else {
      return this.createCraftingLayout();
    }
  }
  updateIncrementStock(increment, stock) {
    console.log(`increment "${increment}" new value ${stock}`);
    this.remainingStock[increment] = stock;
    this.gamificationInstance.setSetting(this.getIngerementVarNameFromName(increment) || "", stock);
  }
  updateBoosterStock(booster, stockIncrease) {
    this.boosters[booster] += stockIncrease;
  }
  decrementBooster(booster, stockIncrease) {
    const stock = this.boosters[booster];
    const boosterLastUsedDate = this.gamificationInstance.getSetting(this.getBoosterDateFromName(booster));
    if (typeof boosterLastUsedDate === "string" && boosterLastUsedDate !== null) {
      const momentDate = window.moment(boosterLastUsedDate, "YYYY-MM-DD HH:mm:ss");
      if (stock > 0 && isMinutesPassed(momentDate, this.getBoosterCooldownFromName(booster))) {
        this.boosters[booster] -= stockIncrease;
        this.gamificationInstance.setSetting(this.getBoosterVarNameFromName(booster), this.boosters[booster]);
        this.gamificationInstance.setSettingBoolean(this.getBoosterSwitchFromName(booster), true);
        this.gamificationInstance.setSettingString(this.getBoosterDateFromName(booster), window.moment().format("YYYY-MM-DD HH:mm:ss"));
        const boosterOverallUse = this.gamificationInstance.getSetting("boosterUseCount");
        if (typeof boosterOverallUse === "number" && boosterOverallUse !== null) {
          this.gamificationInstance.setSetting("boosterUseCount", boosterOverallUse + 1);
        } else {
          console.debug(`decrementBooster: "boosterUseCount" could not got read.`);
        }
        const boosterUse = this.gamificationInstance.getSetting(this.getBoosterUseFromName(booster));
        if (typeof boosterUse === "number" && boosterUse !== null) {
          this.gamificationInstance.setSetting(this.getBoosterUseFromName(booster), boosterUse + 1);
        } else {
          console.debug(`decrementBooster: "${this.getBoosterUseFromName(booster)}" could not got read.`);
        }
        this.updateQuantityDisplay(booster);
      }
    } else {
      console.error(`value from ${this.getBoosterVarNameFromName(booster)} could not be read from Settings in decrementBooster()`);
    }
  }
  readBoostersStock() {
    if (this.gamificationInstance) {
      this.boosters = {
        "Temporal Tweaker": this.gamificationInstance.getSetting("temporalTweaker"),
        "Perpetual Progress": this.gamificationInstance.getSetting("perpetualProgress"),
        "Strategic Synapses": this.gamificationInstance.getSetting("strategicSynapses"),
        "Accelerated Acquisition": this.gamificationInstance.getSetting("acceleratedAcquisition"),
        "Linkers Lode": this.gamificationInstance.getSetting("linkersLode"),
        "Effortless Expansion": this.gamificationInstance.getSetting("effortlessExpansion"),
        "Recursive Reflection": this.gamificationInstance.getSetting("recursiveReflection"),
        "Synaptic Surge": this.gamificationInstance.getSetting("synapticSurge"),
        "Inspiration Infusion": this.gamificationInstance.getSetting("inspirationInfusion"),
        "Title Titan": this.gamificationInstance.getSetting("titleTitan"),
        "Precision Prism": this.gamificationInstance.getSetting("precisionPrism"),
        "Hyperlink Harmony": this.gamificationInstance.getSetting("hyperlinkHarmony"),
        "Ephemeral Euphoria": this.gamificationInstance.getSetting("ephemeralEuphoria")
      };
    }
  }
  readIngrementStock() {
    if (this.gamificationInstance) {
      this.remainingStock = {
        "Nexus Node": this.gamificationInstance.getSetting("nexusNode"),
        "Connection Crystal": this.gamificationInstance.getSetting("connectionCrystal"),
        "Mastery Scroll": this.gamificationInstance.getSetting("masteryScroll"),
        "Insight Prism": this.gamificationInstance.getSetting("insightPrism"),
        "Reflective Essence": this.gamificationInstance.getSetting("reflectiveEssence"),
        "Amplification Crystal": this.gamificationInstance.getSetting("amplificationCrystal"),
        "Creative Catalyst": this.gamificationInstance.getSetting("creativeCatalyst"),
        "Precision Lens": this.gamificationInstance.getSetting("precisionLens")
      };
    }
  }
  createCraftingLayout() {
    const container = document.createElement("div");
    container.className = "modal-crafting-container";
    const stockContainer = document.createElement("div");
    stockContainer.className = "stock-container";
    boosterRecipes.forEach((recipe) => {
      if (this.boosterAvailableForUse(recipe.name)) {
        const itemContainer = document.createElement("div");
        itemContainer.className = "crafting-item-container";
        const button = document.createElement("button");
        button.innerText = "Craft";
        button.onclick = () => this.craftBoosterItem(recipe);
        const useInfoButton = document.createElement("button");
        useInfoButton.innerText = "?";
        useInfoButton.onclick = () => {
          new ModalInformationbox(this.app, this.getBoosterInforFromFromName(recipe.name)).open();
        };
        const itemText = document.createElement("span");
        itemText.innerText = `${recipe.name} \u21D2 ${recipe.incredients.join("    ")}`;
        itemContainer.appendChild(button);
        itemContainer.appendChild(useInfoButton);
        itemContainer.appendChild(itemText);
        container.appendChild(itemContainer);
      }
    });
    const stockInfo = document.createElement("div");
    stockInfo.className = "stock-info";
    listOfUseableIngredientsToBeShown.forEach((element) => {
      stockInfo.innerHTML += `${this.getIngerementFromName(element).shortName} [${this.remainingStock[this.getIngerementFromName(element).name] || 0}]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`;
    });
    stockContainer.appendChild(stockInfo);
    container.appendChild(stockContainer);
    return container;
  }
  createBoosterList(labelText) {
    const container = document.createElement("div");
    container.className = "modal-checkbox-container";
    const stock = this.boosters[labelText];
    const label = document.createElement("div");
    label.className = `${labelText.replace(" ", "-")}`;
    const useButton = document.createElement("button");
    const momentDate = this.gamificationInstance.getSetting(this.getBoosterDateFromName(labelText));
    if (isMinutesPassed(window.moment(momentDate, "YYYY-MM-DD HH:mm:ss"), this.getBoosterCooldownFromName(labelText)) == false) {
      console.log(`Booster ${labelText} is still in cooldown for ${window.moment(momentDate, "YYYY-MM-DD HH:mm:ss"), this.getBoosterCooldownFromName(labelText) / 60} hours`);
      label.innerHTML = `${labelText} : (${stock})`;
      useButton.innerText = `cooldown ${hoursUntilMinutesPassed(window.moment(momentDate, "YYYY-MM-DD HH:mm:ss"), this.getBoosterCooldownFromName(labelText))} hours`;
      useButton.id = `use-button-${labelText.replace(" ", "-")}`;
      useButton.onclick = () => {
        new ModalInformationbox(this.app, `${labelText} is for ${hoursUntilMinutesPassed(window.moment(momentDate, "YYYY-MM-DD HH:mm:ss"), this.getBoosterCooldownFromName(labelText))} hours in cooldown and can only then be used again.`).open();
      };
    } else {
      label.innerHTML = `${labelText} : (${stock})`;
      useButton.innerText = "Use";
      useButton.id = `use-button-${labelText.replace(" ", "-")}`;
      useButton.onclick = () => {
        this.useBoosterItem(labelText);
      };
    }
    const useInfoButton = document.createElement("button");
    useInfoButton.innerText = "?";
    useInfoButton.id = `information-${labelText.replace(" ", "-")}`;
    useInfoButton.onclick = () => {
      new ModalInformationbox(this.app, this.getBoosterInforFromFromName(labelText)).open();
    };
    container.appendChild(useButton);
    container.appendChild(useInfoButton);
    container.appendChild(label);
    return container;
  }
  incrementItem(item) {
    const stock = this.remainingStock[item];
    if (stock > 0) {
      this.selectedItems.push(item);
      this.remainingStock[item]--;
      this.updateQuantityDisplay(item);
    }
    if (this.boosters[item] !== void 0) {
      this.boosters[item]--;
      this.updateQuantityDisplay(item);
    }
  }
  decrementItem(item) {
    const itemIndex = this.selectedItems.indexOf(item);
    if (itemIndex > -1) {
      this.selectedItems.splice(itemIndex, 1);
      this.remainingStock[item]++;
      this.updateQuantityDisplay(item);
    }
    if (this.boosters[item] !== void 0) {
      this.boosters[item]++;
      this.updateQuantityDisplay(item);
    }
  }
  useBoosterItem(labelText) {
    console.log(`use Booster ${labelText}`);
    this.decrementBooster(labelText, 1);
  }
  updateQuantityDisplay(labelText) {
    const stock = this.boosters[labelText];
    const stockInfo = document.querySelector(`.${labelText.replace(" ", "-")}`);
    if (stockInfo) {
      stockInfo.innerHTML = "";
      stockInfo.innerHTML = `${labelText} : (${stock})`;
    }
    const buttonUse = document.querySelector(`#use-button-${labelText.replace(" ", "-")}`);
    const date = this.gamificationInstance.getSetting(this.getBoosterDateFromName(labelText));
    const momentDate = window.moment(date, "YYYY-MM-DD HH:mm:ss");
    if (buttonUse && isMinutesPassed(momentDate, this.getBoosterCooldownFromName(labelText)) == false) {
      buttonUse.setText(`cooldown ${hoursUntilMinutesPassed(momentDate, this.getBoosterCooldownFromName(labelText))} hours`);
    }
  }
  checkIngredientsAvailability(incredients) {
    for (const ingredient of incredients.incredients) {
      const [quantity, shortName] = ingredient.split("x");
      const requiredQuantity = parseInt(quantity);
      const availableStock = this.remainingStock[this.getIngerementNameFromShortName(shortName) || 0];
      if (requiredQuantity > availableStock) {
        return false;
      }
    }
    return true;
  }
  check1000IngredientsAvailableAndBurn() {
    let totalAvailableIngredients = 0;
    listOfUseableIngredientsToBeShown.forEach((increment) => {
      totalAvailableIngredients += this.remainingStock[this.getIngerementFromName(increment).name] || 0;
    });
    console.log(`total amount of ingrediments: ${totalAvailableIngredients}`);
    if (totalAvailableIngredients >= 1e3) {
      listOfUseableIngredientsToBeShown.forEach((increment) => {
        if (this.remainingStock[this.getIngerementFromName(increment).name]) {
          const proportionalAmount = Math.ceil(this.remainingStock[this.getIngerementFromName(increment).name] / totalAvailableIngredients * 1e3);
          this.updateIncrementStock(this.getIngerementFromName(increment).name, this.remainingStock[this.getIngerementFromName(increment).name] - proportionalAmount);
        }
      });
      this.updateStockInformation();
      return true;
    }
    return false;
  }
  useIngrediments(incredients) {
    for (const ingredient of incredients.incredients) {
      const [quantity, shortName] = ingredient.split("x");
      const requiredQuantity = parseInt(quantity);
      const availableStock = this.remainingStock[this.getIngerementNameFromShortName(shortName) || 0];
      const ingrementName = this.getIngerementNameFromShortName(shortName) || "";
      this.updateIncrementStock(ingrementName, availableStock - requiredQuantity);
    }
    return true;
  }
  updateStockInformation() {
    const stockInfo = document.querySelector(".stock-info");
    if (stockInfo) {
      stockInfo.innerHTML = "";
      listOfUseableIngredientsToBeShown.forEach((element) => {
        stockInfo.innerHTML += `${this.getIngerementFromName(element).shortName} [${this.remainingStock[this.getIngerementFromName(element).name] || 0}]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`;
      });
    }
  }
  craftBoosterItem(selectedItems) {
    if (selectedItems.name == "Ephemeral Euphoria") {
      if (this.check1000IngredientsAvailableAndBurn()) {
        this.updateBoosterStock(selectedItems.name, 1);
        this.gamificationInstance.setSetting(this.getBoosterVarNameFromName(selectedItems.name), this.boosters[selectedItems.name]);
        console.log(`craft booster ${selectedItems.name}`);
      } else {
        console.log(`not enough ingredients for booster ${selectedItems.name} in stock`);
        new ModalInformationbox(this.app, `Not enough ingrediments available for '${selectedItems.name}'. Craft more Notes to collect new ingrediments.`).open();
      }
    } else {
      if (this.checkIngredientsAvailability(selectedItems)) {
        console.log(`craft booster ${selectedItems.name}`);
        this.updateBoosterStock(selectedItems.name, 1);
        this.gamificationInstance.setSetting(this.getBoosterVarNameFromName(selectedItems.name), this.boosters[selectedItems.name]);
        this.useIngrediments(selectedItems);
        this.updateStockInformation();
      } else {
        console.log(`not enough ingredients for booster ${selectedItems.name} in stock`);
        new ModalInformationbox(this.app, `Not enough ingrediments available for '${selectedItems.name}'. Craft more Notes to collect new ingrediments.`).open();
      }
    }
  }
  getIngerementNameFromShortName(shortName) {
    for (const element of elements) {
      if (element.shortName === shortName) {
        return element.name;
      }
    }
    return null;
  }
  getIngerementShortNameFromName(name) {
    for (const element of elements) {
      if (element.name === name) {
        return element.shortName;
      }
    }
    return null;
  }
  getIngerementFromName(name) {
    for (const element of elements) {
      if (element.name === name) {
        return element;
      }
    }
    return { shortName: "", name: "", varName: "" };
  }
  getIngerementVarNameFromShortName(shortName) {
    for (const element of elements) {
      if (element.shortName === shortName) {
        return element.varName;
      }
    }
    return null;
  }
  getIngerementVarNameFromName(name) {
    for (const element of elements) {
      if (element.name === name) {
        return element.varName;
      }
    }
    return null;
  }
  getBoosterVarNameFromName(boosterName) {
    for (const element of boosterRecipes) {
      if (element.name === boosterName) {
        return element.varname;
      }
    }
    return "";
  }
  getBoosterInforFromFromName(boosterName) {
    for (const element of boosterRecipes) {
      if (element.name === boosterName) {
        return element.description;
      }
    }
    return "";
  }
  getBoosterSwitchFromName(boosterName) {
    for (const element of boosterRecipes) {
      if (element.name === boosterName) {
        return element.boosterSwitch;
      }
    }
    return "";
  }
  getBoosterDateFromName(boosterName) {
    for (const element of boosterRecipes) {
      if (element.name === boosterName) {
        return element.boosterDate;
      }
    }
    return "";
  }
  getBoosterCooldownFromName(boosterName) {
    for (const element of boosterRecipes) {
      if (element.name === boosterName) {
        return element.boosterCooldown;
      }
    }
    return 0;
  }
  getBoosterUseFromName(boosterName) {
    for (const element of boosterRecipes) {
      if (element.name === boosterName) {
        return element.boosterUseCountName;
      }
    }
    return "";
  }
};

// src/ModalBooster.ts
var ModalBooster = class extends import_obsidian4.Modal {
  constructor(app2, displayText, gamificationInstance) {
    super(app2);
    this.displayText = displayText;
    this.gamificationInstance = gamificationInstance;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText(this.displayText);
    const multiSelectModal = new MultiSelectModal(this.app, [], "Craft Booster Item", this.gamificationInstance);
    const button = document.createElement("button");
    button.innerText = "Open Crafting Table";
    button.onclick = () => {
      multiSelectModal.setUseBooster(false);
      multiSelectModal.open();
    };
    multiSelectModal.readBoostersStock();
    multiSelectModal.readIngrementStock();
    const button2 = document.createElement("button");
    button2.innerText = "Open Booster Board";
    button2.onclick = () => {
      multiSelectModal.setUseBooster(true);
      multiSelectModal.open();
    };
    contentEl.appendChild(button);
    contentEl.appendChild(button2);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/encryption.ts
function encryptString(data) {
  return CryptoJS.AES.encrypt(JSON.stringify(data), secretKey).toString();
}
function decryptString(encryptedData) {
  const bytes = CryptoJS.AES.decrypt(encryptedData, secretKey);
  return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));
}
function encryptNumber(number) {
  return CryptoJS.AES.encrypt(number.toString(), secretKey).toString();
}
function decryptNumber(encryptedNumber) {
  const bytes = CryptoJS.AES.decrypt(encryptedNumber, secretKey);
  return parseInt(bytes.toString(CryptoJS.enc.Utf8));
}
function encryptBoolean(booleanValue) {
  return CryptoJS.AES.encrypt(booleanValue.toString(), secretKey).toString();
}
function decryptBoolean(encryptedBoolean) {
  const bytes = CryptoJS.AES.decrypt(encryptedBoolean, secretKey);
  return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));
}

// src/main.ts
var style = document.createElement("style");
style.textContent = `
  .modal-checkbox-container {
    margin-bottom: 10px;
    display: flex;
    align-items: center;
  }

  .modal-checkbox-container input[type="checkbox"] {
    margin-right: 5px;
  }
`;
document.head.append(style);
var pointsToReceived = 0;
var gamification2 = class extends import_obsidian5.Plugin {
  constructor() {
    super(...arguments);
    this.statusBarItem = this.addStatusBarItem();
    this.statusbarGamification = this.statusBarItem.createEl("span", { text: "" });
  }
  /*getSetting(key: string) {
         // Retrieve a specific setting
  	// return this.settings[key];
  	return this.settings[key] !== undefined ? this.settings[key] : null;
     }*/
  getSettingString(key) {
    return decryptString(this.settings[key] !== void 0 ? this.settings[key].toString() : "");
  }
  getSettingNumber(key) {
    return decryptNumber(this.settings[key] !== void 0 ? this.settings[key].toString() : "");
  }
  getSettingBoolean(key) {
    return decryptBoolean(this.settings[key] !== void 0 ? this.settings[key].toString() : "");
  }
  /*setSetting(key: string, value: number) {
        // Set a specific setting
  //console.log(`new value for ${key} is ${value}`)
        this.settings[key] = value;
        this.saveSettings();
    }*/
  setSettingString(key, value) {
    const valueEncrypted = encryptString(value);
    this.settings[key] = valueEncrypted;
    this.saveSettings();
  }
  setSettingNumber(key, value) {
    const valueEncrypted = encryptNumber(value);
    this.settings[key] = valueEncrypted;
    this.saveSettings();
  }
  setSettingBoolean(key, value) {
    const valueEncrypted = encryptBoolean(value);
    this.settings[key] = valueEncrypted;
    this.saveSettings();
  }
  async onload() {
    console.log("obsidian-pkm-gamification loaded!");
    await this.loadSettings();
    this.addSettingTab(new GamificationPluginSettings(this.app, this));
    this.timerInterval = 30 * 60 * 1e3;
    this.timerId = window.setInterval(this.resetDailyGoals.bind(this), this.timerInterval);
    await this.updateStatusBar(this.statusbarGamification);
    if (this.getSettingBoolean("debug")) {
      this.addRibbonIcon("accessibility", "crafting", async () => {
        this.acquireIngredients();
      });
    }
    if (this.getSettingNumber("counterMajurityCalcInitial") >= 50) {
      this.addRibbonIcon("test-tube-2", "Boosters", async () => {
        new ModalBooster(this.app, ` `, this).open();
      });
      this.addCommand({
        id: "boosters",
        name: "open booter pallete",
        callback: async () => {
          new ModalBooster(this.app, ` `, this).open();
        }
      });
    }
    this.addRibbonIcon("sprout", "Calculate Note Maturity", async () => {
      await this.calculateNoteMajurity();
    });
    if (this.getSettingBoolean("enableInitCommand")) {
      this.addCommand({
        id: "init-rate-gamification",
        name: "Initialize gamification ratings",
        callback: async () => {
          await this.initializeGame(this.statusbarGamification);
        }
      });
    }
    if (this.getSettingBoolean("enableInitCommand")) {
      this.addCommand({
        id: "create-avatar-page",
        name: "create profile page",
        callback: async () => {
          const { vault } = this.app;
          await createAvatarFile(this.app, this.getSettingString("avatarPageName"));
          const chartString = await this.createChart(vault);
          await replaceChartContent(this.getSettingString("avatarPageName"), chartString);
        }
      });
    }
    if (this.getSettingBoolean("enableInitCommand")) {
      this.addCommand({
        id: "reset-game",
        name: "reset the game",
        callback: async () => {
          await this.resetGame();
        }
      });
    }
    this.addCommand({
      id: "update-chart-avatarpage",
      name: "update chart on profile page",
      callback: async () => {
        const { vault } = app;
        const chartString = await this.createChart(vault);
        await replaceChartContent(this.getSettingString("avatarPageName"), chartString);
      }
    });
    this.addCommand({
      id: "rate-note-maturity",
      name: "Rate note majurity",
      callback: async () => {
        await this.calculateNoteMajurity();
      }
    });
    this.addCommand({
      id: "change-progressive-formatting",
      name: "toggle progressive summarization formatting",
      callback: async () => {
        await replaceFormatStrings(this.getSettingString("progressiveSumLayer2"), this.getSettingString("progressiveSumLayer3"));
      }
    });
  }
  async resetGame() {
    await this.removeKeysFromFrontmatter();
    this.setSettingNumber("statusLevel", 1);
    this.setSettingNumber("statusPoints", 0);
    this.setSettingNumber("xpForNextLevel", 1e3);
    this.setSettingBoolean("badgeBoosterState", false);
    this.setSettingNumber("badgeBoosterFactor", 1);
    await this.giveStatusPoints(0, "");
    await this.updateStatusBar(this.statusbarGamification);
    new ModalInformationbox(this.app, `Game is now reseted. Please delete the Profile Page: "${this.getSettingString("avatarPageName")}.md" manually.`).open();
  }
  async initializeGame(statusbarGamification) {
    this.setSettingString("gamificationStartDate", format(new Date(), "yyyy-MM-dd"));
    await this.saveSettings();
    const { vault } = this.app;
    await createAvatarFile(this.app, this.getSettingString("avatarPageName"));
    const chartString = await this.createChart(vault);
    await replaceChartContent(this.getSettingString("avatarPageName"), chartString);
    await this.openAvatarFile();
    const fileCountMap = await getFileMap(this.app, this.getSettingString("tagsExclude"), this.getSettingString("folderExclude"));
    console.log(`fileCountMap loaded. Number of files: ${fileCountMap.length}`);
    let pointsReceived = 0;
    for (const fileName of fileCountMap) {
      const file = fileName;
      const fileContents = await app.vault.read(file);
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
      if (activeView && activeView.file && activeView.file.path === file.path) {
        console.warn(`File ${file.path} is currently open. Skipping.`);
        continue;
      }
      const fileLength = countCharactersInActiveFile(fileContents, fileName.basename);
      const rateFileLength = rateNoteLength(fileLength);
      const {
        charCount,
        highlightedCount,
        boldCount
      } = countLayer2AndLayer3Characters(fileContents, fileName.basename, this.getSettingString("progressiveSumLayer2"), this.getSettingString("progressiveSumLayer3"));
      const rateProgressiveSum = rateProgressiveSummarization(charCount, highlightedCount, boldCount);
      const fileNameRate = rateLengthFilename(file.name);
      const inlinkNumber = count_inlinks(file);
      const inlinkClass = rateInlinks(inlinkNumber);
      const rateOut = rateOutlinks(getNumberOfOutlinks(file));
      const noteMajurity = rateLevelOfMaturity(rateFileLength, fileNameRate, inlinkClass, rateOut, rateProgressiveSum);
      console.log(`Processing file ${fileName.basename} in path ${fileName.path}`);
      try {
        await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
          if (rateDirectionForStatusPoints(frontmatter["note-maturity"], noteMajurity) >= 1) {
            this.giveStatusPoints(pointsNoteMajurity * rateDirectionForStatusPoints("frontmatter['note-maturity']", noteMajurity), "fromNoteMajurity");
            pointsReceived += pointsToReceived;
          } else if (!("note-maturity" in frontmatter)) {
            this.giveStatusPoints(pointsNoteMajurity * rateDirectionForStatusPoints("0", noteMajurity), "fromNoteMajurityFirstTime");
            pointsReceived += pointsToReceived;
          }
          if (rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate) >= 1 && "title-class" in frontmatter) {
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate), "fromTitleClass");
            pointsReceived += pointsToReceived;
          } else if (!("title-class" in frontmatter)) {
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", fileNameRate), "fromTitleClassFirstTime");
            pointsReceived += pointsToReceived;
          }
          if (rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength) >= 1) {
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength), "fromNoteLengthClass");
            pointsReceived += pointsToReceived;
          } else if (!("note-length-class" in frontmatter)) {
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateFileLength), "fromNoteLengthClassFirstTime");
            pointsReceived += pointsToReceived;
          }
          if (rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass) >= 1) {
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass), "fromInlinkClass");
            pointsReceived += pointsToReceived;
          } else if (!("inlink-class" in frontmatter)) {
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", inlinkClass), "fromInlinkClassFirstTime");
            pointsReceived += pointsToReceived;
          }
          if (rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut) >= 1) {
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut), "fromOutlinkClass");
            pointsReceived += pointsToReceived;
          } else if (!("outlink-class" in frontmatter)) {
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateOut), "fromOutlinkClassFirstTime");
            pointsReceived += pointsToReceived;
          }
          if (rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum) >= 1) {
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum), "fromProgressiveTummarizationMaturity");
            pointsReceived += pointsToReceived;
          } else if (!("progressive-summarization-maturity" in frontmatter)) {
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateProgressiveSum), "fromProgressiveTummarizationMaturityFirstTime");
            pointsReceived += pointsToReceived;
          }
          this.writeFrontmatter(frontmatter, fileNameRate, rateFileLength, inlinkClass, rateOut, rateProgressiveSum, noteMajurity);
        });
      } catch (e2) {
        if ((e2 == null ? void 0 : e2.name) === "YAMLParseError") {
          const errorMessage = `Update majuritys failed Malformed frontamtter on this file : ${file.path} ${e2.message}`;
          new import_obsidian5.Notice(errorMessage, 4e3);
          console.error(errorMessage);
        }
      }
    }
    if (pointsReceived > 0) {
      new import_obsidian5.Notice(`${pointsReceived} Points received`, 4e3);
      console.log(`${pointsReceived} Points received`);
    }
    setTimeout(async () => {
      const initBadge = getBadgeForInitLevel(this.getSettingNumber("statusLevel"));
      new import_obsidian5.Notice(`You've earned the "${initBadge.name}" badge. ${initBadge.description}`, 5e3);
      console.log(`You earned ${initBadge.name} - ${initBadge.description}`);
      await this.giveInitBadgeInProfile(this.getSettingString("avatarPageName"), initBadge);
      await this.removeBadgesWhenInitLevelHigher(this.getSettingString("avatarPageName"), this.getSettingNumber("statusLevel"));
      await this.boosterForInit();
      await this.updateStatusBar(statusbarGamification);
    }, 2e3);
    new ModalInformationbox(this.app, `Finallized gamification initialistation!
Congratulation, you earned ${pointsReceived} Points!

Check the Profile Page: "${this.getSettingString("avatarPageName")}.md"

You received an initialisation Booster aktiv for your first level ups. Game on!`).open();
  }
  writeFrontmatter(frontmatter, fileNameRate, rateFileLength, inlinkClass, rateOut, rateProgressiveSum, noteMajurity) {
    frontmatter["title-class"] = rateDirection(frontmatter["title-class"], fileNameRate);
    frontmatter["note-length-class"] = rateDirection(frontmatter["note-length-class"], rateFileLength);
    frontmatter["inlink-class"] = rateDirection(frontmatter["inlink-class"], inlinkClass);
    frontmatter["outlink-class"] = rateDirection(frontmatter["outlink-class"], rateOut);
    frontmatter["progressive-summarization-maturity"] = rateDirection(frontmatter["progressive-summarization-maturity"], rateProgressiveSum);
    frontmatter["note-maturity"] = rateDirection(frontmatter["note-maturity"], noteMajurity);
  }
  onunload() {
    console.log("obsidian-pkm-gamification unloaded!");
    if (this.timerId !== null) {
      clearInterval(this.timerId);
      this.timerId = null;
    }
  }
  async calculateNoteMajurity() {
    var _a;
    const file = this.app.workspace.getActiveFile();
    if (file == null) {
      console.error("got no file, propably none is active");
    }
    let detectIfNoteIsFirstTimeRated = false;
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
    const fileContents = activeView == null ? void 0 : activeView.editor.getValue();
    const fileName = activeView == null ? void 0 : activeView.file.basename;
    let rateFileLength = 0;
    let fileLength = 0;
    let rateProgressiveSum = 0;
    if (fileContents !== void 0 && fileName !== void 0) {
      fileLength = countCharactersInActiveFile(fileContents, fileName);
      rateFileLength = rateNoteLength(fileLength);
      if (fileContents !== null && fileName !== null) {
        const { charCount, highlightedCount, boldCount } = countLayer2AndLayer3Characters(fileContents, fileName, this.getSettingString("progressiveSumLayer2"), this.getSettingString("progressiveSumLayer3"));
        rateProgressiveSum = rateProgressiveSummarization(charCount, highlightedCount, boldCount);
      }
    }
    let fileNameRate = 0;
    let inlinkNumber = 0;
    let inlinkClass = 0;
    let rateOut = 0;
    if (file !== null) {
      fileNameRate = rateLengthFilename((_a = file.name) != null ? _a : "");
      inlinkNumber = count_inlinks(file);
      inlinkClass = rateInlinks(inlinkNumber);
      rateOut = rateOutlinks(getNumberOfOutlinks(file));
      const noteMajurity = rateLevelOfMaturity(rateFileLength, fileNameRate, inlinkClass, rateOut, rateProgressiveSum);
      this.setSettingNumber("counterMajurityCalc", this.getSettingNumber("counterMajurityCalc") + 1);
      try {
        await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
          if (frontmatter) {
            let pointsReceived = 0;
            if (rateDirectionForStatusPoints(frontmatter["note-maturity"], noteMajurity) >= 1) {
              console.log(`note-maturity >=1`);
              const newLevel = this.giveStatusPoints(pointsNoteMajurity * rateDirectionForStatusPoints("frontmatter['note-maturity']", noteMajurity), "fromNoteMajurity");
              pointsReceived += pointsToReceived;
              this.decisionIfBadge(newLevel);
            } else if (!("note-maturity" in frontmatter)) {
              const newLevel = this.giveStatusPoints(pointsNoteMajurity * rateDirectionForStatusPoints("0", noteMajurity), "fromNoteMajurityFirstTime");
              pointsReceived += pointsToReceived;
              this.decisionIfBadge(newLevel);
              detectIfNoteIsFirstTimeRated = true;
              this.setSettingNumber("counterMajurityCalcInitial", this.getSettingNumber("counterMajurityCalcInitial") + 1);
              if (this.getSettingNumber("counterMajurityCalcInitial") == 50) {
                new ModalInformationbox(this.app, `\u{1F680} Introducing Boosters! \u{1F680}Level up faster, you enabled the next stage! Craft Boosters for an accelerated knowledge journey. Click the "test-tube" on the right or type 'Open Booster Palette' to get started! you got one booster as a gift, so try it out!\u{1F31F}\u{1F4DA}\u{1F50D}`).open();
              }
            }
            if (rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate) >= 1 && "title-class" in frontmatter) {
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate), "fromTitleClass");
              pointsReceived += pointsToReceived;
              this.decisionIfBadge(newLevel);
            } else if (!("title-class" in frontmatter)) {
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", fileNameRate), "fromTitleClassFirstTime");
              pointsReceived += pointsToReceived;
              this.decisionIfBadge(newLevel);
            }
            if (rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength) >= 1) {
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength), "fromNoteLengthClass");
              pointsReceived += pointsToReceived;
              this.decisionIfBadge(newLevel);
            } else if (!("note-length-class" in frontmatter)) {
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateFileLength), "fromNoteLengthClassFirstTime");
              pointsReceived += pointsToReceived;
              this.decisionIfBadge(newLevel);
            }
            if (rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass) >= 1) {
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass), "fromInlinkClass");
              pointsReceived += pointsToReceived;
              this.decisionIfBadge(newLevel);
            } else if (!("inlink-class" in frontmatter)) {
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", inlinkClass), "fromInlinkClassFirstTime");
              pointsReceived += pointsToReceived;
              this.decisionIfBadge(newLevel);
            }
            if (rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut) >= 1) {
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut), "fromOutlinkClass");
              pointsReceived += pointsToReceived;
              this.decisionIfBadge(newLevel);
            } else if (!("outlink-class" in frontmatter)) {
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateOut), "fromOutlinkClassFirstTime");
              pointsReceived += pointsToReceived;
              this.decisionIfBadge(newLevel);
            }
            if (rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum) >= 1) {
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum), "fromProgressiveTummarizationMaturity");
              pointsReceived += pointsToReceived;
              this.decisionIfBadge(newLevel);
            } else if (!("progressive-summarization-maturity" in frontmatter)) {
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateProgressiveSum), "fromProgressiveTummarizationMaturityFirstTime");
              pointsReceived += pointsToReceived;
              this.decisionIfBadge(newLevel);
            }
            if (pointsReceived > 0) {
              const messagePoints = getRandomMessagePoints(pointsReceived);
              new import_obsidian5.Notice(messagePoints, 4e3);
              console.log(messagePoints);
            }
            this.writeFrontmatter(frontmatter, fileNameRate, rateFileLength, inlinkClass, rateOut, rateProgressiveSum, noteMajurity);
          }
        });
      } catch (e2) {
        if ((e2 == null ? void 0 : e2.name) === "YAMLParseError") {
          const errorMessage = `Update majuritys failed Malformed frontamtter on this file : ${file.path} ${e2.message}`;
          new import_obsidian5.Notice(errorMessage, 4e3);
          console.error(errorMessage);
        }
      }
      new import_obsidian5.Notice("note majurity updated!");
      console.log("note majurity updated!");
      await this.updateStatusBar(this.statusbarGamification);
    } else {
      console.error("file was not found to calculate majurities. Make sure one is active.");
    }
    if (detectIfNoteIsFirstTimeRated) {
      await this.increaseDailyCreatedNoteCount();
      await this.increaseWeeklyCreatedNoteCount();
    }
  }
  async resetDailyGoals() {
    let reset = false;
    if (!isSameDay(window.moment(this.getSettingString("dailyNoteCreationDate"), "DD.MM.YYYY"))) {
      this.setSettingNumber("dailyNoteCreationTask", 0);
      this.setSettingString("dailyNoteCreationDate", window.moment().format("DD.MM.YYYY"));
      await this.saveSettings();
      console.log(`daily Challenge reseted`);
      reset = true;
    }
    if (!isOneDayBefore(window.moment(this.getSettingString("weeklyNoteCreationDate"), "DD.MM.YYYY")) && !isSameDay(window.moment(this.getSettingString("weeklyNoteCreationDate"), "DD.MM.YYYY"))) {
      const daysPassed = window.moment().diff(window.moment(this.getSettingString("weeklyNoteCreationDate"), "DD.MM.YYYY"), "days") - 1;
      this.setSettingNumber("weeklyNoteCreationTask", 0);
      this.setSettingString("weeklyNoteCreationDate", window.moment().subtract(1, "day").format("DD.MM.YYYY"));
      this.decreaseStreakbooster(daysPassed);
      console.log(`${daysPassed} days passed`);
      await this.saveSettings();
      await this.updateStatusBar(this.statusbarGamification);
      console.log(`weekly Challenge reseted`);
      reset = true;
    }
    if (isOneDayBefore(window.moment(this.getSettingString("weeklyNoteCreationDate"), "DD.MM.YYYY")) && this.getSettingNumber("weeklyNoteCreationTask") == 7) {
      this.setSettingNumber("weeklyNoteCreationTask", 0);
      this.setSettingString("weeklyNoteCreationDate", window.moment().subtract(1, "day").format("DD.MM.YYYY"));
      await this.saveSettings();
      reset = true;
    }
    if (reset) {
      await this.updateAvatarPage(this.getSettingString("avatarPageName"));
    }
    if (this.getSettingBoolean("boosterFactorPerpetualProgress") == true && isMinutesPassed(window.moment(this.getSettingString("boosterDatePerpetualProgress"), "YYYY-MM-DD HH:mm:ss"), getBoosterRunTimeFromVarName("perpetualProgress"))) {
      this.setSettingBoolean("boosterFactorPerpetualProgress", false);
      console.log('"Perpetual Progress" has ended.');
    }
    if (this.getSettingBoolean("boosterFactorStrategicSynapses") == true && isMinutesPassed(window.moment(this.getSettingString("boosterDateStrategicSynapses"), "YYYY-MM-DD HH:mm:ss"), getBoosterRunTimeFromVarName("strategicSynapses"))) {
      this.setSettingBoolean("boosterFactorStrategicSynapses", false);
      console.log('"Strategic Synapses" has ended.');
    }
    if (this.getSettingBoolean("boosterFactorLinkersLode") == true && isMinutesPassed(window.moment(this.getSettingString("boosterDateLinkersLode"), "YYYY-MM-DD HH:mm:ss"), getBoosterRunTimeFromVarName("linkersLode"))) {
      this.setSettingBoolean("boosterFactorLinkersLode", false);
      console.log('"Linkers Lode" has ended.');
    }
    if (this.getSettingBoolean("boosterFactorRecursiveReflection") == true && isMinutesPassed(window.moment(this.getSettingString("boosterDateRecursiveReflection"), "YYYY-MM-DD HH:mm:ss"), getBoosterRunTimeFromVarName("recursiveReflection"))) {
      this.setSettingBoolean("boosterFactorRecursiveReflection", false);
      console.log('"Recursive Reflection" has ended.');
    }
    if (this.getSettingBoolean("boosterFactorSynapticSurge") == true && isMinutesPassed(window.moment(this.getSettingString("boosterDateSynapticSurge"), "YYYY-MM-DD HH:mm:ss"), getBoosterRunTimeFromVarName("synapticSurge"))) {
      this.setSettingBoolean("boosterFactorSynapticSurge", false);
      console.log('"Synaptic Surge" has ended.');
    }
    if (this.getSettingBoolean("boosterFactorTitleTitan") == true && isMinutesPassed(window.moment(this.getSettingString("boosterDateTitleTitan"), "YYYY-MM-DD HH:mm:ss"), getBoosterRunTimeFromVarName("titleTitan"))) {
      this.setSettingBoolean("boosterFactorTitleTitan", false);
      console.log('"Title Titan" has ended.');
    }
    if (this.getSettingBoolean("boosterFactorPrecisionPrism") == true && isMinutesPassed(window.moment(this.getSettingString("boosterDatePrecisionPrism"), "YYYY-MM-DD HH:mm:ss"), getBoosterRunTimeFromVarName("precisionPrism"))) {
      this.setSettingBoolean("boosterFactorPrecisionPrism", false);
      console.log('"Precision Prism" has ended.');
    }
    if (this.getSettingBoolean("boosterFactorHyperlinkHarmony") == true && isMinutesPassed(window.moment(this.getSettingString("boosterDateHyperlinkHarmony"), "YYYY-MM-DD HH:mm:ss"), getBoosterRunTimeFromVarName("hyperlinkHarmony"))) {
      this.setSettingBoolean("boosterFactorHyperlinkHarmony", false);
      console.log('"Hyperlink Harmony" has ended.');
    }
    if (this.getSettingBoolean("boosterFactorEphemeralEuphoria") == true && isMinutesPassed(window.moment(this.getSettingString("boosterDateEphemeralEuphoria"), "YYYY-MM-DD HH:mm:ss"), getBoosterRunTimeFromVarName("ephemeralEuphoria"))) {
      this.setSettingBoolean("boosterFactorEphemeralEuphoria", false);
      console.log('"Ephemeral Euphoria" has ended.');
    }
  }
  async increaseDailyCreatedNoteCount() {
    let newDailyNoteCreationTask = this.getSettingNumber("dailyNoteCreationTask");
    if (newDailyNoteCreationTask < 2) {
      newDailyNoteCreationTask++;
      this.setSettingNumber("dailyNoteCreationTask", newDailyNoteCreationTask);
      await this.saveSettings();
      if (newDailyNoteCreationTask == 1) {
        await this.updateAvatarPage(this.getSettingString("avatarPageName"));
        console.log(`${newDailyNoteCreationTask}/2 Notes created today.`);
      } else if (newDailyNoteCreationTask == 2) {
        this.increaseStreakbooster(streakboosterIncreaseDaily);
        await this.saveSettings();
        await this.updateStatusBar(this.statusbarGamification);
        await this.giveStatusPoints(pointsForDailyChallenge, "formIncreaseDailyCreatedNoteCount");
        const message = getRandomMessageTwoNoteChallenge(pointsForDailyChallenge * (this.getSettingNumber("badgeBoosterFactor") + this.getSettingNumber("streakbooster")));
        console.log(`daily Challenge reached! ${newDailyNoteCreationTask}/2 created.`);
        new import_obsidian5.Notice(message, 4e3);
        console.log(message);
      } else {
        console.log(`${newDailyNoteCreationTask}/2 Notes created today.`);
      }
    }
  }
  async increaseWeeklyCreatedNoteCount() {
    if (isOneDayBefore(window.moment(this.getSettingString("weeklyNoteCreationDate"), "DD.MM.YYYY"))) {
      await this.checkForWeeklyNoteChallengeBelow7();
    } else if (isSameDay(window.moment(this.getSettingString("weeklyNoteCreationDate"), "DD.MM.YYYY"))) {
      console.log(`daily note creation was rated already today.`);
    } else {
      this.setSettingString("weeklyNoteCreationDate", window.moment().format("DD.MM.YYYY"));
      this.setSettingNumber("weeklyNoteCreationTask", 1);
      await this.saveSettings();
    }
  }
  async checkForWeeklyNoteChallengeBelow7() {
    let currentWeeklyCreatedNotes = this.getSettingNumber("weeklyNoteCreationTask");
    if (currentWeeklyCreatedNotes < 7) {
      currentWeeklyCreatedNotes++;
      this.setSettingString("weeklyNoteCreationDate", window.moment().format("DD.MM.YYYY"));
      this.setSettingNumber("weeklyNoteCreationTask", currentWeeklyCreatedNotes);
      await this.saveSettings();
      await this.checkForWeeklyNoteChallengeEvaluation(currentWeeklyCreatedNotes);
    }
  }
  async checkForWeeklyNoteChallengeEvaluation(newWeeklyNoteCreationTask) {
    if (newWeeklyNoteCreationTask <= 6) {
      await this.updateAvatarPage(this.getSettingString("avatarPageName"));
      console.log(`${newWeeklyNoteCreationTask}/7 Notes created in a chain.`);
    } else if (newWeeklyNoteCreationTask == 7) {
      this.increaseStreakbooster(streakboosterIncreaseWeekly);
      await this.saveSettings();
      await this.giveStatusPoints(pointsForWeeklyChallenge, "fromCheckForWeeklyNoteChallengeEvaluation");
      console.log(`Weekly Challenge reached! ${newWeeklyNoteCreationTask}/7 created in a chain.`);
      const message = getRandomMessageWeeklyChallenge(pointsForWeeklyChallenge * (this.getSettingNumber("badgeBoosterFactor") + this.getSettingNumber("streakbooster")));
      new import_obsidian5.Notice(message, 4e3);
      console.log(message);
    } else {
      console.log(`${newWeeklyNoteCreationTask}/7 Notes created in a chain.`);
    }
  }
  async updateStatusBar(statusbar) {
    const currentLevel = getLevelForPoints(this.getSettingNumber("statusPoints"));
    const progressbarPercent = (this.getSettingNumber("statusPoints") - currentLevel.points) / (currentLevel.pointsNext - currentLevel.points) * 100;
    const charNumProgressbar = 10;
    const barLength = Math.round(progressbarPercent / charNumProgressbar);
    const boosterFactor = this.getSettingNumber("streakbooster");
    statusbar.setText(`\u{1F3B2}|lvl: ${this.getSettingNumber("statusLevel")} | ${this.createProgressbar(charNumProgressbar, barLength)}|\u{1F680}${boosterFactor}${this.rateBoosterDirection()}`);
  }
  rateBoosterDirection() {
    let direction = "\u2B06\uFE0F";
    if (this.getSettingBoolean("streakboosterDate")) {
      direction = "\u2B06\uFE0F";
    } else {
      direction = "\u2B07\uFE0F";
    }
    return direction;
  }
  createProgressbar(charNumProgressbar, barLength) {
    let progressbar = "";
    for (let i2 = 1; i2 <= charNumProgressbar; i2++) {
      if (i2 <= barLength) {
        progressbar += "=";
      } else {
        progressbar += "-";
      }
    }
    return progressbar;
  }
  async loadSettings() {
    this.settings = Object.assign({}, defaultSettings, await this.loadData());
    console.log("loadSettings()");
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async giveStatusPoints(pointsToAdd, caller) {
    let boosterFactor = 1;
    let streakbooster = this.getSettingNumber("streakbooster");
    let boosterFactorPerpetualProgress = 0;
    let boosterFactorStrategicSynapses = 0;
    let boosterFactorLinkersLode = 0;
    let boosterFactorRecursiveReflection = 0;
    let boosterFactorSynapticSurge = 0;
    let boosterFactorTitleTitan = 0;
    let boosterFactorPrecisionPrism = 0;
    let boosterFactorHyperlinkHarmony = 0;
    let boosterFactorEphemeralEuphoria = 0;
    if (this.getSettingBoolean("badgeBoosterState")) {
      boosterFactor = this.getSettingNumber("badgeBoosterFactor");
    }
    if (this.getSettingBoolean("boosterFactorPerpetualProgress")) {
      boosterFactorPerpetualProgress = 3;
    }
    if (this.getSettingBoolean("boosterFactorStrategicSynapses")) {
      boosterFactorStrategicSynapses = 3;
    }
    if (this.getSettingBoolean("boosterFactorLinkersLode")) {
      boosterFactorLinkersLode = 10;
    }
    if (this.getSettingBoolean("boosterFactorRecursiveReflection") && (caller == "fromNoteMajurity" || caller == "fromTitleClass" || caller == "fromNoteLengthClass" || caller == "fromInlinkClass" || caller == "fromOutlinkClass" || caller == "fromProgressiveTummarizationMaturity")) {
      boosterFactorRecursiveReflection = 5;
    }
    if (this.getSettingBoolean("boosterFactorSynapticSurge") && (caller == "fromInlinkClass" || caller == "fromOutlinkClass")) {
      boosterFactorSynapticSurge = 20;
    }
    if (this.getSettingBoolean("boosterFactorTitleTitan") && caller == "fromTitleClass") {
      boosterFactorTitleTitan = 4;
    }
    if (this.getSettingBoolean("boosterFactorPrecisionPrism") && caller == "fromNoteLengthClass") {
      boosterFactorPrecisionPrism = 4;
    }
    if (this.getSettingBoolean("boosterFactorHyperlinkHarmony") && (caller == "fromInlinkClass" || caller == "fromOutlinkClass")) {
      boosterFactorHyperlinkHarmony = 5;
    }
    if (this.getSettingBoolean("boosterFactorEphemeralEuphoria")) {
      boosterFactorEphemeralEuphoria = 80;
    }
    pointsToReceived = pointsToAdd * (boosterFactor + streakbooster + boosterFactorPerpetualProgress + boosterFactorStrategicSynapses + boosterFactorLinkersLode + boosterFactorRecursiveReflection + boosterFactorSynapticSurge + boosterFactorTitleTitan + boosterFactorPrecisionPrism + boosterFactorHyperlinkHarmony + boosterFactorEphemeralEuphoria);
    this.setSettingNumber("statusPoints", pointsToReceived + this.getSettingNumber("statusPoints"));
    return this.updateAvatarPage(this.getSettingString("avatarPageName"));
  }
  async increaseStreakbooster(increaseValue) {
    let newBoosterFakfor = parseFloat((this.getSettingNumber("streakbooster") + increaseValue).toFixed(streakboosterIncreaseWeekly));
    if (newBoosterFakfor > 80) {
      newBoosterFakfor = 80;
    }
    this.setSettingNumber("streakbooster", newBoosterFakfor);
    this.setSettingBoolean("streakboosterDate", true);
    console.log(`streakbooster: ${this.getSettingNumber("streakbooster")}`);
  }
  async decreaseStreakbooster(decreaseValue) {
    let newBoosterFakfor = parseFloat((this.getSettingNumber("streakbooster") - decreaseValue).toFixed(streakboosterDecrease));
    this.setSettingNumber("streakbooster", newBoosterFakfor);
    if (newBoosterFakfor < 0) {
      newBoosterFakfor = 0;
    }
    this.setSettingNumber("streakbooster", newBoosterFakfor);
    this.setSettingBoolean("streakboosterDate", false);
  }
  async updateAvatarPage(avatarPageName) {
    const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
    if (existingFile == null) {
      console.log(`File ${avatarPageName}.md does not exist`);
      return false;
    }
    const file = existingFile;
    const content = await app.vault.read(file);
    let reference = null;
    let reference2 = null;
    let reference3 = null;
    let reference4 = null;
    let end = null;
    let start = null;
    let end2 = null;
    let start2 = null;
    let end3 = null;
    let start3 = null;
    let end4 = null;
    let start4 = null;
    const lines = content.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      const line = lines[i2].trim();
      if (line === "^levelAndPoints") {
        if (reference === null) {
          reference = i2;
        }
      }
      if (line === "^dailyNotesChallenge") {
        if (reference2 === null) {
          reference2 = i2;
        }
      }
      if (line === "^weeklyNotesChallenge") {
        if (reference3 === null) {
          reference3 = i2;
        }
      }
      if (line === "^boosterFactor") {
        if (reference4 === null) {
          reference4 = i2;
        }
      }
    }
    const newPoints = this.getSettingNumber("statusPoints");
    const level = getLevelForPoints(newPoints);
    let nextLevelAt = this.getSettingNumber("xpForNextLevel");
    let receiveBadge = false;
    if (this.getSettingNumber("statusLevel") < level.level) {
      new import_obsidian5.Notice(`With ${newPoints} points, the current level is ${level.level}.`, 5e3);
      receiveBadge = checkIfReceiveABadge(this.getSettingNumber("statusLevel"), level.level);
      this.setSettingNumber("statusLevel", level.level);
      nextLevelAt = level.pointsNext;
      this.setSettingNumber("xpForNextLevel", level.pointsNext);
    }
    const progressBarEnd = nextLevelAt - newPoints;
    const newPointsString = "| **Level**  | **" + level.level + "** |\n| Points | " + newPoints + "    |\n^levelAndPoints\n```chart\ntype: bar\nlabels: [Expririence]\nseries:\n  - title: points reached\n    data: [" + newPoints + "]\n  - title: points to earn to level up\n    data: [" + progressBarEnd + "]\nxMin: " + level.points + "\nxMax: " + level.pointsNext + '\ntension: 0.2\nwidth: 40%\nlabelColors: false\nfill: false\nbeginAtZero: false\nbestFit: false\nbestFitTitle: undefined\nbestFitNumber: 0\nstacked: true\nindexAxis: y\nxTitle: "progress"\nlegend: false\n```';
    const dailyChallenge = "| **daily Notes** | *" + pointsForDailyChallenge * (this.getSettingNumber("badgeBoosterFactor") + this.getSettingNumber("streakbooster")) + "EP* | **" + this.getSettingNumber("dailyNoteCreationTask") + "/2**   |";
    const daysLeftInWeeklyChain = 7 - this.getSettingNumber("weeklyNoteCreationTask");
    const weeklyChallenge = "| **weekly Notes** | *" + pointsForWeeklyChallenge * (this.getSettingNumber("badgeBoosterFactor") + this.getSettingNumber("streakbooster")) + "EP*     |  **" + this.getSettingNumber("weeklyNoteCreationTask") + "/7**   |\n^weeklyNotesChallenge\n```chart\ntype: bar\nlabels: [days done in a row]\nseries:\n  - title: days to do in a row\n    data: [" + this.getSettingNumber("weeklyNoteCreationTask") + "]\n  - title: points to earn to level up\n    data: [" + daysLeftInWeeklyChain + ']\nxMin: 0\nxMax: 7\ntension: 0.2\nwidth: 40%\nlabelColors: false\nfill: false\nbeginAtZero: false\nbestFit: false\nbestFitTitle: undefined\nbestFitNumber: 0\nstacked: true\nindexAxis: y\nxTitle: "progress"\nlegend: false\n```';
    const boosterFactor = "| **booster factor** | **" + this.getSettingNumber("streakbooster") + "** |";
    if (reference != null && reference2 != null && reference3 != null && reference4 != null) {
      start = reference - 2;
      end = reference + 24;
      start2 = reference2 - 1 - 25;
      end2 = reference2 - 25;
      start3 = reference3 - 1 - 25;
      end3 = reference3 + 24 - 25;
      start4 = reference4 - 1 - 25;
      end4 = reference4 - 25;
      const newLines = [...lines.slice(0, start), newPointsString, ...lines.slice(end)];
      const newLines2 = [...newLines.slice(0, start2), dailyChallenge, ...newLines.slice(end2)];
      const newLines3 = [...newLines2.slice(0, start3), weeklyChallenge, ...newLines2.slice(end3)];
      const newLines4 = [...newLines3.slice(0, start4), boosterFactor, ...newLines3.slice(end4)];
      await app.vault.modify(file, newLines4.join("\n"));
    }
    return receiveBadge;
  }
  async giveBadgeInProfile(avatarPageName, badge) {
    const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
    if (existingFile == null) {
      console.log(`File ${avatarPageName}.md does not exist`);
      return;
    }
    const file = existingFile;
    const content = await app.vault.read(file);
    let reference = null;
    let reference2 = null;
    let end = null;
    let start = null;
    let end2 = null;
    let start2 = null;
    const lines = content.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      const line = lines[i2].trim();
      if (line === "#### achieved") {
        if (reference === null) {
          reference = i2;
        }
      }
      if (line === badge.level + ": *" + badge.name + "*") {
        if (reference2 === null) {
          reference2 = i2;
        }
      }
    }
    if (reference != null && reference2 != null) {
      end = reference + 1;
      start = reference + 1;
      end2 = reference2 + 2;
      start2 = reference2 + 1;
      const badgeString = "**" + badge.name + "** " + badge.level + "\n> " + badge.description + " - *" + window.moment().format("D.M.YY") + "*\n";
      const newLines = [...lines.slice(0, start), badgeString, ...lines.slice(end)];
      const newLines2 = [...newLines.slice(0, start2), ...newLines.slice(end2)];
      await app.vault.modify(file, newLines2.join("\n"));
      console.log(`badgeString: ${badgeString}`);
    }
  }
  async giveInitBadgeInProfile(avatarPageName, badge) {
    const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
    if (existingFile == null) {
      console.log(`File ${avatarPageName}.md does not exist`);
      return;
    }
    const file = existingFile;
    const content = await app.vault.read(file);
    let reference = null;
    let end = null;
    let start = null;
    const lines = content.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      const line = lines[i2].trim();
      if (line === "#### achieved") {
        if (reference === null) {
          reference = i2;
        }
      }
    }
    if (reference != null) {
      end = reference + 2;
      start = reference + 1;
      const badgeString = "**" + badge.name + "**\n> " + badge.description + " - *" + window.moment().format("D.M.YY") + "*\n";
      const newLines = [...lines.slice(0, start), badgeString, ...lines.slice(end)];
      await app.vault.modify(file, newLines.join("\n"));
      console.log(`badgeString: ${badgeString}`);
    }
  }
  async removeBadgesWhenInitLevelHigher(avatarPageName, level) {
    const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
    if (existingFile == null) {
      console.log(`File ${avatarPageName}.md does not exist`);
      return;
    }
    const file = existingFile;
    const content = await app.vault.read(file);
    let reference = null;
    let reference2 = null;
    const lines = content.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      const line = lines[i2].trim();
      if (line === "#### outstanding") {
        if (reference === null) {
          reference = i2;
        }
      }
      if (reference != null && reference2 == null) {
        const levelRegex = /level (\d+)/;
        const match2 = line.match(levelRegex);
        if (match2) {
          const levelNumber = parseInt(match2[1], 10);
          if (levelNumber > level) {
            reference2 = i2;
          }
        }
      }
    }
    if (reference != null && reference2 != null) {
      const newLines = [...lines.slice(0, reference + 1), ...lines.slice(reference2)];
      await app.vault.modify(file, newLines.join("\n"));
    }
  }
  async createChart(vault) {
    const files = vault.getMarkdownFiles();
    const earliestFile = findEarliestModifiedFile(files);
    const earliestDate = earliestFile.stat.mtime;
    let monthCounter = 0;
    let dateCount = new Date(earliestDate);
    const fileDateMonthMapMod = /* @__PURE__ */ new Map();
    const monthcount = monthsBetween(new Date(earliestDate), new Date());
    let dateString = dateCount.getMonth() + 1 + "." + dateCount.getFullYear();
    let yLabel = "";
    monthCounter = 0;
    dateCount = new Date(earliestDate);
    dateString = dateCount.getMonth() + 1 + "." + dateCount.getFullYear();
    while (monthCounter < monthcount) {
      dateString = dateCount.getMonth() + 1 + "." + dateCount.getFullYear();
      yLabel = yLabel + dateString + ", ";
      dateCount.setMonth(dateCount.getMonth() + 1);
      monthCounter += 1;
      fileDateMonthMapMod.set(dateString, 0);
    }
    yLabel = yLabel.slice(0, yLabel.length - 2);
    const modificationDates = getModificationDates(files);
    for (let i2 = 0; i2 < modificationDates.length; i2++) {
      const formattedDate = format(modificationDates[i2], "M.yyyy");
      const currentCount = fileDateMonthMapMod.get(formattedDate);
      if (currentCount !== void 0) {
        fileDateMonthMapMod.set(formattedDate, currentCount + 1);
      } else {
        fileDateMonthMapMod.set(formattedDate, 1);
      }
    }
    let charStringModified = "";
    for (const [value] of fileDateMonthMapMod) {
      charStringModified = charStringModified + value + ", ";
    }
    charStringModified = charStringModified.slice(0, charStringModified.length - 2);
    return createChartFormat(yLabel, charStringModified, this.getSettingNumber("chartReduzierungMonate"));
  }
  async decisionIfBadge(newLevel) {
    newLevel.then((result) => {
      if (result) {
        const badge = getBadgeForLevel(this.getSettingNumber("statusLevel"), false);
        new import_obsidian5.Notice(`You've earned the "${badge.name}" badge. ${badge.description}`, 5e3);
        console.log(`You've earned the "${badge.name}" badge. ${badge.description}`);
        this.giveBadgeInProfile(this.getSettingString("avatarPageName"), badge);
        this.setSettingBoolean("badgeBoosterState", false);
        this.setSettingNumber("badgeBoosterFactor", 1);
      }
    });
  }
  async removeKeysFromFrontmatter() {
    const { vault } = this.app;
    const fileCountMap = await getFileCountMap(this.app, this.getSettingString("tagsExclude"), this.getSettingString("folderExclude"));
    for (const fileName of fileCountMap.keys()) {
      const files = vault.getFiles();
      const file = files.find((file2) => file2.basename === fileName);
      if (!file) {
        console.warn(`File ${fileName} not found.`);
        continue;
      }
      console.log(`Processing file ${fileName}`);
      try {
        await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
          delete frontmatter["title-class"];
          delete frontmatter["note-length-class"];
          delete frontmatter["inlink-class"];
          delete frontmatter["outlink-class"];
          delete frontmatter["progressive-summarization-maturity"];
          delete frontmatter["note-maturity"];
        });
      } catch (e2) {
        if ((e2 == null ? void 0 : e2.name) === "YAMLParseError") {
          const errorMessage = `Update majuritys failed Malformed frontamtter ${e2.message}`;
          new import_obsidian5.Notice(errorMessage, 4e3);
          console.error(errorMessage);
        }
      }
    }
  }
  async whichLevelNextBadge(currentLevel) {
    let nextBadgeLevel = 0;
    for (let i2 = currentLevel; i2 < 110; i2++) {
      const badge = getBadgeForLevel(i2, true);
      const levelRegex = /level (\d+)/;
      const match2 = badge.level.match(levelRegex);
      if (match2) {
        const levelNumber = parseInt(match2[1], 10);
        if (levelNumber > currentLevel && nextBadgeLevel == 0) {
          nextBadgeLevel = levelNumber;
        }
      }
    }
    return nextBadgeLevel;
  }
  async boosterForInit() {
    const nextBadgeAt = await this.whichLevelNextBadge(this.getSettingNumber("statusLevel"));
    const statusPointsToReach = statusPointsForLevel(nextBadgeAt);
    const boosterFactor = Math.round((statusPointsToReach - this.getSettingNumber("statusPoints")) / 50 / 300);
    this.setSettingNumber("badgeBoosterFactor", boosterFactor);
    this.setSettingBoolean("badgeBoosterState", true);
    return boosterFactor;
  }
  async openAvatarFile() {
    var _a;
    const existingFile = app.vault.getAbstractFileByPath(`${this.getSettingString("avatarPageName")}.md`);
    if (existingFile) {
      const sourcePath = ((_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path) || "";
      await app.workspace.openLinkText(existingFile.path, sourcePath);
    } else {
      console.log("File not found or unable to open.");
    }
  }
  getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }
  async acquireIngredients() {
    let earnedIngredientToShow = [];
    if (Math.random() < chanceToEarnIngredient) {
      const randomAmount = this.getRandomInt(1, 3);
      for (let i2 = 1; i2 <= randomAmount; i2++) {
        const randomIngredientIndex = this.getRandomInt(0, listOfUseableIngredientsToBeShown.length - 1);
        const earnedIngredient = elements[randomIngredientIndex];
        let elementCount = this.getSettingNumber(earnedIngredient.varName);
        earnedIngredientToShow.push(earnedIngredient.name);
        if (elementCount !== null && typeof elementCount === "number") {
          this.setSettingNumber(earnedIngredient.varName, elementCount + 1);
          this.saveSettings();
        } else {
          console.error(`Invalid element count for ${earnedIngredient.varName}`);
        }
      }
      console.log(`You earned: ${concatenateStrings(earnedIngredientToShow)}`);
      new import_obsidian5.Notice(`You earned ${concatenateStrings(earnedIngredientToShow)}`, 3e3);
    } else {
      console.log("You did not earn an ingredient this time.");
    }
  }
};
function concatenateStrings(arr) {
  if (arr.length === 1) {
    return arr[0];
  } else {
    const frequencyMap = {};
    arr.forEach((item) => {
      if (frequencyMap[item]) {
        frequencyMap[item]++;
      } else {
        frequencyMap[item] = 1;
      }
    });
    const resultArray = [];
    for (const [key, value] of Object.entries(frequencyMap)) {
      if (value === 1) {
        resultArray.push(key);
      } else {
        resultArray.push(`${value} x ${key}`);
      }
    }
    return resultArray.join(", ");
  }
}
function getBoosterRunTimeFromVarName(boosterVarName) {
  for (const element of boosterRecipes) {
    if (element.varname === boosterVarName) {
      return element.boosterRunTime;
    }
  }
  return 0;
}
function isSameDay(inputDate) {
  const currentDate = window.moment();
  return currentDate.isSame(inputDate, "day");
}
function isOneDayBefore(inputDate) {
  const oneDayBeforeCurrent = window.moment().subtract(1, "day");
  return inputDate.isSame(oneDayBeforeCurrent, "day");
}
function isMinutesPassed(inputDate, minutesPassed) {
  const minutesAgo = window.moment().subtract(minutesPassed, "minutes");
  return inputDate.isSameOrBefore(minutesAgo);
}
function hoursUntilMinutesPassed(inputDate, minutesToPass) {
  const currentTime = window.moment();
  const targetTime = inputDate.clone().add(minutesToPass, "minutes");
  if (targetTime.isAfter(currentTime)) {
    const hoursRemaining = targetTime.diff(currentTime, "hours");
    return hoursRemaining;
  } else {
    return 0;
  }
}
async function createAvatarFile(app2, fileName) {
  const existingFile = app2.vault.getAbstractFileByPath(`${fileName}.md`);
  if (existingFile instanceof import_obsidian5.TFile) {
    console.log(`File ${fileName}.md already exists`);
    return;
  }
  await app2.vault.create(`${fileName}.md`, avatarInitContent);
}
async function replaceFormatStrings(layer2, layer3) {
  const activeView = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView);
  if (!activeView) {
    console.error("No active Markdown view found.");
    return;
  }
  const editor = activeView.editor;
  const selectedText = editor.getSelection();
  if (!selectedText) {
    console.error("No text selected (for progressive summarization switch Layer 2 & 3).");
    return;
  }
  let replacedText = selectedText.replaceAll(layer2, "\xA7\xA7\xA7\xA7");
  replacedText = replacedText.replaceAll(layer3, "\u20AC\u20AC\u20AC\u20AC");
  replacedText = replacedText.replaceAll("\u20AC\u20AC\u20AC\u20AC", layer2);
  replacedText = replacedText.replaceAll("\xA7\xA7\xA7\xA7", layer3);
  editor.replaceSelection(replacedText);
}
function rateDirectionForStatusPoints(ratingCurrent, ratingNew) {
  let ratingFaktor;
  if (parseInt(ratingCurrent, 10) < ratingNew) {
    ratingFaktor = ratingNew - parseInt(ratingCurrent, 10);
  } else {
    ratingFaktor = 0;
  }
  return ratingFaktor;
}
/*! Bundled license information:

crypto-js/ripemd160.js:
  (** @preserve
  	(c) 2012 by Cédric Mesnil. All rights reserved.
  
  	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
  
  	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
  	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
  
  	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  	*)

crypto-js/mode-ctr-gladman.js:
  (** @preserve
   * Counter block mode compatible with  Dr Brian Gladman fileenc.c
   * derived from CryptoJS.mode.CTR
   * Jan Hruby jhruby.web@gmail.com
   *)
*/
//# sourceMappingURL=data:application/json;base64,
