/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => gamification
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var defaultSettings = {
  enableInitCommand: true,
  bindEnter: true,
  bindTab: true,
  avatarPageName: "Avatar - Gamification",
  tagsExclude: "",
  folderExclude: "Excalidraw",
  progressiveSumLayer2: "==",
  progressiveSumLayer3: "**",
  numAllFiles: 1,
  numAllFilesCount: 0,
  chartReduzierungMonate: 0,
  statusPoints: 0,
  statusLevel: 1,
  xpForNextLevel: 1e3,
  gamificationStartDate: "12.08.2023",
  badgeBoosterState: false,
  badgeBoosterFactor: 1,
  debug: false,
  dailyNoteCreationTask: 0,
  dailyNoteCreationDate: "12.08.2023",
  weeklyNoteCreationTask: 0,
  weeklyNoteCreationDate: "12.08.2023",
  // boosterIncredients: 'Whimsical Wisdom Crystals,Curiosity Coins,Eureka Energy Orbs,Serendipity Stars,Creativity Crystals,Discovery Dice,Metaphorical Medals,Curious Cat Companion,Another One',
  nexusNode: 0,
  connectionCrystal: 0,
  masteryScroll: 0,
  insightPrism: 0,
  reflectiveEssence: 0,
  amplificationCrystal: 0,
  creativeCatalyst: 0,
  precisionLens: 0,
  temporalTweaker: 0,
  perpetualProgress: 0,
  strategicSynapses: 0,
  acceleratedAcquisition: 0,
  linkersLode: 0,
  effortlessExpansion: 0,
  recursiveReflection: 0,
  synapticSurge: 0,
  inspirationInfusion: 0,
  titleTitan: 0,
  precisionPrism: 0,
  hyperlinkHarmony: 0
};
var GamificationPluginSettings = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.addClass("excalidraw-settings");
    this.containerEl.empty();
    const coffeeDiv = containerEl.createDiv("coffee");
    coffeeDiv.addClass("ex-coffee-div");
    const coffeeLink = coffeeDiv.createEl("a", {
      href: "https://ko-fi.com/andreastrebing"
    });
    const coffeeImg = coffeeLink.createEl("img", {
      attr: {
        src: "https://cdn.ko-fi.com/cdn/kofi3.png?v=3"
      }
    });
    coffeeImg.height = 45;
    containerEl.createEl("h2", { text: "Gamify your PKM - Settings" });
    console.log("settings called");
    new import_obsidian.Setting(containerEl).setName("#tags to ignore").setDesc('enter tags without # and separate with ", ".\nInclude nested tags.').addText((text) => text.setPlaceholder("Enter your tag1, tag2/subtag, \u2026").setValue(this.plugin.settings.tagsExclude).onChange(async (value) => {
      this.plugin.settings.tagsExclude = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("folder to ignore").setDesc('enter folder whichs content shall be ignored. Separate with ", ".').addText((text) => text.setPlaceholder("Enter your folder1, folder2, \u2026").setValue(this.plugin.settings.folderExclude).onChange(async (value) => {
      this.plugin.settings.folderExclude = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Profile Page Name").setDesc("you can change here the name of your profile page if you like.").addText((text) => text.setPlaceholder("name").setValue(this.plugin.settings.avatarPageName).onChange(async (value) => {
      this.plugin.settings.avatarPageName = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h2", { text: "Other Settings" });
    new import_obsidian.Setting(containerEl).setName("Disable Init Command").setDesc("you can remove the init command from command prompt by switching off.\nrestart needed.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableInitCommand).onChange((value) => {
        this.plugin.settings.enableInitCommand = value;
        this.plugin.saveData(this.plugin.settings);
      })
    );
    new import_obsidian.Setting(containerEl).setName("limit the visible month in the chart on your avatar page: " + this.plugin.settings.avatarPageName).setDesc("if 0, all month will be shown. Enter a number how many month shall be shown.").addText((text) => text.setPlaceholder("Number of Month to show").setValue(this.plugin.settings.chartReduzierungMonate.toString()).onChange(async (value) => {
      this.plugin.settings.chartReduzierungMonate = parseInt(value);
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Progressive Summarization").setDesc("you can change which formatting you use for Layer 2 and 3.").addText((text) => text.setPlaceholder("Layer 2 is usually **").setValue(this.plugin.settings.progressiveSumLayer2).onChange(async (value) => {
      this.plugin.settings.progressiveSumLayer2 = value;
      await this.plugin.saveSettings();
    })).addText((text) => text.setPlaceholder("Layer 3 is usually ==").setValue(this.plugin.settings.progressiveSumLayer3).onChange(async (value) => {
      this.plugin.settings.progressiveSumLayer3 = value;
      await this.plugin.saveSettings();
    }));
  }
};

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/isDate/index.js
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/date-fns/esm/toDate/index.js
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || _typeof(argument) === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

// node_modules/date-fns/esm/isValid/index.js
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/defaultOptions/index.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters = {
  // Year
  y: function y(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var lightFormatters_default = formatters;

// node_modules/date-fns/esm/_lib/format/formatters/index.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters2 = {
  // Era
  G: function G(date, token, localize2) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize2.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize2.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize2.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y2(date, token, localize2) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize2.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters_default.y(date, token);
  },
  // Local week-numbering year
  Y: function Y(date, token, localize2, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize2.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function Q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q(date, token, localize2) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize2.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize2.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize2.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize2.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M2(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters_default.M(date, token);
      case "Mo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize2.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize2.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L(date, token, localize2) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize2.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize2.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize2.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize2.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w(date, token, localize2, options) {
    var week = getUTCWeek(date, options);
    if (token === "wo") {
      return localize2.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function I(date, token, localize2) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize2.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function d2(date, token, localize2) {
    if (token === "do") {
      return localize2.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters_default.d(date, token);
  },
  // Day of year
  D: function D(date, token, localize2) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize2.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function E(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c(date, token, localize2, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize2.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i(date, token, localize2) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize2.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize2.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize2.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize2.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize2.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a2(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B(date, token, localize2) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize2.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h2(date, token, localize2) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters_default.h(date, token);
  },
  // Hour [0-23]
  H: function H2(date, token, localize2) {
    if (token === "Ho") {
      return localize2.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters_default.H(date, token);
  },
  // Hour [0-11]
  K: function K(date, token, localize2) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function k(date, token, localize2) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize2.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function m2(date, token, localize2) {
    if (token === "mo") {
      return localize2.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters_default.m(date, token);
  },
  // Second
  s: function s2(date, token, localize2) {
    if (token === "so") {
      return localize2.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters_default.s(date, token);
  },
  // Fraction of second
  S: function S2(date, token) {
    return lightFormatters_default.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
var formatters_default = formatters2;

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "P":
      return formatLong2.date({
        width: "short"
      });
    case "PP":
      return formatLong2.date({
        width: "medium"
      });
    case "PPP":
      return formatLong2.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong2.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong2) {
  switch (pattern) {
    case "p":
      return formatLong2.time({
        width: "short"
      });
    case "pp":
      return formatLong2.time({
        width: "medium"
      });
    case "ppp":
      return formatLong2.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong2.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong2) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var longFormatters_default = longFormatters;

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
var formatDistance_default = formatDistance;

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function() {
    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
var formatLong_default = formatLong;

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
var formatRelative_default = formatRelative;

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, options) {
    var context = options !== null && options !== void 0 && options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
var localize_default = localize;

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function(pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return void 0;
}

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(string) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult)
      return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult)
      return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value,
      rest
    };
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
var match_default = match;

// node_modules/date-fns/esm/locale/en-US/index.js
var locale = {
  code: "en-US",
  formatDistance: formatDistance_default,
  formatLong: formatLong_default,
  formatRelative: formatRelative_default,
  localize: localize_default,
  match: match_default,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
var en_US_default = locale;

// node_modules/date-fns/esm/_lib/defaultLocale/index.js
var defaultLocale_default = en_US_default;

// node_modules/date-fns/esm/format/index.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale2 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : defaultLocale_default;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  var matched = input.match(escapedStringRegExp);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}

// src/constants.ts
var pointsNoteMajurity = 100;
var pointsMajurity = 10;
var pointsForDailyChallenge = 500;
var pointsForWeeklyChallenge = 2e3;
var avatarInitContent = `# Avatar

|        |     |
| ------ | --- |
| Level  | 0    |
| Points | 0    |
^levelAndPoints	
\`\`\`chart
type: bar
labels: [Expririence]
series:
  - title: points reached
    data: [0]
  - title: points to earn to level up
    data: [1000]
xMin: 0
xMax: 1000
tension: 0.2
width: 40%
labelColors: false
fill: false
beginAtZero: false
bestFit: false
bestFitTitle: undefined
bestFitNumber: 0
stacked: true
indexAxis: y
xTitle: "progress"
legend: false
\`\`\`

|             |     |       |
| ----------- | --- | ----- |
| **daily Notes** | *500EP* | **0/2** |
^dailyNotesChallenge
|  |     ||
| ---- | --- | --- |
| **weekly Notes** | *2000EP*     |  **0/7**   |
^weeklyNotesChallenge
\`\`\`chart
type: bar
labels: [Notes]
series:
  - title: days done in a row
    data: [0]
  - title: days to do in a row
    data: [7]
xMin: 0
xMax: 7
tension: 0.2
width: 40%
labelColors: false
fill: false
beginAtZero: false
bestFit: false
bestFitTitle: undefined
bestFitNumber: 0
stacked: true
indexAxis: y
xTitle: "days"
legend: false
\`\`\`

| Level | Count |
| :---: | :---: |
| Majurity 5 |\`$=dv.pages().where(p => [5, '5', '5\u27A1\uFE0F', '5\u2B07\uFE0F', '5\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 4 |\`$=dv.pages().where(p => [4, '4', '4\u27A1\uFE0F', '4\u2B07\uFE0F', '4\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 3 |\`$=dv.pages().where(p => [3, '3', '3\u27A1\uFE0F', '3\u2B07\uFE0F', '3\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 2 |\`$=dv.pages().where(p => [2, '2', '2\u27A1\uFE0F', '2\u2B07\uFE0F', '2\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 1 |\`$=dv.pages().where(p => [1, '1', '1\u27A1\uFE0F', '1\u2B07\uFE0F', '1\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|
| Majurity 0 |\`$=dv.pages().where(p => [0, '0', '0\u27A1\uFE0F', '0\u2B07\uFE0F', '0\u2B06\uFE0F'].includes(p.file.frontmatter['note-maturity'])).length\`|


\`\`\`chart
type: bar
labels: [0, 0, 0]
series:
  - title: modified
    data: [0, 0, 0]
tension: 0.2
width: 80 %
labelColors: false
fill: false
beginAtZero: false
bestFit: false
bestFitTitle: undefined
bestFitNumber: 0
stacked: true
yTitle: "Number of Notes"
xTitle: "Months"
xMin: 0
\`\`\`
^ChartMonth


### Badges
#### achieved


#### outstanding
level 5: *Enlightened Novice*
level 10: *Curious Connoisseur*
level 20: *Brainiac Trailblazer*
level 27: *Scholarly Trailblazer*
level 35: *Info Ninja Master*
level 42: *Wise Owl Guru*
level 50: *Einstein Incarnate*
level 60: *Mastermind Sage*
level 75: *Cerebral Maestro*
level 82: *Zen Knowledge Keeper*
level 90: *Grand Archivist Overlord*
level 100: *Omniscient Sage of Everything*



### **note-maturity = 5**
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 5 or note-maturity = "5" or note-maturity = "5\u27A1\uFE0F" or note-maturity = "5\u2B06\uFE0F" or note-maturity = "5\u2B07\uFE0F"
\`\`\`

### **note-maturity = 4**
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 4 or note-maturity = "4" or note-maturity = "4\u27A1\uFE0F" or note-maturity = "4\u2B06\uFE0F" or note-maturity = "4\u2B07\uFE0F"
\`\`\`

### note-maturity = 3
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 3 or note-maturity = "3" or note-maturity = "3\u27A1\uFE0F" or note-maturity = "3\u2B06\uFE0F" or note-maturity = "3\u2B07\uFE0F"
\`\`\`

### note-maturity = 2
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 2 or note-maturity = "2" or note-maturity = "2\u27A1\uFE0F" or note-maturity = "2\u2B06\uFE0F" or note-maturity = "2\u2B07\uFE0F"
\`\`\`

### note-maturity = 1
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 1 or note-maturity = "1" or note-maturity = "1\u27A1\uFE0F" or note-maturity = "1\u2B06\uFE0F" or note-maturity = "1\u2B07\uFE0F"
\`\`\`

### note-maturity = 0
\`\`\`dataview
List NoteMaturityCount
from ""
Where note-maturity = 0 or note-maturity = "0" or note-maturity = "0\u27A1\uFE0F" or note-maturity = "0\u2B06\uFE0F" or note-maturity = "0\u2B07\uFE0F"
\`\`\`
`;
var incrediments = [
  "Nexus Node",
  "Connection Crystal",
  "Mastery Scroll",
  "Insight Prism",
  "Reflective Essence",
  "Amplification Crystal",
  "Creative Catalyst",
  "Precision Lens"
];
var craftingItems = [
  { name: "Temporal Tweaker", incredients: ["2xS1", "1xS6"] },
  { name: "Perpetual Progress", incredients: ["2xS2", "1xS4"] },
  { name: "Strategic Synapses", incredients: ["3xS1", "2xS2"] },
  { name: "Accelerated Acquisition", incredients: ["1xS3", "2xS4"] },
  { name: "Linkers Lode", incredients: ["3xS2", "1xS1"] },
  { name: "Effortless Expansion", incredients: ["2xS3", "1xS6"] },
  { name: "Recursive Reflection", incredients: ["2xS4", "1xS5"] },
  { name: "Synaptic Surge", incredients: ["2xS2", "1xS1"] },
  { name: "Inspiration Infusion", incredients: ["2xS7", "1xS1"] },
  { name: "Title Titan", incredients: ["2xS8", "1xS7"] },
  { name: "Precision Prism", incredients: ["2xS8", "1xS2"] },
  { name: "Hyperlink Harmony", incredients: ["2xS2", "1xS6"] }
];
var elements = [
  { shortName: "S1", name: "Nexus Node", varName: "nexusNode" },
  { shortName: "S2", name: "Connection Crystal", varName: "connectionCrystal" },
  { shortName: "S3", name: "Mastery Scroll", varName: "masteryScroll" },
  { shortName: "S4", name: "Insight Prism", varName: "insightPrism" },
  { shortName: "S5", name: "Reflective Essence", varName: "reflectiveEssence" },
  { shortName: "S6", name: "Amplification Crystal", varName: "amplificationCrystal" },
  { shortName: "S7", name: "Creative Catalyst", varName: "creativeCatalyst" },
  { shortName: "S8", name: "Precision Lens", varName: "precisionLens" }
];
var boosterRecipes = [
  { varname: "temporalTweaker", name: "Temporal Tweaker", incredients: ["2xS1", "1xS6"] },
  { varname: "perpetualProgress", name: "Perpetual Progress", incredients: ["2xS2", "1xS4"] },
  { varname: "strategicSynapses", name: "Strategic Synapses", incredients: ["3xS1", "2xS2"] },
  { varname: "acceleratedAcquisition", name: "Accelerated Acquisition", incredients: ["1xS3", "2xS4"] },
  { varname: "linkersLode", name: "Linkers Lode", incredients: ["3xS2", "1xS1"] },
  { varname: "effortlessExpansion", name: "Effortless Expansion", incredients: ["2xS3", "1xS6"] },
  { varname: "recursiveReflection", name: "Recursive Reflection", incredients: ["2xS4", "1xS5"] },
  { varname: "synapticSurge", name: "Synaptic Surge", incredients: ["2xS2", "1xS1"] },
  { varname: "inspirationInfusion", name: "Inspiration Infusion", incredients: ["2xS7", "1xS1"] },
  { varname: "titleTitan", name: "Title Titan", incredients: ["2xS8", "1xS7"] },
  { varname: "precisionPrism", name: "Precision Prism", incredients: ["2xS8", "1xS2"] },
  { varname: "hyperlinkHarmony", name: "Hyperlink Harmony", incredients: ["2xS2", "1xS6"] }
];

// src/majuritycalculation.ts
var fs = __toESM(require("fs"));
var path = __toESM(require("path"));
function rateProgressiveSummarization(charCountTotal, layer2count, layer3count) {
  const percentLayer2 = layer2count * 100 / charCountTotal;
  const percentLayer3 = layer3count * 100 / layer2count;
  var layer2majurity = 0;
  var layer3majurity = 0;
  var majurity = 0;
  if (charCountTotal < 3e3) {
    majurity = 0;
  } else {
    if (percentLayer2 == 0) {
      layer2majurity = 0;
    } else if (percentLayer2 <= 10) {
      layer2majurity = 5;
    } else if (percentLayer2 <= 20) {
      layer2majurity = 4;
    } else if (percentLayer2 <= 30) {
      layer2majurity = 3;
    } else if (percentLayer2 <= 40) {
      layer2majurity = 2;
    } else if (percentLayer2 <= 40) {
      layer2majurity = 1;
    } else {
      layer2majurity = 0;
    }
    if (layer3count == 0) {
      layer3majurity = 0;
    } else if (percentLayer3 <= 10) {
      layer3majurity = 5;
    } else if (percentLayer3 <= 20) {
      layer3majurity = 4;
    } else {
      layer3majurity = 0;
    }
    if (layer2majurity == 1 && layer3majurity == 0) {
      majurity = 1;
    } else if (layer2majurity == 2 && layer3majurity == 0) {
      majurity = 2;
    } else if (layer2majurity >= 3 && layer3majurity == 0) {
      majurity = 3;
    } else if ((layer2majurity == 3 || layer2majurity == 4) && (layer3majurity == 4 || layer3majurity == 5)) {
      majurity = 4;
    } else if (layer2majurity == 5 && layer3majurity == 5) {
      majurity = 5;
    } else {
      majurity = 0;
    }
  }
  return majurity;
}
function countLayer2AndLayer3Characters(content, filename, layer2, layer3) {
  const filenameWithoutExtension = filename;
  const strippedContent = content.replace(/[*_~`]/g, "");
  const headingRegex = /^(#+)\s(.*)$/gm;
  const contentWithoutHeadings = strippedContent.replace(headingRegex, (match2, p1, p2) => {
    if (p2 === filenameWithoutExtension) {
      return "";
    }
    return match2;
  });
  const metadataRegex = /^---[\s\S]*?---/gm;
  const contentWithoutMetadata = contentWithoutHeadings.replace(metadataRegex, "");
  const tagRegex = /#[^\s]+/g;
  const contentWithoutTags = contentWithoutMetadata.replace(tagRegex, "");
  const linkRegex = /\[.*?\]\(.*?\)|\[\[.*?\]\]/g;
  const contentWithoutLinks = contentWithoutTags.replace(linkRegex, "");
  const filteredContent = contentWithoutLinks.split("\n").filter((line) => line.trim() !== "").filter((line) => line.trim() !== "---").join("\n");
  const charCount = filteredContent.length;
  let highlightedCount = 0;
  let boldCount = 0;
  var layer2exclude = "=";
  var layer3exclude = "\\*";
  if (layer3 == "**") {
    layer3 = "\\*\\*";
    layer3exclude = "\\*";
    layer2exclude = "=";
  }
  if (layer2 == "**") {
    layer2 = "\\*\\*";
    layer3exclude = "=";
    layer2exclude = "\\*";
  }
  const highlightRegex = new RegExp(`${layer2}[^${layer2exclude}]+${layer2}`, "g");
  const boldRegex = new RegExp(`${layer3}[^${layer3exclude}]+${layer3}`, "g");
  const highlightedMatches = content.match(highlightRegex);
  if (highlightedMatches) {
    highlightedCount = highlightedMatches.join("").length - highlightedMatches.length * 4;
    const layer2String = highlightedMatches.join("");
    const boldMatches = layer2String.match(boldRegex);
    if (boldMatches) {
      boldCount = boldMatches.join("").length - boldMatches.length * 4;
    }
  }
  return { charCount, highlightedCount, boldCount };
}
function rateLevelOfMaturity(noteLength, lengthOfTitle, Inlinks, outgoingLinks, progressiveSumMajurity) {
  var lengthMajurity = 0;
  if (noteLength >= progressiveSumMajurity) {
    lengthMajurity = noteLength;
  } else {
    lengthMajurity = progressiveSumMajurity;
  }
  const totalWeight = lengthMajurity + lengthOfTitle + Inlinks + outgoingLinks;
  const averageWeight = totalWeight / 5;
  if (averageWeight < 0.5) {
    return 0;
  } else if (averageWeight <= 1) {
    return 1;
  } else if (averageWeight <= 2) {
    return 2;
  } else if (averageWeight <= 3) {
    return 3;
  } else if (averageWeight <= 3.5) {
    return 4;
  } else if (averageWeight <= 4) {
    return 5;
  } else {
    return 0;
  }
}
function rateOutlinks(outlinks) {
  if (outlinks < 2) {
    return 0;
  } else if (outlinks < 3) {
    return 1;
  } else if (outlinks < 5) {
    return 4;
  } else if (outlinks < 9) {
    return 5;
  } else if (outlinks < 11) {
    return 3;
  } else if (outlinks < 12) {
    return 1;
  } else {
    return 0;
  }
}
function rateInlinks(numInlinks) {
  if (numInlinks == 0) {
    return 0;
  } else if (numInlinks < 4) {
    return 1;
  } else if (numInlinks < 8) {
    return 2;
  } else if (numInlinks < 11) {
    return 3;
  } else if (numInlinks < 16) {
    return 4;
  } else if (numInlinks >= 16 && numInlinks < 500) {
    return 5;
  } else {
    return 0;
  }
}
function rateDirection(ratingCurrent, ratingNew) {
  let rating = "";
  if (parseInt(ratingCurrent, 10) > ratingNew) {
    rating = ratingNew + "\u2B07\uFE0F";
  } else if (parseInt(ratingCurrent, 10) < ratingNew) {
    rating = ratingNew + "\u2B06\uFE0F";
  } else if (parseInt(ratingCurrent, 10) == ratingNew) {
    rating = ratingNew + "\u27A1\uFE0F";
  } else {
    rating = ratingNew + "";
  }
  return rating;
}
function rateLengthFilename(filename) {
  if (filename.length < 30) {
    return 0;
  } else if (filename.length < 80) {
    return 1;
  } else if (filename.length < 100) {
    return 3;
  } else if (filename.length < 150) {
    return 5;
  } else if (filename.length < 190) {
    return 4;
  } else if (filename.length < 210) {
    return 2;
  } else if (filename.length < 250) {
    return 1;
  } else {
    return 0;
  }
}
function rateNoteLength(contenlength) {
  if (contenlength < 200) {
    return 0;
  } else if (contenlength < 550) {
    return 4;
  } else if (contenlength < 1e3) {
    return 5;
  } else if (contenlength < 1200) {
    return 4;
  } else if (contenlength < 2e3) {
    return 3;
  } else if (contenlength < 2500) {
    return 2;
  } else if (contenlength < 3e3) {
    return 1;
  } else {
    return 0;
  }
}
function getNumberOfOutlinks(activeFile) {
  var _a;
  if (!activeFile) {
    return 0;
  }
  const inlinks = (_a = app.metadataCache.getFileCache(activeFile)) == null ? void 0 : _a.links;
  return inlinks ? Object.keys(inlinks).length : 0;
}
function countCharactersInActiveFile(content, filename) {
  const filenameWithoutExtension = filename;
  const strippedContent = content.replace(/[*_~`]/g, "");
  const headingRegex = /^(#+)\s(.*)$/gm;
  const contentWithoutHeadings = strippedContent.replace(headingRegex, (match2, p1, p2) => {
    if (p2 === filenameWithoutExtension) {
      return "";
    }
    return match2;
  });
  const metadataRegex = /^---[\s\S]*?---/gm;
  const contentWithoutMetadata = contentWithoutHeadings.replace(metadataRegex, "");
  const tagRegex = /#[^\s]+/g;
  const contentWithoutTags = contentWithoutMetadata.replace(tagRegex, "");
  const linkRegex = /\[.*?\]\(.*?\)|\[\[.*?\]\]/g;
  const contentWithoutLinks = contentWithoutTags.replace(linkRegex, "");
  const filteredContent = contentWithoutLinks.split("\n").filter((line) => line.trim() !== "").filter((line) => line.trim() !== "---").join("\n");
  const charCount = filteredContent.length;
  return charCount;
}
function count_inlinks(file) {
  const { app: { metadataCache: { resolvedLinks } } } = this;
  const { path: path2 } = file;
  const sumInlinks = Object.values(resolvedLinks).map((val) => {
    var _a;
    return (_a = val[path2]) != null ? _a : 0;
  }).reduce((left, right) => left + right, 0);
  return sumInlinks;
}
var getFileCountMap = async (app2, excludeTag, excludeFolder) => {
  const { vault } = app2;
  let excludedSubstrings = [];
  if (excludeTag == void 0) {
    excludedSubstrings = [];
  } else {
    excludedSubstrings = excludeTag.split(", ");
  }
  let excludedFolders = [];
  if (excludeFolder == void 0) {
    excludedFolders = [];
  } else {
    excludedFolders = excludeFolder.split(", ");
  }
  excludedFolders.push(".obsidian", ".trash");
  const fileCountMap = /* @__PURE__ */ new Map();
  const files = await vault.getMarkdownFiles();
  for (const file of files) {
    const fileName = file.basename;
    const currentCount = fileCountMap.get(fileName) || 0;
    fileCountMap.set(fileName, currentCount + 1);
    const fileContents = await app2.vault.read(file);
    if (!excludedSubstrings.some((substring) => fileContents.includes(substring)) && !excludedFolders.some((folder) => file.path.includes(folder))) {
      const fileName2 = file.basename;
      const currentCount2 = fileCountMap.get(fileName2) || 0;
      fileCountMap.set(fileName2, currentCount2 + 1);
    }
  }
  return fileCountMap;
};
var getFileMap = async (app2, excludeTag, excludeFolder) => {
  const { vault } = app2;
  let excludedSubstrings = [];
  if (excludeTag == void 0) {
    excludedSubstrings = [];
  } else {
    excludedSubstrings = excludeTag.split(", ");
  }
  let excludedFolders = [];
  if (excludeFolder == void 0) {
    excludedFolders = [];
  } else {
    excludedFolders = excludeFolder.split(", ");
  }
  excludedFolders.push(".obsidian", ".trash");
  let fileArray = [];
  const files = await vault.getMarkdownFiles();
  for (const file of files) {
    const fileContents = await app2.vault.read(file);
    if ((!excludedSubstrings.some((substring) => fileContents.includes(substring)) || excludeTag.length === 0) && !excludedFolders.some((folder) => file.path.includes(folder))) {
      fileArray.push(file);
    }
  }
  return fileArray;
};

// src/creatmodchartcalculation.ts
function findEarliestModifiedFile(files) {
  let earliestModifiedFile = files[0];
  for (const file of files) {
    if (file.stat.mtime < earliestModifiedFile.stat.mtime) {
      earliestModifiedFile = file;
    }
  }
  return earliestModifiedFile;
}
function monthsBetween(startMonth, endMonth) {
  let months = endMonth.getMonth() - startMonth.getMonth() + 1;
  if (endMonth.getFullYear() > startMonth.getFullYear()) {
    months += (endMonth.getFullYear() - startMonth.getFullYear()) * 12;
  }
  return months;
}
function getModificationDates(files) {
  const creationDates = [];
  for (const file of files) {
    creationDates.push(new Date(file.stat.mtime));
  }
  return creationDates;
}
function createChartFormat(y_axis, countsStringMod, chartReduzierungMonate) {
  let monatsbegrenzung = null;
  if (chartReduzierungMonate == 0) {
    monatsbegrenzung = 0;
  } else {
    monatsbegrenzung = countsStringMod.split(",").length - chartReduzierungMonate;
  }
  return "```chart\ntype: bar\nlabels: [" + y_axis + "]\nseries:\n  - title: modified\n    data: [" + countsStringMod + ']\ntension: 0.2\nwidth: 80 %\nlabelColors: false\nfill: false\nbeginAtZero: false\nbestFit: false\nbestFitTitle: undefined\nbestFitNumber: 0\nstacked: true\nyTitle: "Number of Notes"\nxTitle: "Months"\nxMin: ' + monatsbegrenzung + "\n```";
}
async function replaceChartContent(avatarPageName, newContent) {
  const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
  if (existingFile == null) {
    console.log(`File ${avatarPageName}.md does not exist`);
    return;
  }
  const file = existingFile;
  const content = await app.vault.read(file);
  let reference = null;
  let end = null;
  let start = null;
  const lines = content.split("\n");
  for (let i2 = 0; i2 < lines.length; i2++) {
    const line = lines[i2].trim();
    if (line === "^ChartMonth") {
      if (reference === null) {
        reference = i2;
      }
    }
  }
  if (reference != null) {
    end = reference;
    start = reference - 19;
    const newLines = [...lines.slice(0, start), newContent, ...lines.slice(end)];
    await app.vault.modify(file, newLines.join("\n"));
  }
}

// src/badges.ts
function checkIfReceiveABadge(levelOld, levelNew) {
  const badgeLevels = [5, 10, 20, 27, 35, 42, 50, 60, 75, 82, 90, 100];
  let receiveBadge = false;
  for (let i2 = 0; i2 < badgeLevels.length; i2++) {
    if (levelOld < badgeLevels[i2] && levelNew >= badgeLevels[i2]) {
      receiveBadge = true;
    }
  }
  return receiveBadge;
}
function getBadgeForLevel(level, inform) {
  const badgeLevels = [5, 10, 20, 27, 35, 42, 50, 60, 75, 82, 90, 100];
  const badgeNames = [
    { name: "Enlightened Novice", description: "Huzzah! You've embarked on the path of knowledge and earned the title of 'Enlightened Novice.' The journey has just begun, and you're already radiating wisdom like a baby sun!", level: "level 5" },
    { name: "Curious Connoisseur", description: "Fantastic! You've embraced the wonders of learning and become a 'Curious Connoisseur.' Your appetite for knowledge is insatiable, like a bottomless bowl of ice cream!", level: "level 10" },
    { name: "Brainiac Trailblazer", description: "Bravo! As a 'Brainiac Trailblazer,' you've carved your way through a jungle of information and emerged victorious. Your intellect is a beacon shining brightly for others to follow!", level: "level 20" },
    { name: "Scholarly Trailblazer", description: "Impressive! You're now a 'Scholarly Trailblazer,' boldly venturing through a sea of knowledge with a compass of curiosity and a map of intellect!", level: "level 27" },
    { name: "Info Ninja Master", description: "Incredible! You've reached the pinnacle of stealthy knowledge management. As an 'Info Ninja Master,' you can snatch information from the shadows like a digital ninja!", level: "level 35" },
    { name: "Wise Owl Guru", description: "Whoo-hoo! You've achieved 'Wise Owl Guru' status. Your wisdom is legendary, and your hoots of knowledge echo through the forest of ignorance!", level: "level 42" },
    { name: "Einstein Incarnate", description: "Eureka! You've become an 'Einstein Incarnate,' pushing the boundaries of understanding and bending the fabric of knowledge to your will!", level: "level 50" },
    { name: "Mastermind Sage", description: "Magnificent! You've ascended to the rank of 'Mastermind Sage,' guiding the rivers of information and enlightening all who seek wisdom!", level: "level 60" },
    { name: "Cerebral Maestro", description: "Bravissimo! You're now a 'Cerebral Maestro,' conducting the symphony of knowledge with the finesse of a virtuoso conductor!", level: "level 75" },
    { name: "Zen Knowledge Keeper", description: "Serenity achieved! As a 'Zen Knowledge Keeper,' you maintain a tranquil mind while managing vast pools of knowledge with grace and poise.", level: "level 82" },
    { name: "Grand Archivist Overlord", description: "All hail the 'Grand Archivist Overlord!' You wield the knowledge of ages and hold the keys to unlock the gates of wisdom!", level: "level 90" },
    { name: "Omniscient Sage of Everything", description: "Congratulations, oh wise one! You've attained the highest level of enlightenment as the 'Omniscient Sage of Everything.' Your understanding knows no bounds, and your wisdom is as vast as the cosmos itself!", level: "level 100" }
  ];
  let index = 0;
  for (let i2 = 0; i2 < badgeLevels.length; i2++) {
    if (level >= badgeLevels[i2]) {
      index = i2;
    } else {
      break;
    }
  }
  return badgeNames[index];
}
function getBadgeForInitLevel(level) {
  const badgeLevels = [0, 3, 7, 15, 23, 30, 35, 42, 50, 60, 75, 82, 90, 100];
  const badgeNamesInit = [
    { name: "Lore Seeker Initiate", description: "Welcome to the journey of knowledge! As a 'Lore Seeker Initiate,' you've taken your first steps into the world of organized wisdom. Your quest has just begun, and with each note you make, you lay the foundation for a future rich with insights and understanding. Your journey starts here, and the path ahead is filled with potential and discovery.", level: "level 1" },
    { name: "Lore Apprentice", description: "You've hit the ground running with your existing knowledge treasures! You're already an 'Lore Apprentice,' armed with a wealth of wisdom and ready to shape it further.", level: "level 3" },
    { name: "Savvy Scholar", description: "Your existing notes have given you a head start! You're now a 'Savvy Scholar,' confidently diving into the sea of information with a treasure trove of insights.", level: "level 7" },
    { name: "Sage's Foundation", description: "Building upon your pre-existing notes, you're establishing the 'Sage's Foundation' for an even grander edifice of knowledge. Your groundwork is impressive!", level: "level 15" },
    { name: "Wisdom Seedling", description: "Your existing notes have nurtured the growth of a 'Wisdom Seedling.' You're cultivating your garden of knowledge with care and patience.", level: "level 23" },
    { name: "Prodigious Preparer", description: "Thanks to your prior efforts, you're a 'Prodigious Preparer,' standing tall among your notes and ready to conquer new realms of understanding.", level: "level 30" },
    { name: "Epic Epiphany Explorer", description: "Your past notes have led you to the grand 'Epic Epiphany Explorer' status! You've already been down a few rabbit holes and come out with dazzling discoveries.", level: "level 35" },
    { name: "Lore Luminary", description: "With your existing notes illuminating your path, you've become a 'Lore Luminary,' shining light on the mysteries of the universe, one idea at a time.", level: "level 42" },
    { name: "Scribe of the Ancients", description: "Your mastery of personal knowledge management has elevated you to the esteemed rank of the 'Scribe of the Ancients.' Your existing notes have transformed into treasures, bridging the gap between old wisdom and new discoveries.", level: "level 50" },
    { name: "Eureka Maestro", description: "Armed with your existing notes, you're the 'Eureka Maestro,' composing a symphony of insights that harmonize with the melody of discovery.", level: "level 60" },
    { name: "Chronicles Champion", description: "With your existing notes standing as a testament, you've ascended to the illustrious 'Chronicles Champion' level. Your journey through time's tapestry has brought forth a symphony of insights that harmonize past and present.", level: "level 75" },
    { name: "The Curious Cartographer", description: "As 'The Curious Cartographer,' your existing notes have mapped out uncharted territories of understanding. Your curiosity knows no bounds, and your notes are the compass guiding your exploration.", level: "level 82" },
    { name: "Sultan of Synthesis", description: "Your existing notes have made you the 'Sultan of Synthesis.' You're the master weaver, threading together threads of information into a rich tapestry of insight.", level: "level 90" },
    { name: "Eternal Archivist", description: "At the pinnacle of personal knowledge mastery, you're now revered as the 'Eternal Archivist.' Your existing notes, carefully curated and nurtured, stand as immortal beacons, guiding seekers through the labyrinth of knowledge across ages.", level: "level 100" }
  ];
  let index = 0;
  for (let i2 = 0; i2 < badgeLevels.length; i2++) {
    if (level >= badgeLevels[i2]) {
      index = i2;
    } else {
      break;
    }
  }
  return badgeNamesInit[index];
}

// src/levels.ts
var levelData = [
  { points: 0, level: 0, pointsNext: 0 },
  { points: 0, level: 1, pointsNext: 1e3 },
  { points: 1e3, level: 2, pointsNext: 3e3 },
  { points: 3e3, level: 3, pointsNext: 7500 },
  { points: 7500, level: 4, pointsNext: 15e3 },
  { points: 15e3, level: 5, pointsNext: 3e4 },
  { points: 3e4, level: 6, pointsNext: 5e4 },
  { points: 5e4, level: 7, pointsNext: 8e4 },
  { points: 8e4, level: 8, pointsNext: 12e4 },
  { points: 12e4, level: 9, pointsNext: 17e4 },
  { points: 17e4, level: 10, pointsNext: 23e4 },
  { points: 23e4, level: 11, pointsNext: 3e5 },
  { points: 3e5, level: 12, pointsNext: 38e4 },
  { points: 38e4, level: 13, pointsNext: 47e4 },
  { points: 47e4, level: 14, pointsNext: 6e5 },
  { points: 6e5, level: 15, pointsNext: 75e4 },
  { points: 75e4, level: 16, pointsNext: 92e4 },
  { points: 92e4, level: 17, pointsNext: 111e4 },
  { points: 111e4, level: 18, pointsNext: 132e4 },
  { points: 132e4, level: 19, pointsNext: 155e4 },
  { points: 155e4, level: 20, pointsNext: 18e5 },
  { points: 18e5, level: 21, pointsNext: 207e4 },
  { points: 207e4, level: 22, pointsNext: 236e4 },
  { points: 236e4, level: 23, pointsNext: 267e4 },
  { points: 267e4, level: 24, pointsNext: 3e6 },
  { points: 3e6, level: 25, pointsNext: 335e4 },
  { points: 335e4, level: 26, pointsNext: 372e4 },
  { points: 372e4, level: 27, pointsNext: 411e4 },
  { points: 411e4, level: 28, pointsNext: 452e4 },
  { points: 452e4, level: 29, pointsNext: 495e4 },
  { points: 495e4, level: 30, pointsNext: 54e5 },
  { points: 54e5, level: 31, pointsNext: 587e4 },
  { points: 587e4, level: 32, pointsNext: 636e4 },
  { points: 636e4, level: 33, pointsNext: 687e4 },
  { points: 687e4, level: 34, pointsNext: 74e5 },
  { points: 74e5, level: 35, pointsNext: 795e4 },
  { points: 795e4, level: 36, pointsNext: 852e4 },
  { points: 852e4, level: 37, pointsNext: 911e4 },
  { points: 911e4, level: 38, pointsNext: 972e4 },
  { points: 972e4, level: 39, pointsNext: 1035e4 },
  { points: 1035e4, level: 40, pointsNext: 11e6 },
  { points: 11e6, level: 41, pointsNext: 1167e4 },
  { points: 1167e4, level: 42, pointsNext: 1236e4 },
  { points: 1236e4, level: 43, pointsNext: 1307e4 },
  { points: 1307e4, level: 44, pointsNext: 138e5 },
  { points: 138e5, level: 45, pointsNext: 1455e4 },
  { points: 1455e4, level: 46, pointsNext: 1532e4 },
  { points: 1532e4, level: 47, pointsNext: 1611e4 },
  { points: 1611e4, level: 48, pointsNext: 1692e4 },
  { points: 1692e4, level: 49, pointsNext: 1775e4 },
  { points: 1775e4, level: 50, pointsNext: 186e5 },
  { points: 186e5, level: 51, pointsNext: 1947e4 },
  { points: 1947e4, level: 52, pointsNext: 2036e4 },
  { points: 2036e4, level: 53, pointsNext: 2127e4 },
  { points: 2127e4, level: 54, pointsNext: 222e5 },
  { points: 222e5, level: 55, pointsNext: 2315e4 },
  { points: 2315e4, level: 56, pointsNext: 2412e4 },
  { points: 2412e4, level: 57, pointsNext: 2511e4 },
  { points: 2511e4, level: 58, pointsNext: 2612e4 },
  { points: 2612e4, level: 59, pointsNext: 2715e4 },
  { points: 2715e4, level: 60, pointsNext: 282e5 },
  { points: 282e5, level: 61, pointsNext: 2927e4 },
  { points: 2927e4, level: 62, pointsNext: 3036e4 },
  { points: 3036e4, level: 63, pointsNext: 3147e4 },
  { points: 3147e4, level: 64, pointsNext: 326e5 },
  { points: 326e5, level: 65, pointsNext: 3375e4 },
  { points: 3375e4, level: 66, pointsNext: 3492e4 },
  { points: 3492e4, level: 67, pointsNext: 3611e4 },
  { points: 3611e4, level: 68, pointsNext: 3732e4 },
  { points: 3732e4, level: 69, pointsNext: 3855e4 },
  { points: 3855e4, level: 70, pointsNext: 398e5 },
  { points: 398e5, level: 71, pointsNext: 4107e4 },
  { points: 4107e4, level: 72, pointsNext: 4236e4 },
  { points: 4236e4, level: 73, pointsNext: 4367e4 },
  { points: 4367e4, level: 74, pointsNext: 45e6 },
  { points: 45e6, level: 75, pointsNext: 4635e4 },
  { points: 4635e4, level: 76, pointsNext: 4772e4 },
  { points: 4772e4, level: 77, pointsNext: 4911e4 },
  { points: 4911e4, level: 78, pointsNext: 5052e4 },
  { points: 5052e4, level: 79, pointsNext: 5195e4 },
  { points: 5195e4, level: 80, pointsNext: 534e5 },
  { points: 534e5, level: 81, pointsNext: 5487e4 },
  { points: 5487e4, level: 82, pointsNext: 5636e4 },
  { points: 5636e4, level: 83, pointsNext: 5787e4 },
  { points: 5787e4, level: 84, pointsNext: 594e5 },
  { points: 594e5, level: 85, pointsNext: 6095e4 },
  { points: 6095e4, level: 86, pointsNext: 6252e4 },
  { points: 6252e4, level: 87, pointsNext: 6411e4 },
  { points: 6411e4, level: 88, pointsNext: 6572e4 },
  { points: 6572e4, level: 89, pointsNext: 6735e4 },
  { points: 6735e4, level: 90, pointsNext: 69e6 },
  { points: 69e6, level: 91, pointsNext: 7067e4 },
  { points: 7067e4, level: 92, pointsNext: 7236e4 },
  { points: 7236e4, level: 93, pointsNext: 7407e4 },
  { points: 7407e4, level: 94, pointsNext: 758e5 },
  { points: 758e5, level: 95, pointsNext: 7755e4 },
  { points: 7755e4, level: 96, pointsNext: 7932e4 },
  { points: 7932e4, level: 97, pointsNext: 8111e4 },
  { points: 8111e4, level: 98, pointsNext: 8292e4 },
  { points: 8292e4, level: 99, pointsNext: 8475e4 },
  { points: 8475e4, level: 100, pointsNext: 866e5 },
  { points: 866e5, level: 101, pointsNext: 8847e4 },
  { points: 8847e4, level: 102, pointsNext: 9036e4 },
  { points: 9036e4, level: 103, pointsNext: 9227e4 },
  { points: 9227e4, level: 104, pointsNext: 942e5 },
  { points: 942e5, level: 105, pointsNext: 9615e4 },
  { points: 9615e4, level: 106, pointsNext: 9812e4 },
  { points: 9812e4, level: 107, pointsNext: 10011e4 },
  { points: 10011e4, level: 108, pointsNext: 10212e4 },
  { points: 10212e4, level: 109, pointsNext: 10212e4 },
  { points: 10415e4, level: 110, pointsNext: 10615e4 }
];
function getLevelForPoints(points) {
  let level = levelData[0];
  for (const data of levelData) {
    if (points >= data.points) {
      level = data;
    } else {
      break;
    }
  }
  return level;
}
function statusPointsForLevel(targetLevel) {
  let statusPoints = 0;
  for (const data of levelData) {
    if (targetLevel == data.level && statusPoints == 0) {
      statusPoints = data.points;
    }
  }
  return statusPoints;
}

// src/randomNotificationText.ts
var messagesWeeklyChallenge = [
  "Seven days of note-taking? You're practically a note ninja turtle now! \u{1F422}\u{1F4DD} [X] points, cowabunga!",
  "You've just completed a week-long note-taking marathon! \u{1F3C3}\u200D\u2642\uFE0F\u{1F4DD} [X] points earned. Ready for the next lap?",
  "A whole week of notes? You're on fire! \u{1F525}\u{1F4DD} [X] points, keep the spark alive!",
  "Seven notes in seven days - that's like a note symphony! \u{1F3B6}\u{1F4DD} [X] points, maestro!",
  "You're on a seven-day note-taking fiesta! \u{1F389}\u{1F4DD} [X] points, keep the party going!",
  "Seven days, seven notes - You're like the James Bond of note-taking! \u{1F576}\uFE0F\u{1F4DD} [X] points, secret agent!",
  "You're officially a 'Note-A-Day' superhero! \u{1F9B8}\u200D\u2642\uFE0F\u{1F4DD} [X] points, capes optional!",
  "A whole week of notes? You've practically written a mini novel by now! \u{1F4DA}\u{1F4DD} [X] points, author status achieved!",
  "Seven days straight? You're the Usain Bolt of note-taking! \u{1F3C3}\u200D\u2642\uFE0F\u{1F4DD} [X] points, sprinting towards knowledge!",
  "You're on a seven-day note-taking spree! It's like a notes-plosion! \u{1F4A5}\u{1F4DD} [X] points, keep the fireworks coming!",
  "Seven days, seven notes - you're basically the Michael Jordan of note-taking! \u{1F3C0}\u{1F4DD} [X] points, slam dunk!",
  "A whole week of notes? You're the note-taking MVP! \u{1F3C6}\u{1F4DD} [X] points, keep scoring!",
  "You've just unlocked the 'Seven Day Note Fever' achievement! \u{1F31F}\u{1F4DD} [X] points, catch the fever!",
  "Seven days, seven notes - you're a note-taking rockstar! \u{1F3B8}\u{1F4DD} [X] points, keep jammin'!",
  "You're on a seven-day note-taking magic show! Now you see the notes, now you don't! \u{1F3A9}\u2728 [X] points, keep the magic alive!",
  "A whole week of notes? You're like a note-taking Jedi Master! \u{1F30C}\u2694\uFE0F [X] points, may the notes be with you!",
  "Seven days straight? You're the Tony Hawk of note-taking! \u{1F6F9}\u{1F4DD} [X] points, keep shredding!",
  "You're on a seven-day note-taking rollercoaster! Up and down, but always moving forward! \u{1F3A2}\u{1F4DD} [X] points, enjoy the ride!",
  "Seven days, seven notes - you're a note-taking DJ spinning knowledge beats! \u{1F3A7}\u{1F4DD} [X] points, drop the knowledge!",
  "You've just conquered the seven-day note-taking challenge! You're the note-taking Indiana Jones! \u{1F3F9}\u{1F4DD} [X] points, keep exploring!",
  "A whole week of notes? You're the note-taking Sherlock Holmes, solving knowledge mysteries! \u{1F50D}\u{1F4DD} [X] points, keep sleuthing!",
  "Seven days, seven notes - you're a note-taking Picasso, creating a masterpiece of knowledge! \u{1F3A8}\u{1F4DD} [X] points, keep painting!",
  "You're on a seven-day note-taking rocket ship! Destination: Infinite Knowledge! \u{1F680}\u{1F4DD} [X] points, enjoy the journey!",
  "Seven days straight? You're the note-taking MacGyver, turning information into solutions! \u{1F527}\u{1F4DD} [X] points, keep crafting!",
  "You're on a seven-day note-taking safari, exploring the wilds of knowledge! \u{1F418}\u{1F4DD} [X] points, keep exploring!",
  "Seven days, seven notes - you're a note-taking chef, cooking up a knowledge feast! \u{1F373}\u{1F4DD} [X] points, keep cooking!",
  "You've just unlocked the seven-day note-taking badge! You're the note-taking superhero we need! \u{1F9B8}\u200D\u2640\uFE0F\u{1F4DD} [X] points, keep saving the day!",
  "A whole week of notes? You're the note-taking Lewis and Clark, charting new territories of knowledge! \u{1F5FA}\uFE0F\u{1F4DD} [X] points, keep exploring!",
  "Seven days, seven notes - you're a note-taking DJ, dropping beats of wisdom! \u{1F3A7}\u{1F4DD} [X] points, keep spinning!",
  "You're on a seven-day note-taking treasure hunt, discovering gems of wisdom! \u{1F48E}\u{1F4DD} [X] points, keep hunting!",
  "Seven days straight? You're the note-taking ninja warrior, conquering the knowledge obstacle course! \u{1F94B}\u{1F4DD} [X] points, keep slaying!",
  "You're on a seven-day note-taking rocket ship! Destination: Infinite Knowledge! \u{1F680}\u{1F4DD} [X] points, enjoy the journey!",
  "Seven days, seven notes - you're a note-taking detective, solving cases of curiosity! \u{1F575}\uFE0F\u200D\u2642\uFE0F\u{1F4DD} [X] points, keep detecting!",
  "You've just unlocked the seven-day note-taking badge! You're the note-taking superhero we need! \u{1F9B8}\u200D\u2642\uFE0F\u{1F4DD} [X] points, keep saving the day!",
  "A whole week of notes? You're the note-taking pioneer, blazing trails through the forests of information! \u{1F332}\u{1F4DD} [X] points, keep pioneering!",
  "Seven days, seven notes - you're a note-taking DJ, dropping beats of wisdom! \u{1F3A7}\u{1F4DD} [X] points, keep spinning!",
  "You're on a seven-day note-taking treasure hunt, discovering gems of wisdom! \u{1F48E}\u{1F4DD} [X] points, keep hunting!",
  "Seven days straight? You're the note-taking ninja warrior, conquering the knowledge obstacle course! \u{1F94B}\u{1F4DD} [X] points, keep slaying!",
  "You're on a seven-day note-taking rollercoaster! Up and down, but always moving forward! \u{1F3A2}\u{1F4DD} [X] points, enjoy the ride!",
  "Seven days, seven notes - you're a note-taking DJ spinning knowledge beats! \u{1F3A7}\u{1F4DD} [X] points, drop the knowledge!",
  "You've just conquered the seven-day note-taking challenge! You're the note-taking Indiana Jones! \u{1F3F9}\u{1F4DD} [X] points, keep exploring!",
  "A whole week of notes? You're the note-taking Sherlock Holmes, solving knowledge mysteries! \u{1F50D}\u{1F4DD} [X] points, keep sleuthing!",
  "Seven days, seven notes - you're a note-taking Picasso, creating a masterpiece of knowledge! \u{1F3A8}\u{1F4DD} [X] points, keep painting!",
  "You're on a seven-day note-taking safari, exploring the wilds of knowledge! \u{1F418}\u{1F4DD} [X] points, keep exploring!",
  "Seven days straight? You're the Tony Hawk of note-taking! \u{1F6F9}\u{1F4DD} [X] points, keep shredding!",
  "You're on a seven-day note-taking rocket ship! Destination: Infinite Knowledge! \u{1F680}\u{1F4DD} [X] points, enjoy the journey!",
  "Seven days, seven notes - you're a note-taking ninja turtle now! \u{1F422}\u{1F4DD} [X] points, cowabunga!",
  "You've just completed a week-long note-taking marathon! \u{1F3C3}\u200D\u2642\uFE0F\u{1F4DD} [X] points earned. Ready for the next lap?",
  "A whole week of notes? You're on fire! \u{1F525}\u{1F4DD} [X] points, keep the spark alive!",
  "Seven notes in seven days - that's like a note symphony! \u{1F3B6}\u{1F4DD} [X] points, maestro!"
];
var twoNoteMessages = [
  "Boom! You just aced the 2-note tango! \u{1F389} [X] points in the pocket. Keep groovin'!",
  "Two notes in a day? You're officially a Note Ninja! \u{1F94B} [X] points earned. Rock on!",
  "High-five! You've conquered the 2-note rodeo! \u{1F920} [X] points earned. Yeehaw!",
  "Double trouble! Two notes in one day, you legend! \u{1F31F} [X] points, rockstar!",
  "You're on fire! Two notes in a day - what's your secret weapon? \u{1F525} [X] points!",
  "Bingo! Two notes in a day! You're on a roll! \u{1F680} [X] points earned. Keep it up!",
  "Kaboom! You just blew the 2-note challenge out of the water! \u{1F4A5} [X] points!",
  "You're officially a 2-note superstar! \u{1F31F} [X] points in the bag. Keep shining!",
  "Double up, double down! Two notes in one day - you're a rockstar! \u{1F3B8} [X] points!",
  "You've just joined the 2-note party! \u{1F973} [X] points earned. Let's keep dancing!",
  "Ka-ching! Two notes in a day! You're racking up those points! \u{1F4B0} [X] earned!",
  "You're a 2-note magician! \u{1F3A9}\u2728 [X] points earned. What's your next trick?",
  "Two notes? Nailed it! You're on a roll! \u{1F31F} [X] points earned. Keep it going!",
  "Abra-cadabra! Two notes appear! \u{1F3A9}\u2728 [X] points earned. Keep the magic alive!",
  "Double trouble, double the fun! Two notes in one day! \u{1F389} [X] points, superstar!",
  "You've just unlocked the 2-note achievement! \u{1F31F} [X] points earned. Keep soaring!",
  "Woo-hoo! Two notes in a day! You're on fire! \u{1F525} [X] points, keep it up!",
  "You're a 2-note wizard! \u2728\u{1F52E} [X] points earned. What's your next spell?",
  "Double the notes, double the awesomeness! \u{1F31F} [X] points, rockstar!",
  "You've just kicked the 2-note challenge out of the park! \u26BE [X] points!",
  "Boom! You just conquered the 2-note challenge! \u{1F389} [X] points, superstar!",
  "Double the notes, double the celebration! \u{1F973} [X] points earned. Party on!",
  "You're a 2-note maestro! \u{1F3B5} [X] points in the pocket. Keep the music playing!",
  "Kaboom! Two notes in a day! You're on a roll! \u{1F680} [X] points earned. Keep it up!",
  "You've just joined the 2-note fiesta! \u{1F973} [X] points earned. Let's keep dancing!",
  "Zap! You've just electrified the 2-note challenge! \u26A1 [X] points, rockstar!",
  "Double notes, double the sparkle! \u{1F31F} [X] points earned. Keep shining bright!",
  "You're a 2-note dynamo! \u{1F4A5} [X] points earned. What's your next explosion?",
  "Kaboom! Two notes in a day! You're on fire! \u{1F525} [X] points, keep it up!",
  "You've just unlocked the 2-note achievement! \u{1F31F} [X] points earned. Keep soaring!",
  "Woo-hoo! Two notes in a day! You're on a roll! \u{1F389} [X] points, keep it up!",
  "You're a 2-note wizard! \u2728\u{1F52E} [X] points earned. What's your next spell?",
  "Double the notes, double the awesomeness! \u{1F31F} [X] points, rockstar!",
  "You've just kicked the 2-note challenge out of the park! \u26BE [X] points!",
  "Boom! You just conquered the 2-note challenge! \u{1F389} [X] points, superstar!",
  "Double the notes, double the celebration! \u{1F973} [X] points earned. Party on!",
  "You're a 2-note maestro! \u{1F3B5} [X] points in the pocket. Keep the music playing!",
  "Zap! You've just electrified the 2-note challenge! \u26A1 [X] points, rockstar!",
  "Double notes, double the sparkle! \u{1F31F} [X] points earned. Keep shining bright!",
  "You're a 2-note dynamo! \u{1F4A5} [X] points earned. What's your next explosion?",
  "Kapow! Two notes in a day - you're a superhero! \u{1F9B8}\u200D\u2642\uFE0F [X] points!",
  "You're a 2-note legend! \u{1F31F} [X] points earned. What's your next adventure?",
  "Bingo! Two notes in a day! You're on a roll! \u{1F680} [X] points, keep it up!",
  "You're a 2-note wizard! \u2728\u{1F52E} [X] points earned. What's your next spell?",
  "Double the notes, double the awesomeness! \u{1F31F} [X] points, rockstar!",
  "You've just kicked the 2-note challenge out of the park! \u26BE [X] points!",
  "Boom! You just conquered the 2-note challenge! \u{1F389} [X] points, superstar!",
  "Double the notes, double the celebration! \u{1F973} [X] points earned. Party on!",
  "You're a 2-note maestro! \u{1F3B5} [X] points in the pocket. Keep the music playing!",
  "Zap! You've just electrified the 2-note challenge! \u26A1 [X] points, rockstar!",
  "Double notes, double the sparkle! \u{1F31F} [X] points earned. Keep shining bright!",
  "You're a 2-note dynamo! \u{1F4A5} [X] points earned. What's your next explosion?"
];
var randomPointNotices = [
  "Bazinga! You just snagged [X] points!",
  "Kaboom! [X] points are now in your pocket!",
  "Woohoo! [X] points earned! Keep it up!",
  "Points ahoy! [X] more in the bank!",
  "Score! [X] points added to your total!",
  "You're on fire! [X] points in the bag!",
  "Zippity-zap! [X] points for you!",
  "Champion move! [X] points are yours!",
  "Bingo! [X] points just for you!",
  "Shazam! [X] points to the rescue!",
  "Ka-ching! [X] points earned!",
  "Superb! [X] more points for you!",
  "Bravo! [X] points added to your stash!",
  "Well done! [X] more points in tow!",
  "Zap! [X] points, just like that!",
  "A round of applause for [X] points!",
  "Whoosh! [X] points are yours!",
  "Zing! [X] points for your efforts!",
  "Woo! [X] points, way to go!",
  "Zesty! [X] points in your tally!",
  "Great job! [X] more points for you!",
  "Fantastic! [X] points in the bag!",
  "Zowie! [X] points just for you!",
  "Hooray! [X] points in your account!",
  "Nice one! [X] points in the pocket!",
  "Woot woot! [X] points, nice work!",
  "Zigzag! [X] points, keep it up!",
  "Bam! [X] points, well done!",
  "Cool beans! [X] points for you!",
  "Zesty! [X] points, keep it up!",
  "Splendid! [X] points for your efforts!",
  "Marvelous! [X] points earned!",
  "Zany! [X] points, well done!",
  "Exquisite! [X] points in your stash!",
  "Outstanding! [X] points for you!",
  "Zesty! [X] points, nice job!",
  "Magnificent! [X] points earned!",
  "Zigzag! [X] points in your tally!",
  "Terrific! [X] points for you!",
  "Superb! [X] points, well done!",
  "Zowie! [X] points for your efforts!",
  "Excellent! [X] points earned!",
  "Zap! [X] points in your account!",
  "Awesome! [X] points, way to go!",
  "Well played! [X] points for you!",
  "Zesty! [X] points, nice work!",
  "Impressive! [X] points, keep it up!",
  "Brilliant! [X] points, well done!",
  "Zing! [X] points for your efforts!",
  "Nice move! [X] points earned!",
  "Zesty! [X] points in the bag!",
  "Stellar! [X] points just for you!",
  "Well deserved! [X] points earned!"
];
function getRandomMessageWeeklyChallenge(points) {
  const randomIndex = Math.floor(Math.random() * messagesWeeklyChallenge.length);
  const message = messagesWeeklyChallenge[randomIndex];
  return message.replace("[X]", points.toString());
}
function getRandomMessageTwoNoteChallenge(points) {
  const randomIndex = Math.floor(Math.random() * twoNoteMessages.length);
  const message = twoNoteMessages[randomIndex];
  return message.replace("[X]", points.toString());
}
function getRandomMessagePoints(points) {
  const randomIndex = Math.floor(Math.random() * randomPointNotices.length);
  const message = randomPointNotices[randomIndex];
  return message.replace("[X]", points.toString());
}

// src/main.ts
var style = document.createElement("style");
style.textContent = `
  .modal-checkbox-container {
    margin-bottom: 10px;
    display: flex;
    align-items: center;
  }

  .modal-checkbox-container input[type="checkbox"] {
    margin-right: 5px;
  }
`;
document.head.append(style);
var gamification = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.statusBarItem = this.addStatusBarItem();
    this.statusbarGamification = this.statusBarItem.createEl("span", { text: "" });
  }
  getSetting(key) {
    return this.settings[key];
  }
  setSetting(key, value) {
    console.log(`new value for ${key} is ${value}`);
    this.settings[key] = value;
    this.saveSettings();
  }
  async onload() {
    console.log("obsidian-pkm-gamification loaded!");
    await this.loadSettings();
    this.addSettingTab(new GamificationPluginSettings(this.app, this));
    setTimeout(async () => {
      await this.resetDailyGoals();
    }, 2e3);
    this.timerInterval = 30 * 60 * 1e3;
    this.timerId = window.setInterval(this.resetDailyGoals.bind(this), this.timerInterval);
    await this.updateStatusBar(this.statusbarGamification);
    if (this.settings.debug) {
      this.addRibbonIcon("accessibility", "crafting", async () => {
        new ModalBooster(this.app, ` `, this).open();
      });
    }
    this.addRibbonIcon("test-tube-2", "Boosters", async () => {
      new ModalBooster(this.app, ` `, this).open();
    });
    this.addRibbonIcon("sprout", "Calculate Note Maturity", async () => {
      await this.calculateNoteMajurity();
    });
    if (this.settings.enableInitCommand) {
      this.addCommand({
        id: "init-rate-gamification",
        name: "Initialize gamification ratings",
        callback: async () => {
          await this.initializeGame(this.statusbarGamification);
        }
      });
    }
    if (this.settings.enableInitCommand) {
      this.addCommand({
        id: "create-avatar-page",
        name: "create profile page",
        callback: async () => {
          const { vault } = this.app;
          await createAvatarFile(this.app, this.settings.avatarPageName);
          const chartString = await this.createChart(vault);
          await replaceChartContent(this.settings.avatarPageName, chartString);
        }
      });
    }
    if (this.settings.enableInitCommand) {
      this.addCommand({
        id: "reset-game",
        name: "reset the game",
        callback: async () => {
          await this.resetGame();
        }
      });
    }
    this.addCommand({
      id: "update-chart-avatarpage",
      name: "update chart on profile page",
      callback: async () => {
        const { vault } = app;
        const chartString = await this.createChart(vault);
        await replaceChartContent(this.settings.avatarPageName, chartString);
      }
    });
    this.addCommand({
      id: "rate-note-maturity",
      name: "Rate note majurity",
      callback: async () => {
        await this.calculateNoteMajurity();
      }
    });
    this.addCommand({
      id: "change-progressive-formatting",
      name: "toggle progressive summarization formatting",
      callback: async () => {
        await replaceFormatStrings(this.settings.progressiveSumLayer2, this.settings.progressiveSumLayer3);
      }
    });
  }
  async resetGame() {
    await this.removeKeysFromFrontmatter();
    this.settings.statusLevel = 1;
    this.settings.statusPoints = 0;
    this.settings.xpForNextLevel = 1e3;
    this.settings.badgeBoosterState = false;
    this.settings.badgeBoosterFactor = 1;
    await this.saveData(this.settings);
    await this.giveStatusPoints(0);
    await this.updateStatusBar(this.statusbarGamification);
    new ModalInformationbox(this.app, `Game is now reseted. Please delete the Profile Page: "${this.settings.avatarPageName}.md" manually.`).open();
  }
  async initializeGame(statusbarGamification) {
    this.settings.gamificationStartDate = format(new Date(), "yyyy-MM-dd");
    await this.saveSettings();
    const { vault } = this.app;
    await createAvatarFile(this.app, this.settings.avatarPageName);
    const chartString = await this.createChart(vault);
    await replaceChartContent(this.settings.avatarPageName, chartString);
    await this.openAvatarFile();
    const fileCountMap = await getFileMap(this.app, this.settings.tagsExclude, this.settings.folderExclude);
    console.log(`fileCountMap loaded. Number of files: ${fileCountMap.length}`);
    let pointsReceived = 0;
    for (const fileName of fileCountMap) {
      const file = fileName;
      const fileContents = await app.vault.read(file);
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      if (activeView && activeView.file && activeView.file.path === file.path) {
        console.warn(`File ${file.path} is currently open. Skipping.`);
        continue;
      }
      const fileLength = countCharactersInActiveFile(fileContents, fileName.basename);
      const rateFileLength = rateNoteLength(fileLength);
      const {
        charCount,
        highlightedCount,
        boldCount
      } = countLayer2AndLayer3Characters(fileContents, fileName.basename, this.settings.progressiveSumLayer2, this.settings.progressiveSumLayer3);
      const rateProgressiveSum = rateProgressiveSummarization(charCount, highlightedCount, boldCount);
      const fileNameRate = rateLengthFilename(file.name);
      const inlinkNumber = count_inlinks(file);
      const inlinkClass = rateInlinks(inlinkNumber);
      const rateOut = rateOutlinks(getNumberOfOutlinks(file));
      const noteMajurity = rateLevelOfMaturity(rateFileLength, fileNameRate, inlinkClass, rateOut, rateProgressiveSum);
      console.log(`Processing file ${fileName.basename} in path ${fileName.path}`);
      try {
        await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
          if (rateDirectionForStatusPoints(frontmatter["note-maturity"], noteMajurity) >= 1) {
            pointsReceived += pointsNoteMajurity * rateDirectionForStatusPoints(frontmatter["note-maturity"], noteMajurity);
            this.giveStatusPoints(pointsNoteMajurity * rateDirectionForStatusPoints("frontmatter['note-maturity']", noteMajurity));
          } else if (!("note-maturity" in frontmatter)) {
            pointsReceived += pointsNoteMajurity * rateDirectionForStatusPoints("0", noteMajurity);
            this.giveStatusPoints(pointsNoteMajurity * rateDirectionForStatusPoints("0", noteMajurity));
          }
          if (rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate) >= 1 && "title-class" in frontmatter) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate));
          } else if (!("title-class" in frontmatter)) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", fileNameRate);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", fileNameRate));
          }
          if (rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength) >= 1) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength));
          } else if (!("note-length-class" in frontmatter)) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", rateFileLength);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateFileLength));
          }
          if (rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass) >= 1) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass));
          } else if (!("inlink-class" in frontmatter)) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", inlinkClass);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", inlinkClass));
          }
          if (rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut) >= 1) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut));
          } else if (!("outlink-class" in frontmatter)) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", rateOut);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateOut));
          }
          if (rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum) >= 1) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum));
          } else if (!("progressive-summarization-maturity" in frontmatter)) {
            pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum);
            this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateProgressiveSum));
          }
          this.writeFrontmatter(frontmatter, fileNameRate, rateFileLength, inlinkClass, rateOut, rateProgressiveSum, noteMajurity);
        });
      } catch (e2) {
        if ((e2 == null ? void 0 : e2.name) === "YAMLParseError") {
          const errorMessage = `Update majuritys failed Malformed frontamtter on this file : ${file.path} ${e2.message}`;
          new import_obsidian2.Notice(errorMessage, 4e3);
          console.error(errorMessage);
        }
      }
    }
    if (pointsReceived > 0) {
      let boosterFactor = 1;
      if (this.settings.badgeBoosterState) {
        boosterFactor = this.settings.badgeBoosterFactor;
      }
      new import_obsidian2.Notice(`${pointsReceived * boosterFactor} Points received`);
      console.log(`${pointsReceived * boosterFactor} Points received`);
    }
    setTimeout(async () => {
      const initBadge = getBadgeForInitLevel(this.settings.statusLevel);
      new import_obsidian2.Notice(`You've earned the "${initBadge.name}" badge. ${initBadge.description}`);
      console.log(`You earned ${initBadge.name} - ${initBadge.description}`);
      await this.giveInitBadgeInProfile(this.settings.avatarPageName, initBadge);
      await this.removeBadgesWhenInitLevelHigher(this.settings.avatarPageName, this.settings.statusLevel);
      await this.boosterForInit();
      await this.updateStatusBar(statusbarGamification);
    }, 2e3);
    new ModalInformationbox(this.app, `Finallized gamification initialistation!
Congratulation, you earned ${pointsReceived} Points!

Check the Profile Page: "${this.settings.avatarPageName}.md"

You received an initialisation Booster aktiv for your first level ups. Game on!`).open();
  }
  writeFrontmatter(frontmatter, fileNameRate, rateFileLength, inlinkClass, rateOut, rateProgressiveSum, noteMajurity) {
    frontmatter["title-class"] = rateDirection(frontmatter["title-class"], fileNameRate);
    frontmatter["note-length-class"] = rateDirection(frontmatter["note-length-class"], rateFileLength);
    frontmatter["inlink-class"] = rateDirection(frontmatter["inlink-class"], inlinkClass);
    frontmatter["outlink-class"] = rateDirection(frontmatter["outlink-class"], rateOut);
    frontmatter["progressive-summarization-maturity"] = rateDirection(frontmatter["progressive-summarization-maturity"], rateProgressiveSum);
    frontmatter["note-maturity"] = rateDirection(frontmatter["note-maturity"], noteMajurity);
  }
  onunload() {
    console.log("obsidian-pkm-gamification unloaded!");
    if (this.timerId !== null) {
      clearInterval(this.timerId);
      this.timerId = null;
    }
  }
  async calculateNoteMajurity() {
    var _a;
    const file = this.app.workspace.getActiveFile();
    if (file == null) {
      console.error("got no file, propably none is active");
    }
    let detectIfNoteIsFirstTimeRated = false;
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    const fileContents = activeView == null ? void 0 : activeView.editor.getValue();
    const fileName = activeView == null ? void 0 : activeView.file.basename;
    let rateFileLength = 0;
    let fileLength = 0;
    let rateProgressiveSum = 0;
    if (fileContents !== void 0 && fileName !== void 0) {
      fileLength = countCharactersInActiveFile(fileContents, fileName);
      rateFileLength = rateNoteLength(fileLength);
      if (fileContents !== null && fileName !== null) {
        const { charCount, highlightedCount, boldCount } = countLayer2AndLayer3Characters(fileContents, fileName, this.settings.progressiveSumLayer2, this.settings.progressiveSumLayer3);
        rateProgressiveSum = rateProgressiveSummarization(charCount, highlightedCount, boldCount);
      }
    }
    let fileNameRate = 0;
    let inlinkNumber = 0;
    let inlinkClass = 0;
    let rateOut = 0;
    if (file !== null) {
      fileNameRate = rateLengthFilename((_a = file.name) != null ? _a : "");
      inlinkNumber = count_inlinks(file);
      inlinkClass = rateInlinks(inlinkNumber);
      rateOut = rateOutlinks(getNumberOfOutlinks(file));
      const noteMajurity = rateLevelOfMaturity(rateFileLength, fileNameRate, inlinkClass, rateOut, rateProgressiveSum);
      try {
        await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
          if (frontmatter) {
            let pointsReceived = 0;
            if (rateDirectionForStatusPoints(frontmatter["note-maturity"], noteMajurity) >= 1) {
              console.log(`note-maturity >=1`);
              pointsReceived += pointsNoteMajurity * rateDirectionForStatusPoints(frontmatter["note-maturity"], noteMajurity);
              const newLevel = this.giveStatusPoints(pointsNoteMajurity * rateDirectionForStatusPoints("frontmatter['note-maturity']", noteMajurity));
              this.decisionIfBadge(newLevel);
            } else if (!("note-maturity" in frontmatter)) {
              pointsReceived += pointsNoteMajurity * rateDirectionForStatusPoints("0", noteMajurity);
              const newLevel = this.giveStatusPoints(pointsNoteMajurity * rateDirectionForStatusPoints("0", noteMajurity));
              this.decisionIfBadge(newLevel);
              detectIfNoteIsFirstTimeRated = true;
            }
            if (rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate) >= 1 && "title-class" in frontmatter) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["title-class"], fileNameRate));
              this.decisionIfBadge(newLevel);
            } else if (!("title-class" in frontmatter)) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", fileNameRate);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", fileNameRate));
              this.decisionIfBadge(newLevel);
            }
            if (rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength) >= 1) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["note-length-class"], rateFileLength));
              this.decisionIfBadge(newLevel);
            } else if (!("note-length-class" in frontmatter)) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", rateFileLength);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateFileLength));
              this.decisionIfBadge(newLevel);
            }
            if (rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass) >= 1) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["inlink-class"], inlinkClass));
              this.decisionIfBadge(newLevel);
            } else if (!("inlink-class" in frontmatter)) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", inlinkClass);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", inlinkClass));
              this.decisionIfBadge(newLevel);
            }
            if (rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut) >= 1) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["outlink-class"], rateOut));
              this.decisionIfBadge(newLevel);
            } else if (!("outlink-class" in frontmatter)) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints("0", rateOut);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateOut));
              this.decisionIfBadge(newLevel);
            }
            if (rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum) >= 1) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum));
              this.decisionIfBadge(newLevel);
            } else if (!("progressive-summarization-maturity" in frontmatter)) {
              pointsReceived += pointsMajurity * rateDirectionForStatusPoints(frontmatter["progressive-summarization-maturity"], rateProgressiveSum);
              const newLevel = this.giveStatusPoints(pointsMajurity * rateDirectionForStatusPoints("0", rateProgressiveSum));
              this.decisionIfBadge(newLevel);
            }
            console.log(`pointsReceived: ${pointsReceived}`);
            if (pointsReceived > 0) {
              const messagePoints = getRandomMessagePoints(pointsReceived * this.settings.badgeBoosterFactor);
              new import_obsidian2.Notice(messagePoints);
              console.log(messagePoints);
            }
            this.writeFrontmatter(frontmatter, fileNameRate, rateFileLength, inlinkClass, rateOut, rateProgressiveSum, noteMajurity);
          }
        });
      } catch (e2) {
        if ((e2 == null ? void 0 : e2.name) === "YAMLParseError") {
          const errorMessage = `Update majuritys failed Malformed frontamtter on this file : ${file.path} ${e2.message}`;
          new import_obsidian2.Notice(errorMessage, 4e3);
          console.error(errorMessage);
        }
      }
      new import_obsidian2.Notice("note majurity updated!");
      console.log("note majurity updated!");
      await this.updateStatusBar(this.statusbarGamification);
    } else {
      console.error("file was not found to calculate majurities. Make sure one is active.");
    }
    if (detectIfNoteIsFirstTimeRated) {
      await this.increaseDailyCreatedNoteCount();
      await this.increaseWeeklyCreatedNoteCount();
    }
  }
  async resetDailyGoals() {
    let reset = false;
    if (!isSameDay(window.moment(this.settings.dailyNoteCreationDate, "DD.MM.YYYY"))) {
      this.settings.dailyNoteCreationTask = 0;
      this.settings.dailyNoteCreationDate = window.moment().format("DD.MM.YYYY");
      await this.saveSettings();
      console.log(`daily Challenge reseted`);
      reset = true;
    }
    if (!isOneDayBefore(window.moment(this.settings.weeklyNoteCreationDate, "DD.MM.YYYY")) && !isSameDay(window.moment(this.settings.weeklyNoteCreationDate, "DD.MM.YYYY"))) {
      this.settings.weeklyNoteCreationTask = 0;
      this.settings.weeklyNoteCreationDate = window.moment().subtract(1, "day").format("DD.MM.YYYY");
      await this.saveSettings();
      console.log(`weekly Challenge reseted`);
      reset = true;
    }
    if (isOneDayBefore(window.moment(this.settings.weeklyNoteCreationDate, "DD.MM.YYYY")) && this.settings.weeklyNoteCreationTask == 7) {
      this.settings.weeklyNoteCreationTask = 0;
      this.settings.weeklyNoteCreationDate = window.moment().subtract(1, "day").format("DD.MM.YYYY");
      await this.saveSettings();
      reset = true;
    }
    if (reset) {
      await this.updateAvatarPage(this.settings.avatarPageName);
    }
  }
  async increaseDailyCreatedNoteCount() {
    let newDailyNoteCreationTask = this.settings.dailyNoteCreationTask;
    if (newDailyNoteCreationTask < 2) {
      newDailyNoteCreationTask++;
      this.settings.dailyNoteCreationTask = newDailyNoteCreationTask;
      await this.saveSettings();
      if (newDailyNoteCreationTask == 1) {
        await this.updateAvatarPage(this.settings.avatarPageName);
        console.log(`${newDailyNoteCreationTask}/2 Notes created today.`);
      } else if (newDailyNoteCreationTask == 2) {
        await this.giveStatusPoints(pointsForDailyChallenge);
        const message = getRandomMessageTwoNoteChallenge(pointsForDailyChallenge);
        console.log(`daily Challenge reached! ${newDailyNoteCreationTask}/2 created.`);
        new import_obsidian2.Notice(message);
        console.log(message);
      } else {
        console.log(`${newDailyNoteCreationTask}/2 Notes created today.`);
      }
    }
  }
  async increaseWeeklyCreatedNoteCount() {
    if (isOneDayBefore(window.moment(this.settings.weeklyNoteCreationDate, "DD.MM.YYYY"))) {
      await this.checkForWeeklyNoteChallengeBelow7();
    } else if (isSameDay(window.moment(this.settings.weeklyNoteCreationDate, "DD.MM.YYYY"))) {
      console.log(`daily note creation was rated already today.`);
    } else {
      this.settings.weeklyNoteCreationDate = window.moment().format("DD.MM.YYYY");
      this.settings.weeklyNoteCreationTask = 1;
      await this.saveSettings();
    }
  }
  async checkForWeeklyNoteChallengeBelow7() {
    let currentWeeklyCreatedNotes = this.settings.weeklyNoteCreationTask;
    if (currentWeeklyCreatedNotes < 7) {
      currentWeeklyCreatedNotes++;
      this.settings.weeklyNoteCreationDate = window.moment().format("DD.MM.YYYY");
      this.settings.weeklyNoteCreationTask = currentWeeklyCreatedNotes;
      await this.saveSettings();
      await this.checkForWeeklyNoteChallengeEvaluation(currentWeeklyCreatedNotes);
    }
  }
  async checkForWeeklyNoteChallengeEvaluation(newWeeklyNoteCreationTask) {
    if (newWeeklyNoteCreationTask <= 6) {
      await this.updateAvatarPage(this.settings.avatarPageName);
      console.log(`${newWeeklyNoteCreationTask}/7 Notes created in a chain.`);
    } else if (newWeeklyNoteCreationTask == 7) {
      await this.giveStatusPoints(pointsForWeeklyChallenge);
      console.log(`Weekly Challenge reached! ${newWeeklyNoteCreationTask}/7 created in a chain.`);
      const message = getRandomMessageWeeklyChallenge(pointsForWeeklyChallenge);
      new import_obsidian2.Notice(message);
      console.log(message);
    } else {
      console.log(`${newWeeklyNoteCreationTask}/7 Notes created in a chain.`);
    }
  }
  async updateStatusBar(statusbar) {
    const currentLevel = getLevelForPoints(this.settings.statusPoints);
    const progressbarPercent = (this.settings.statusPoints - currentLevel.points) / (currentLevel.pointsNext - currentLevel.points) * 100;
    const charNumProgressbar = 10;
    const barLength = Math.round(progressbarPercent / charNumProgressbar);
    statusbar.setText(`\u{1F3B2}|lvl: ${this.settings.statusLevel} | ${this.createProgressbar(charNumProgressbar, barLength)}`);
  }
  createProgressbar(charNumProgressbar, barLength) {
    let progressbar = "";
    for (let i2 = 1; i2 <= charNumProgressbar; i2++) {
      if (i2 <= barLength) {
        progressbar += "=";
      } else {
        progressbar += "-";
      }
    }
    return progressbar;
  }
  async loadSettings() {
    this.settings = Object.assign({}, defaultSettings, await this.loadData());
    console.log("loadSettings()");
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async giveStatusPoints(pointsToAdd) {
    let boosterFactor = 1;
    if (this.settings.badgeBoosterState) {
      boosterFactor = this.settings.badgeBoosterFactor;
    }
    this.settings.statusPoints = pointsToAdd * boosterFactor + this.settings.statusPoints;
    await this.saveData(this.settings);
    return this.updateAvatarPage(this.settings.avatarPageName);
  }
  async updateAvatarPage(avatarPageName) {
    const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
    if (existingFile == null) {
      console.log(`File ${avatarPageName}.md does not exist`);
      return false;
    }
    const file = existingFile;
    const content = await app.vault.read(file);
    let reference = null;
    let reference2 = null;
    let reference3 = null;
    let end = null;
    let start = null;
    let end2 = null;
    let start2 = null;
    let end3 = null;
    let start3 = null;
    const lines = content.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      const line = lines[i2].trim();
      if (line === "^levelAndPoints") {
        if (reference === null) {
          reference = i2;
        }
      }
      if (line === "^dailyNotesChallenge") {
        if (reference2 === null) {
          reference2 = i2;
        }
      }
      if (line === "^weeklyNotesChallenge") {
        if (reference3 === null) {
          reference3 = i2;
        }
      }
    }
    const newPoints = this.settings.statusPoints;
    const level = getLevelForPoints(newPoints);
    let nextLevelAt = this.settings.xpForNextLevel;
    let receiveBadge = false;
    if (this.settings.statusLevel < level.level) {
      new import_obsidian2.Notice(`With ${newPoints} points, the current level is ${level.level}.`);
      receiveBadge = checkIfReceiveABadge(this.settings.statusLevel, level.level);
      this.settings.statusLevel = level.level;
      nextLevelAt = level.pointsNext;
      this.settings.xpForNextLevel = level.pointsNext;
      await this.saveData(this.settings);
    }
    const progressBarEnd = nextLevelAt - newPoints;
    const newPointsString = "| **Level**  | **" + level.level + "** |\n| Points | " + newPoints + "    |\n^levelAndPoints\n```chart\ntype: bar\nlabels: [Expririence]\nseries:\n  - title: points reached\n    data: [" + newPoints + "]\n  - title: points to earn to level up\n    data: [" + progressBarEnd + "]\nxMin: " + level.points + "\nxMax: " + level.pointsNext + '\ntension: 0.2\nwidth: 40%\nlabelColors: false\nfill: false\nbeginAtZero: false\nbestFit: false\nbestFitTitle: undefined\nbestFitNumber: 0\nstacked: true\nindexAxis: y\nxTitle: "progress"\nlegend: false\n```';
    const dailyChallenge = "| **daily Notes** | *500EP* | **" + this.settings.dailyNoteCreationTask + "/2**   |";
    const daysLeftInWeeklyChain = 7 - this.settings.weeklyNoteCreationTask;
    const weeklyChallenge = "| **weekly Notes** | *2000EP*     |  **" + this.settings.weeklyNoteCreationTask + "/7**   |\n^weeklyNotesChallenge\n```chart\ntype: bar\nlabels: [days done in a row]\nseries:\n  - title: days to do in a row\n    data: [" + this.settings.weeklyNoteCreationTask + "]\n  - title: points to earn to level up\n    data: [" + daysLeftInWeeklyChain + ']\nxMin: 0\nxMax: 7\ntension: 0.2\nwidth: 40%\nlabelColors: false\nfill: false\nbeginAtZero: false\nbestFit: false\nbestFitTitle: undefined\nbestFitNumber: 0\nstacked: true\nindexAxis: y\nxTitle: "progress"\nlegend: false\n```';
    if (reference != null && reference2 != null && reference3 != null) {
      start = reference - 2;
      end = reference + 24;
      start2 = reference2 - 1 - 25;
      end2 = reference2 - 25;
      start3 = reference3 - 1 - 25;
      end3 = reference3 + 24 - 25;
      const newLines = [...lines.slice(0, start), newPointsString, ...lines.slice(end)];
      const newLines2 = [...newLines.slice(0, start2), dailyChallenge, ...newLines.slice(end2)];
      const newLines3 = [...newLines2.slice(0, start3), weeklyChallenge, ...newLines2.slice(end3)];
      await app.vault.modify(file, newLines3.join("\n"));
    }
    return receiveBadge;
  }
  async giveBadgeInProfile(avatarPageName, badge) {
    const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
    if (existingFile == null) {
      console.log(`File ${avatarPageName}.md does not exist`);
      return;
    }
    const file = existingFile;
    const content = await app.vault.read(file);
    let reference = null;
    let reference2 = null;
    let end = null;
    let start = null;
    let end2 = null;
    let start2 = null;
    const lines = content.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      const line = lines[i2].trim();
      if (line === "#### achieved") {
        if (reference === null) {
          reference = i2;
        }
      }
      if (line === badge.level + ": *" + badge.name + "*") {
        if (reference2 === null) {
          reference2 = i2;
        }
      }
    }
    if (reference != null && reference2 != null) {
      end = reference + 1;
      start = reference + 1;
      end2 = reference2 + 2;
      start2 = reference2 + 1;
      const badgeString = "**" + badge.name + "** " + badge.level + "\n> " + badge.description + " - *" + window.moment().format("D.M.YY") + "*\n";
      const newLines = [...lines.slice(0, start), badgeString, ...lines.slice(end)];
      const newLines2 = [...newLines.slice(0, start2), ...newLines.slice(end2)];
      await app.vault.modify(file, newLines2.join("\n"));
      console.log(`badgeString: ${badgeString}`);
    }
  }
  async giveInitBadgeInProfile(avatarPageName, badge) {
    const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
    if (existingFile == null) {
      console.log(`File ${avatarPageName}.md does not exist`);
      return;
    }
    const file = existingFile;
    const content = await app.vault.read(file);
    let reference = null;
    let end = null;
    let start = null;
    const lines = content.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      const line = lines[i2].trim();
      if (line === "#### achieved") {
        if (reference === null) {
          reference = i2;
        }
      }
    }
    if (reference != null) {
      end = reference + 2;
      start = reference + 1;
      const badgeString = "**" + badge.name + "**\n> " + badge.description + " - *" + window.moment().format("D.M.YY") + "*\n";
      const newLines = [...lines.slice(0, start), badgeString, ...lines.slice(end)];
      await app.vault.modify(file, newLines.join("\n"));
      console.log(`badgeString: ${badgeString}`);
    }
  }
  async removeBadgesWhenInitLevelHigher(avatarPageName, level) {
    const existingFile = app.vault.getAbstractFileByPath(`${avatarPageName}.md`);
    if (existingFile == null) {
      console.log(`File ${avatarPageName}.md does not exist`);
      return;
    }
    const file = existingFile;
    const content = await app.vault.read(file);
    let reference = null;
    let reference2 = null;
    const lines = content.split("\n");
    for (let i2 = 0; i2 < lines.length; i2++) {
      const line = lines[i2].trim();
      if (line === "#### outstanding") {
        if (reference === null) {
          reference = i2;
        }
      }
      if (reference != null && reference2 == null) {
        const levelRegex = /level (\d+)/;
        const match2 = line.match(levelRegex);
        if (match2) {
          const levelNumber = parseInt(match2[1], 10);
          if (levelNumber > level) {
            reference2 = i2;
          }
        }
      }
    }
    if (reference != null && reference2 != null) {
      const newLines = [...lines.slice(0, reference + 1), ...lines.slice(reference2)];
      await app.vault.modify(file, newLines.join("\n"));
    }
  }
  async createChart(vault) {
    const files = vault.getMarkdownFiles();
    const earliestFile = findEarliestModifiedFile(files);
    const earliestDate = earliestFile.stat.mtime;
    let monthCounter = 0;
    let dateCount = new Date(earliestDate);
    const fileDateMonthMapMod = /* @__PURE__ */ new Map();
    const monthcount = monthsBetween(new Date(earliestDate), new Date());
    let dateString = dateCount.getMonth() + 1 + "." + dateCount.getFullYear();
    let yLabel = "";
    monthCounter = 0;
    dateCount = new Date(earliestDate);
    dateString = dateCount.getMonth() + 1 + "." + dateCount.getFullYear();
    while (monthCounter < monthcount) {
      dateString = dateCount.getMonth() + 1 + "." + dateCount.getFullYear();
      yLabel = yLabel + dateString + ", ";
      dateCount.setMonth(dateCount.getMonth() + 1);
      monthCounter += 1;
      fileDateMonthMapMod.set(dateString, 0);
    }
    yLabel = yLabel.slice(0, yLabel.length - 2);
    const modificationDates = getModificationDates(files);
    for (let i2 = 0; i2 < modificationDates.length; i2++) {
      const formattedDate = format(modificationDates[i2], "M.yyyy");
      const currentCount = fileDateMonthMapMod.get(formattedDate);
      if (currentCount !== void 0) {
        fileDateMonthMapMod.set(formattedDate, currentCount + 1);
      } else {
        fileDateMonthMapMod.set(formattedDate, 1);
      }
    }
    let charStringModified = "";
    for (const [value] of fileDateMonthMapMod) {
      charStringModified = charStringModified + value + ", ";
    }
    charStringModified = charStringModified.slice(0, charStringModified.length - 2);
    return createChartFormat(yLabel, charStringModified, this.settings.chartReduzierungMonate);
  }
  async decisionIfBadge(newLevel) {
    newLevel.then((result) => {
      if (result) {
        const badge = getBadgeForLevel(this.settings.statusLevel, false);
        new import_obsidian2.Notice(`You've earned the "${badge.name}" badge. ${badge.description}`);
        console.log(`You've earned the "${badge.name}" badge. ${badge.description}`);
        this.giveBadgeInProfile(this.settings.avatarPageName, badge);
        this.settings.badgeBoosterState = false;
        this.settings.badgeBoosterFactor = 1;
        this.saveData(this.settings);
      }
    });
  }
  async removeKeysFromFrontmatter() {
    const { vault } = this.app;
    const fileCountMap = await getFileCountMap(this.app, this.settings.tagsExclude, this.settings.folderExclude);
    for (const fileName of fileCountMap.keys()) {
      const files = vault.getFiles();
      const file = files.find((file2) => file2.basename === fileName);
      if (!file) {
        console.warn(`File ${fileName} not found.`);
        continue;
      }
      console.log(`Processing file ${fileName}`);
      try {
        await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
          delete frontmatter["title-class"];
          delete frontmatter["note-length-class"];
          delete frontmatter["inlink-class"];
          delete frontmatter["outlink-class"];
          delete frontmatter["progressive-summarization-maturity"];
          delete frontmatter["note-maturity"];
        });
      } catch (e2) {
        if ((e2 == null ? void 0 : e2.name) === "YAMLParseError") {
          const errorMessage = `Update majuritys failed Malformed frontamtter ${e2.message}`;
          new import_obsidian2.Notice(errorMessage, 4e3);
          console.error(errorMessage);
        }
      }
    }
  }
  async whichLevelNextBadge(currentLevel) {
    let nextBadgeLevel = 0;
    for (let i2 = currentLevel; i2 < 110; i2++) {
      const badge = getBadgeForLevel(i2, true);
      const levelRegex = /level (\d+)/;
      const match2 = badge.level.match(levelRegex);
      if (match2) {
        const levelNumber = parseInt(match2[1], 10);
        if (levelNumber > currentLevel && nextBadgeLevel == 0) {
          nextBadgeLevel = levelNumber;
        }
      }
    }
    return nextBadgeLevel;
  }
  async boosterForInit() {
    const nextBadgeAt = await this.whichLevelNextBadge(this.settings.statusLevel);
    const statusPointsToReach = statusPointsForLevel(nextBadgeAt);
    const boosterFactor = Math.round((statusPointsToReach - this.settings.statusPoints) / 50 / 300);
    this.settings.badgeBoosterFactor = boosterFactor;
    this.settings.badgeBoosterState = true;
    await this.saveData(this.settings);
    return boosterFactor;
  }
  async openAvatarFile() {
    var _a;
    const existingFile = app.vault.getAbstractFileByPath(`${this.settings.avatarPageName}.md`);
    if (existingFile) {
      const sourcePath = ((_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path) || "";
      await app.workspace.openLinkText(existingFile.path, sourcePath);
    } else {
      console.log("File not found or unable to open.");
    }
  }
};
function isSameDay(inputDate) {
  const currentDate = window.moment();
  return currentDate.isSame(inputDate, "day");
}
function isOneDayBefore(inputDate) {
  const oneDayBeforeCurrent = window.moment().subtract(1, "day");
  return inputDate.isSame(oneDayBeforeCurrent, "day");
}
async function createAvatarFile(app2, fileName) {
  const existingFile = app2.vault.getAbstractFileByPath(`${fileName}.md`);
  if (existingFile instanceof import_obsidian2.TFile) {
    console.log(`File ${fileName}.md already exists`);
    return;
  }
  await app2.vault.create(`${fileName}.md`, avatarInitContent);
}
var MultiSelectModal = class extends import_obsidian2.Modal {
  constructor(app2, items, buttonText, gamificationInstance) {
    super(app2);
    this.selectedItems = [];
    this.remainingStock = {};
    this.boosters = {};
    this.useBooster = false;
    this.remainingBoosterStock = {};
    this.items = items;
    this.buttonText = buttonText;
    this.gamificationInstance = gamificationInstance;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.useBooster) {
      boosterRecipes.forEach((item) => {
        const listItem = this.createItemContainer(item.name);
        contentEl.appendChild(listItem);
      });
    } else {
      const listItem = this.createItemContainer("");
      contentEl.appendChild(listItem);
    }
  }
  onClose() {
    this.selectedItems = [];
  }
  setUseBooster(useBooster) {
    this.useBooster = useBooster;
  }
  // Updated createItemContainer method
  createItemContainer(labelText) {
    if (this.useBooster) {
      return this.createBoosterList(labelText);
    } else {
      return this.createCraftingLayout();
    }
  }
  updateIncrementStock(increment, stock) {
    this.remainingStock[increment] = stock;
  }
  updateBoosterStock(booster, stockIncrease) {
    this.boosters[booster] += stockIncrease;
  }
  decrementBooster(booster, stockIncrease) {
    this.boosters[booster] -= stockIncrease;
  }
  setBoosters(boosters) {
    this.boosters = {
      "Booster 1": 5,
      "Booster 2": 3
    };
  }
  readBoostersStock() {
    if (this.gamificationInstance) {
      this.boosters = {
        "Temporal Tweaker": this.gamificationInstance.getSetting("temporalTweaker"),
        "Perpetual Progress": this.gamificationInstance.getSetting("perpetualProgress"),
        "Strategic Synapses": this.gamificationInstance.getSetting("strategicSynapses"),
        "Accelerated Acquisition": this.gamificationInstance.getSetting("acceleratedAcquisition"),
        "Linkers Lode": this.gamificationInstance.getSetting("linkersLode"),
        "Effortless Expansion": this.gamificationInstance.getSetting("effortlessExpansion"),
        "Recursive Reflection": this.gamificationInstance.getSetting("recursiveReflection"),
        "Synaptic Surge": this.gamificationInstance.getSetting("synapticSurge"),
        "Inspiration Infusion": this.gamificationInstance.getSetting("inspirationInfusion"),
        "Title Titan": this.gamificationInstance.getSetting("titleTitan"),
        "Precision Prism": this.gamificationInstance.getSetting("precisionPrism"),
        "Hyperlink Harmony": this.gamificationInstance.getSetting("hyperlinkHarmony")
      };
    }
  }
  readIngrementStock() {
    if (this.gamificationInstance) {
      this.remainingStock = {
        "Nexus Node": this.gamificationInstance.getSetting("nexusNode"),
        "Connection Crystal": this.gamificationInstance.getSetting("connectionCrystal"),
        "Mastery Scroll": this.gamificationInstance.getSetting("masteryScroll"),
        "Insight Prism": this.gamificationInstance.getSetting("insightPrism"),
        "Reflective Essence": this.gamificationInstance.getSetting("reflectiveEssence"),
        "Amplification Crystal": this.gamificationInstance.getSetting("amplificationCrystal"),
        "Creative Catalyst": this.gamificationInstance.getSetting("creativeCatalyst"),
        "Precision Lens": this.gamificationInstance.getSetting("precisionLens")
      };
    }
  }
  createCraftingLayout() {
    const container = document.createElement("div");
    container.className = "modal-crafting-container";
    const stockContainer = document.createElement("div");
    stockContainer.className = "stock-container";
    craftingItems.forEach((recipe) => {
      const itemContainer = document.createElement("div");
      itemContainer.className = "crafting-item-container";
      const button = document.createElement("button");
      button.innerText = "Craft";
      button.onclick = () => this.craftBoosterItem(recipe);
      const itemText = document.createElement("span");
      itemText.innerText = `${recipe.name} \u21D2 ${recipe.incredients.join("    ")}`;
      itemContainer.appendChild(button);
      itemContainer.appendChild(itemText);
      container.appendChild(itemContainer);
    });
    const stockInfo = document.createElement("div");
    stockInfo.className = "stock-info";
    elements.forEach((element) => {
      console.log(`${element.name} : ${this.remainingStock[element.name]}`);
      stockInfo.innerHTML += `${element.shortName} [${this.remainingStock[element.name] || 0}]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`;
    });
    stockContainer.appendChild(stockInfo);
    container.appendChild(stockContainer);
    return container;
  }
  updateStock(item, stock) {
    this.remainingStock[item] = stock;
    const labelElement = document.querySelector(`.${item.replace(" ", "-")}`);
    if (labelElement) {
      this.updateQuantityDisplay(item);
    }
  }
  incrementItem(item) {
    const stock = this.remainingStock[item];
    console.log(`incrementItem: stock = ${stock}`);
    if (stock > 0) {
      this.selectedItems.push(item);
      this.remainingStock[item]--;
      this.updateQuantityDisplay(item);
    }
    if (this.boosters[item] !== void 0) {
      this.boosters[item]--;
      this.updateQuantityDisplay(item);
    }
  }
  decrementItem(item) {
    const itemIndex = this.selectedItems.indexOf(item);
    if (itemIndex > -1) {
      this.selectedItems.splice(itemIndex, 1);
      this.remainingStock[item]++;
      this.updateQuantityDisplay(item);
    }
    if (this.boosters[item] !== void 0) {
      this.boosters[item]++;
      this.updateQuantityDisplay(item);
    }
  }
  createBoosterList(labelText) {
    const container = document.createElement("div");
    container.className = "modal-checkbox-container";
    const stock = this.boosters[labelText];
    const label = document.createElement("label");
    label.innerText = `${labelText} \u21D2 ${stock}x (s)`;
    const useButton = document.createElement("button");
    useButton.innerText = "Use";
    useButton.onclick = () => {
      this.useBoosterItem(labelText);
    };
    container.appendChild(label);
    container.appendChild(useButton);
    return container;
  }
  useBoosterItem(labelText) {
    console.log(`use Booster ${labelText}`);
    const stock = this.remainingStock[labelText];
    if (stock > 0) {
      this.selectedItems.push(labelText);
      this.remainingStock[labelText]--;
      this.updateQuantityDisplay(labelText);
    }
  }
  updateQuantityDisplay(labelText) {
    console.log("updateQuantityDisplay called with label:", labelText);
    const labelElement = document.querySelector(`.${labelText.replace(" ", "-")}`);
    if (!labelElement) {
      console.log(`labelElement not found`);
      return;
    }
    const container = labelElement.parentElement;
    if (!container) {
      console.log(`container not found`);
      return;
    }
    const remainingStock = container.querySelector(`#remaining-stock span`);
    if (!remainingStock) {
      console.log(`remainingStock not found`);
      return;
    }
    const selectedQuantity = container.querySelector(`#selected-quantity span`);
    if (!selectedQuantity) {
      console.log(`selectedQuantity not found`);
      return;
    }
    const stock = this.remainingStock[labelText] || 0;
    const selected = this.selectedItems.filter((item) => item === labelText).length;
    console.log(`stock: ${stock}, selected: ${selected}`);
    this.remainingStock[labelText];
    remainingStock.innerText = `${this.remainingStock[labelText]}`;
    selectedQuantity.innerText = `${selected}`;
  }
  checkIngredientsAvailability(incredients) {
    for (const ingredient of incredients.incredients) {
      const [quantity, shortName] = ingredient.split("x");
      const requiredQuantity = parseInt(quantity);
      const availableStock = this.remainingStock[this.getIngerementNameFromShortName(shortName) || 0];
      if (requiredQuantity > availableStock) {
        return false;
      }
    }
    return true;
  }
  craftBoosterItem(selectedItems) {
    if (this.checkIngredientsAvailability(selectedItems)) {
      console.log(`craft booster ${selectedItems.name}`);
      this.updateBoosterStock(selectedItems.name, 1);
      this.gamificationInstance.setSetting(this.getBoosterVarNameFromName(selectedItems.name), this.boosters[selectedItems.name]);
    } else {
      console.log(`not enough ingredients for booster ${selectedItems.name} in stock`);
    }
  }
  getIngerementNameFromShortName(shortName) {
    for (const element of elements) {
      if (element.shortName === shortName) {
        return element.name;
      }
    }
    return null;
  }
  getBoosterVarNameFromName(boosterName) {
    for (const element of boosterRecipes) {
      if (element.name === boosterName) {
        return element.varname;
      }
    }
    return "";
  }
};
var ModalBooster = class extends import_obsidian2.Modal {
  constructor(app2, displayText, gamificationInstance) {
    super(app2);
    this.displayText = displayText;
    this.gamificationInstance = gamificationInstance;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText(this.displayText);
    const multiSelectModal = new MultiSelectModal(this.app, [], "Craft Booster Item", this.gamificationInstance);
    const button = document.createElement("button");
    button.innerText = "Open Crafting Table";
    button.onclick = () => {
      multiSelectModal.setUseBooster(false);
      multiSelectModal.open();
    };
    multiSelectModal.readBoostersStock();
    multiSelectModal.readIngrementStock();
    const button2 = document.createElement("button");
    button2.innerText = "Open Booster Board";
    button2.onclick = () => {
      multiSelectModal.setUseBooster(true);
      multiSelectModal.open();
    };
    contentEl.appendChild(button);
    contentEl.appendChild(button2);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  readIncredients(multiSelectModal) {
    const stockValues = {
      "Nexus Node": this.gamificationInstance.getSetting("nexusNode"),
      "Connection Crystal": this.gamificationInstance.getSetting("connectionCrystal"),
      "Mastery Scroll": this.gamificationInstance.getSetting("masteryScroll"),
      "Insight Prism": this.gamificationInstance.getSetting("insightPrism"),
      "Reflective Essence": this.gamificationInstance.getSetting("reflectiveEssence"),
      "Amplification Crystal": this.gamificationInstance.getSetting("amplificationCrystal"),
      "Creative Catalyst": this.gamificationInstance.getSetting("creativeCatalyst"),
      "Precision Lens": this.gamificationInstance.getSetting("precisionLens")
    };
    incrediments.forEach((item) => {
      multiSelectModal.updateStock(item, stockValues[item]);
    });
    return ["", ""];
  }
};
var ModalInformationbox = class extends import_obsidian2.Modal {
  // Store the text to be displayed
  constructor(app2, displayText) {
    super(app2);
    this.displayText = displayText;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText(this.displayText);
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
async function replaceFormatStrings(layer2, layer3) {
  const activeView = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
  if (!activeView) {
    console.error("No active Markdown view found.");
    return;
  }
  const editor = activeView.editor;
  const selectedText = editor.getSelection();
  if (!selectedText) {
    console.error("No text selected (for progressive summarization switch Layer 2 & 3).");
    return;
  }
  let replacedText = selectedText.replaceAll(layer2, "\xA7\xA7\xA7\xA7");
  replacedText = replacedText.replaceAll(layer3, "\u20AC\u20AC\u20AC\u20AC");
  replacedText = replacedText.replaceAll("\u20AC\u20AC\u20AC\u20AC", layer2);
  replacedText = replacedText.replaceAll("\xA7\xA7\xA7\xA7", layer3);
  editor.replaceSelection(replacedText);
}
function rateDirectionForStatusPoints(ratingCurrent, ratingNew) {
  let ratingFaktor;
  if (parseInt(ratingCurrent, 10) < ratingNew) {
    ratingFaktor = ratingNew - parseInt(ratingCurrent, 10);
  } else {
    ratingFaktor = 0;
  }
  return ratingFaktor;
}
//# sourceMappingURL=data:application/json;base64,
